#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby18Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-281,497,198,199,402,198,199,-281,-281,-281,261,-83,218,-281,-281,647',
'-281,-89,-84,-85,-88,439,-64,102,526,-77,218,-87,101,538,466,261,497',
'497,-86,-281,-281,467,-281,-281,-281,-281,-281,497,215,-90,465,596,217',
'216,-90,261,-438,692,597,218,626,497,724,-438,-72,218,709,-450,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,626',
'626,-281,-281,-281,-500,557,528,527,529,-281,-77,294,-281,537,-365,260',
'294,-281,-499,-281,-85,-281,-281,-281,-281,-281,-281,-281,-77,-281,-83',
'-281,102,102,-75,496,260,101,101,646,-81,-76,-77,-80,-281,-281,-503',
'-80,-77,-281,-79,-88,-77,-503,-503,-503,260,-78,102,-503,-503,-79,-503',
'101,102,102,496,496,-82,101,101,-503,218,-263,102,102,625,496,526,101',
'101,-503,-503,596,-503,-503,-503,-503,-503,102,597,496,75,503,101,504',
'102,102,625,625,76,101,101,526,215,198,199,472,217,216,-503,-503,-503',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,218,-79,-503',
'-503,-503,526,554,294,-497,485,-503,197,487,-503,-496,528,527,539,-503',
'-79,-503,263,-503,-503,-503,-503,-503,-503,-503,-89,-503,-503,-503,526',
'-499,472,531,547,567,-79,528,527,524,-79,693,-503,-503,-519,-78,-503',
'-503,-450,-86,-82,-519,-519,-519,-90,-441,-519,-519,-519,682,-519,-438',
'-441,528,527,548,526,-497,-438,566,-519,-441,674,-496,-81,198,199,-438',
'-89,-519,-519,-499,-519,-519,-519,-519,-519,-87,-499,-497,-75,528,527',
'-499,-83,-496,-503,-499,-262,567,779,-76,218,-503,545,-84,521,-77,-499',
'-275,833,-85,-503,522,833,-499,-275,-275,-275,-519,543,-275,-275,-275',
'549,-275,-519,528,527,533,-503,263,-519,566,215,-275,-275,567,217,216',
'213,214,-503,536,-275,-275,-84,-275,-275,-275,-275,-275,485,567,-519',
'484,665,664,668,667,665,664,668,667,638,532,-79,-519,639,-519,-87,566',
'-519,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'-275,566,-447,-275,-275,-275,-503,102,-275,-447,780,-275,101,-503,-275',
'-275,788,-275,-499,-275,577,-275,-503,-275,-275,-275,-275,-275,-275',
'-275,-441,-275,485,-275,727,490,504,-441,-445,661,-503,659,658,657,660',
'-445,-275,-275,-275,-275,577,-275,-500,-500,-500,-448,-500,-503,102',
'195,-500,-500,-448,101,577,-500,196,-500,-500,-500,-500,-500,-500,-500',
'485,194,800,487,-500,-500,-500,-500,-500,-500,-500,665,664,668,667,218',
'509,365,736,727,-500,367,366,-500,-500,-500,-500,-500,-500,-500,-500',
'-500,-500,-503,-500,-500,-444,-500,-500,-500,-503,-327,263,-444,263',
'-499,508,215,-327,-503,102,217,216,213,214,101,237,-327,190,-500,557',
'398,-500,-500,805,-500,-500,-503,399,-500,358,-500,-262,-500,-443,-500',
'809,400,-449,-274,475,-443,812,-500,814,-449,-274,476,-500,-500,-500',
'-500,-500,-500,-449,-274,400,-500,-500,-499,-499,-499,254,-499,-500',
'102,-88,-499,-499,255,101,817,-499,492,-499,-499,-499,-499,-499,-499',
'-499,668,667,198,199,-499,-499,-499,-499,-499,-499,-499,-446,771,772',
'489,773,96,97,-446,577,-499,736,727,-499,-499,-499,-499,-499,-499,-499',
'-499,-499,-499,-500,-499,-499,506,-499,-499,-499,-500,-282,821,507,294',
'-500,198,199,-282,-500,470,471,505,825,643,287,288,-282,826,-499,694',
'641,-499,-499,294,-499,-499,-500,218,-499,642,-499,474,-499,473,-499',
'104,105,106,107,108,837,838,-499,263,294,577,-519,-499,-499,-499,-499',
'-499,-499,-519,-519,-519,-499,-499,-519,-519,-519,-281,-519,218,845',
'-86,577,-282,-281,846,847,848,-519,-500,-282,266,468,-281,852,232,233',
'-519,-519,-282,-519,-519,-519,-519,-519,3,855,-283,462,388,392,215,-449',
'390,-283,217,216,213,214,-449,857,142,143,-283,140,124,125,126,-449',
'129,131,858,859,127,461,-281,843,-519,144,145,132,133,-281,844,-519',
'460,-63,-500,263,263,-519,-281,842,864,865,137,136,444,123,141,139,138',
'134,135,130,128,121,439,122,869,-274,146,-519,872,873,764,764,-274,765',
'436,65,66,67,10,54,-519,-274,-519,59,60,-519,433,404,63,403,61,62,64',
'26,27,68,69,401,369,886,368,25,31,30,91,90,92,93,889,577,20,104,105',
'106,107,108,9,44,11,12,95,94,85,53,87,86,88,89,96,97,348,83,84,577,41',
'42,40,218,-520,-520,-520,-520,224,226,-282,-281,-520,-520,-283,345,324',
'-282,-281,232,233,-283,39,-500,294,33,-282,-281,55,56,-283,286,57,285',
'35,215,905,221,43,217,216,213,214,225,223,219,21,220,906,907,237,81',
'75,77,78,79,80,98,193,192,76,82,65,66,67,911,54,358,191,614,59,60,915',
'916,764,63,246,61,62,64,26,27,68,69,711,439,713,717,25,31,30,91,90,92',
'93,718,439,20,706,695,723,444,544,444,44,678,263,95,94,85,53,87,86,88',
'89,96,97,676,83,84,918,41,42,40,218,222,227,228,229,224,226,234,235',
'230,231,263,211,212,218,218,232,233,629,203,727,504,207,732,621,55,56',
'727,740,57,741,294,215,745,221,43,217,216,213,214,225,223,219,21,220',
'615,614,478,81,75,77,78,79,80,601,-72,919,76,82,102,236,65,66,67,101',
'54,600,599,237,59,60,598,294,593,63,759,61,62,64,249,250,68,69,761,764',
'765,766,248,278,282,91,90,92,93,104,105,106,107,108,767,577,,,279,,',
'95,94,85,53,87,86,88,89,96,97,,83,84,,,661,283,659,658,657,660,,,,,',
',,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,661,,659,658,657,660,,,,665,664',
'668,667,81,75,77,78,79,80,,,,76,82,65,66,67,786,54,,,,59,60,,,,63,651',
'61,62,64,249,250,68,69,665,664,668,667,248,278,282,91,90,92,93,,,,,',
',,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,218,222,227,228',
'229,224,226,234,235,230,231,,211,212,,,232,233,,783,,,207,,,55,56,,',
'57,,,215,,221,,217,216,213,214,225,223,219,,220,,,,81,75,77,78,79,80',
',,,76,82,,236,564,880,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,661,,659,658,657,660,,21,,,,,81,75,77,78,79,80,,,,76,82,8',
'65,66,67,10,54,,,,59,60,,,,63,651,61,62,64,26,27,68,69,665,664,668,667',
'25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,218,222,227,228,229,224,226,234,,230,231,,,,,,232',
'233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219',
'21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227,228,229,224',
'226,,,230,231,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217',
'216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,218,-520,-520,-520,-520,224,226,,,-520,-520,,,,,,232,233,,39,,,33',
',,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81',
'75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,218,-520,-520,-520,-520,224,226,,,-520',
'-520,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213',
'214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-520',
'-520,-520,-520,224,226,,,-520,-520,,,,,,232,233,,39,,,33,,,55,56,,,57',
',35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,218,-520,-520,-520,-520,224,226,,,-520,-520,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-520,-520',
'-520,-520,224,226,,,-520,-520,,,,,,232,233,,39,,,33,,,55,56,,,57,,35',
'215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35',
'215,,221,43,217,216,213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,268,,,55,56,,,57,,35,215',
',221,43,217,216,213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8',
'65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221',
'43,217,216,213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43',
'217,216,213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
'218,222,227,228,229,224,226,234,235,230,231,,-520,-520,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227,228,229,224,226,234',
'235,230,231,,-520,-520,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221',
'43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82',
'8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,268,,,55,56,,,57,,35,215,',
'221,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43',
'217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,268,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,',
'76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,',
',,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39',
',,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,783',
',,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,866,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,448,56',
',,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,699,,700',
',,,,,,,,701,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,',
',63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,,,283,,,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,',
',,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,',
',,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,',
',,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43,,',
',,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252,-252,,,,-252',
',-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252',
'-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252',
',-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,263,,-252',
'-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252',
'-252,,,,-252,-252,-252,-252,-252,,-252,,,,-252,-252,,,,-252,,-252,-252',
'-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252,-252,,,,',
',,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,,-252',
'-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,266,,-252,-252,',
',-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252,-252',
',,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,',
',248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,272,,,,,,,',
',,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,207,',
',55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,',
',,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,',
',,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,',
',,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,318,,,33,,,55,56,,,57,,35,,,,,,',
',,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,893,,246,,43,,,,,,,,210,,',
',,81,75,77,78,79,80,,,,76,82,-496,-496,-496,,-496,,,,-496,-496,,,,-496',
',-496,-496,-496,-496,-496,-496,-496,,-496,,,-496,-496,-496,-496,-496',
'-496,-496,,,,,,,,,,-496,,,-496,-496,-496,-496,-496,-496,-496,-496,-496',
'-496,,-496,-496,,-496,-496,-496,,,,,,,,,,,,,,,,,,,,-496,,,-496,-496',
',-496,-496,,,-496,,-496,,-496,,-496,,,,,,,,-496,,-496,,,-496,-496,-496',
'-496,-496,-496,,,,-496,-496,-497,-497,-497,,-497,,,,-497,-497,,,,-497',
',-497,-497,-497,-497,-497,-497,-497,,-497,,,-497,-497,-497,-497,-497',
'-497,-497,,,,,,,,,,-497,,,-497,-497,-497,-497,-497,-497,-497,-497,-497',
'-497,,-497,-497,,-497,-497,-497,,,,,,,,,,,,,,,,,,,,-497,,,-497,-497',
',-497,-497,,,-497,,-497,,-497,,-497,,,,,,,,-497,,-497,,,-497,-497,-497',
'-497,-497,-497,,,,-497,-497,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56',
',,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,890,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,',
',,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,376,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',376,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,',
',44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,',
',,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,458,55,56,,,57,,244,,246,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,783,,,207,,,55,56',
',,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,922,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,841,,840,,,,,,,,,,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181',
'185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152',
'171,170,,,,,,151,158,149,150,147,148,112,114,111,,113,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54',
',,82,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,478,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184',
'178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177',
'176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112,114,,,113',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146',
'81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,279,,,95,94,510,53,87,86,511,89,96,97,,83,84',
',,,283,,,,,,,,,,,,,,,,,,,,512,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,510,53,87,86',
'511,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,512,,,207,,,55,56,,,57',
',,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,',
',,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,798,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,796,,246,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,791,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,',
'76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',,,283,,,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162',
'183,184,178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175',
'182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112',
'114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
',,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250,68,69,,,',
',248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252',
'-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252',
'-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,',
'-252,263,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252',
'-252,-252,-252,-252,,,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56',
',,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-501,-501,-501',
',-501,,,,-501,-501,,,,-501,,-501,-501,-501,-501,-501,-501,-501,,,,,-501',
'-501,-501,-501,-501,-501,-501,,,,,,,,,,-501,,,-501,-501,-501,-501,-501',
'-501,-501,-501,-501,-501,,-501,-501,,-501,-501,-501,,,,,,,,,,,,,,,,',
',,,-501,,,-501,-501,,-501,-501,,,-501,,-501,,-501,,-501,,,,,,,,-501',
',,,,-501,-501,-501,-501,-501,-501,,,,-501,-501,-502,-502,-502,,-502',
',,,-502,-502,,,,-502,,-502,-502,-502,-502,-502,-502,-502,,,,,-502,-502',
'-502,-502,-502,-502,-502,,,,,,,,,,-502,,,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,,-502,-502,,-502,-502,-502,,,,,,,,,,,,,,,,,,,,-502',
',,-502,-502,,-502,-502,,,-502,,-502,,-502,,-502,,,,,,,,-502,,,,,-502',
'-502,-502,-502,-502,-502,,,,-502,-502,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,569,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,573,,246,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,587,,246,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,',
',,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,',
',,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,',
',,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,744,,,,43,,',
',,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,617,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,376,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181,185,186',
'165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171,170',
',,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54,,,82,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,681,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,',
',44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,',
',,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,569,,246,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184,178,161',
'160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177,332,331',
'333,330,152,171,170,,,,,,151,158,149,150,328,329,326,114,87,86,327,89',
',,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,',
',,,338,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146',
'156,167,157,180,153,173,163,162,183,184,178,161,160,155,181,185,186',
'165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171,170',
',,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,156,167,157,180,153,173,163,162',
'183,184,178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175',
'182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112',
'114,355,354,113,356,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,',
',,144,145,132,133,,,,,,,,,544,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,,,146,218,222,227,228,229,224,226,234,235,230,231,,211',
'212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220',
',,,,,,606,392,,,607,,,,,236,,-218,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,560,392,146,,561,,,,,,,,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,558,386,146,,559,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,633,386,146,,634,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,635,392,146,,636,,,,,',
',,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,',
',,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,441,386,146',
',442,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,',
',146,218,222,227,228,229,224,226,234,235,230,231,,211,212,,,232,233',
',,,-218,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,,,,,,,603',
'386,,,604,,,,,236,,-218,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,441,386,146,,442,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,558,386,146,,559,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,383,386,146,,384,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,560,392,146,,561,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,,,146,218,222,227,228,229',
'224,226,234,235,230,231,,211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,,,,,,,884,392,,,885,,,,,236,,577,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,441,386,146,,442,,,,,',
',,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,',
',,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,882,386,146',
',883,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,441',
'386,146,,442,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,747,392,146,,748,,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,441,386,146,,442,,,,,,,,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,,,146,218,222,227,228,229,224,226,234,235,230,231',
',211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233',
',,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,',
'215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226',
'234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216',
'213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231',
',211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223',
'219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232',
'233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222',
'227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,',
',,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224',
'226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218',
'222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,',
',,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229',
'224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221',
',217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235',
'230,231,,211,212,294,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213',
'214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211',
'212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233',
',,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,,,,,,,,,,,',
',,,294,236' ]
        racc_action_table = arr = ::Array.new(25020, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'390,743,671,671,204,612,612,390,390,390,58,316,407,390,390,516,390,508',
'745,633,636,585,600,5,342,603,412,634,5,349,275,29,808,310,635,390,390',
'275,390,390,390,390,390,309,407,319,275,721,407,407,204,280,326,558',
'721,411,499,813,612,326,600,410,585,202,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,746,500,390,390,390,636,390,342,342,342',
'390,603,671,390,349,29,58,721,390,635,390,558,390,390,390,390,390,390',
'390,603,390,202,390,754,743,316,743,29,754,743,516,508,745,633,636,390',
'390,388,390,603,390,634,390,603,388,388,388,280,635,516,388,388,604',
'388,516,808,310,808,310,319,808,310,388,408,680,499,309,499,309,351',
'499,309,388,388,454,388,388,388,388,388,813,454,813,73,314,813,314,746',
'500,746,500,73,746,500,340,408,308,308,401,408,408,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,409,604,388,388,388,534,388,454',
'511,306,388,17,306,388,510,351,351,351,388,604,388,389,388,388,388,388',
'388,388,388,401,388,388,388,344,882,286,344,382,583,604,340,340,340',
'604,559,388,388,443,388,747,388,38,388,17,443,443,443,17,511,443,443',
'443,547,443,510,511,534,534,383,346,511,510,583,443,511,534,510,286',
'648,648,510,286,443,443,882,443,443,443,443,443,559,882,511,38,344,344',
'882,38,510,747,882,378,431,695,547,427,747,375,547,335,383,747,53,873',
'383,747,335,761,882,53,53,53,443,370,53,53,53,384,53,443,346,346,346',
'747,443,443,431,427,53,53,450,427,427,427,427,884,348,53,53,695,53,53',
'53,53,53,299,451,443,299,873,873,873,873,761,761,761,761,512,345,384',
'443,512,443,384,450,443,53,53,53,53,53,53,53,53,53,53,53,53,53,53,451',
'329,53,53,53,884,652,53,329,698,53,652,884,53,53,702,53,884,53,704,53',
'884,53,53,53,53,53,53,53,327,53,303,53,867,303,867,327,333,651,884,651',
'651,651,651,333,53,53,53,53,707,53,561,561,561,328,561,606,647,16,561',
'561,328,647,712,561,16,561,561,561,561,561,561,561,300,16,714,300,561',
'561,561,561,561,561,561,651,651,651,651,426,320,111,620,620,561,111',
'111,561,561,561,561,561,561,561,561,561,561,606,561,561,332,561,561',
'561,606,45,719,332,720,606,318,426,45,606,313,426,426,426,426,313,722',
'45,12,561,561,201,561,561,725,561,561,606,201,561,315,561,728,561,331',
'561,729,201,274,277,289,331,734,561,737,274,277,289,561,561,561,561',
'561,561,274,277,289,561,561,560,560,560,28,560,883,823,561,560,560,28',
'823,742,560,304,560,560,560,560,560,560,560,764,764,296,296,560,560',
'560,560,560,560,560,330,672,672,302,672,672,672,330,925,560,896,896',
'560,560,560,560,560,560,560,560,560,560,883,560,560,317,560,560,560',
'883,468,750,317,298,883,18,18,468,883,283,283,317,755,514,40,40,468',
'756,560,560,514,560,560,757,560,560,883,291,560,514,560,288,560,287',
'560,109,109,109,109,109,769,775,560,282,279,909,440,560,560,560,560',
'560,560,440,440,440,560,560,440,440,440,607,440,415,783,560,912,639',
'607,785,786,789,440,607,639,278,276,607,794,415,415,440,440,639,440',
'440,440,440,440,1,797,723,271,196,196,415,781,196,723,415,415,415,415',
'781,801,196,196,723,196,196,196,196,781,196,196,802,803,196,270,748',
'782,440,196,196,196,196,748,782,440,269,267,748,259,440,440,748,782',
'815,816,196,196,256,196,196,196,196,196,196,196,196,196,247,196,822',
'784,196,440,827,828,829,832,784,833,243,100,100,100,100,100,440,784',
'440,100,100,440,242,206,100,205,100,100,100,100,100,100,100,203,189',
'846,187,100,100,100,100,100,100,100,850,853,100,7,7,7,7,7,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,80,100,100,856,100,100,100',
'416,416,416,416,416,416,416,845,885,416,416,907,79,65,845,885,416,416',
'907,100,885,44,100,845,885,100,100,907,39,100,37,100,416,879,416,100',
'416,416,416,416,416,416,416,100,416,880,881,23,100,100,100,100,100,100',
'3,15,14,100,100,63,63,63,891,63,100,13,895,63,63,901,902,903,63,577',
'63,63,63,63,63,63,63,586,575,589,594,63,63,63,63,63,63,63,595,572,63',
'570,562,602,555,563,550,63,542,605,63,63,63,63,63,63,63,63,63,63,538',
'63,63,904,63,63,63,563,563,563,563,563,563,563,563,563,563,563,608,563',
'563,610,611,563,563,502,63,613,501,63,616,495,63,63,622,628,63,630,481',
'563,632,563,63,563,563,563,563,563,563,563,63,563,480,479,469,63,63',
'63,63,63,63,464,460,905,63,63,63,563,699,699,699,63,699,459,457,456',
'699,699,455,453,452,699,653,699,699,699,699,699,699,699,654,655,661',
'666,699,699,699,699,699,699,699,357,357,357,357,357,669,437,,,699,,',
'699,699,699,699,699,699,699,699,699,699,,699,699,,,759,699,759,759,759',
'759,,,,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,,,,836,,836,836,836,836',
',,,759,759,759,759,699,699,699,699,699,699,,,,699,699,841,841,841,699',
'841,,,,841,841,,,,841,836,841,841,841,841,841,841,841,836,836,836,836',
'841,841,841,841,841,841,841,,,,,,,,,,841,,,841,841,841,841,841,841,841',
'841,841,841,,841,841,,,,841,430,430,430,430,430,430,430,430,430,430',
'430,,430,430,,,430,430,,841,,,841,,,841,841,,,841,,,430,,430,,430,430',
'430,430,430,430,430,,430,,,,841,841,841,841,841,841,,,,841,841,,430',
'430,841,715,715,715,715,715,715,,,,715,715,,,,715,,715,715,715,715,715',
'715,715,,,,,715,715,715,715,715,715,715,,,715,,,,,,715,715,715,715,715',
'715,715,715,715,715,715,715,715,715,,715,715,,715,715,715,,,,,,,,,,',
',,,,,,,,,715,,,715,,,715,715,,,715,,715,,,,715,519,,519,519,519,519',
',715,,,,,715,715,715,715,715,715,,,,715,715,868,868,868,868,868,868',
',,,868,868,,,,868,519,868,868,868,868,868,868,868,519,519,519,519,868',
'868,868,868,868,868,868,,,868,,,,,,868,868,868,868,868,868,868,868,868',
'868,868,868,868,868,,868,868,,868,868,868,429,429,429,429,429,429,429',
'429,,429,429,,,,,,429,429,,868,,,868,,,868,868,,,868,,868,429,,429,868',
'429,429,429,429,429,429,429,868,429,,,,868,868,868,868,868,868,,,,868',
'868,716,716,716,716,716,716,,,,716,716,,,,716,,716,716,716,716,716,716',
'716,,,,,716,716,716,716,716,716,716,,,716,,,,,,716,716,716,716,716,716',
'716,716,716,716,716,716,716,716,,716,716,,716,716,716,428,428,428,428',
'428,428,428,,,428,428,,,,,,428,428,,716,,,716,,,716,716,,,716,,716,428',
',428,716,428,428,428,428,428,428,428,716,428,,,,716,716,716,716,716',
'716,,,,716,716,190,190,190,190,190,190,,,,190,190,,,,190,,190,190,190',
'190,190,190,190,,,,,190,190,190,190,190,190,190,,,190,,,,,,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,,190,190,,190,190,190,425',
'425,425,425,425,425,425,,,425,425,,,,,,425,425,,190,,,190,,,190,190',
',,190,,190,425,,425,190,425,425,425,425,425,425,425,190,425,,,,190,190',
'190,190,190,190,,,,190,190,498,498,498,498,498,498,,,,498,498,,,,498',
',498,498,498,498,498,498,498,,,,,498,498,498,498,498,498,498,,,498,',
',,,,498,498,498,498,498,498,498,498,498,498,498,498,498,498,,498,498',
',498,498,498,424,424,424,424,424,424,424,,,424,424,,,,,,424,424,,498',
',,498,,,498,498,,,498,,498,424,,424,498,424,424,424,424,424,424,424',
'498,424,,,,498,498,498,498,498,498,,,,498,498,727,727,727,727,727,727',
',,,727,727,,,,727,,727,727,727,727,727,727,727,,,,,727,727,727,727,727',
'727,727,,,727,,,,,,727,727,727,727,727,727,727,727,727,727,727,727,727',
'727,,727,727,,727,727,727,423,423,423,423,423,423,423,,,423,423,,,,',
',423,423,,727,,,727,,,727,727,,,727,,727,423,,423,727,423,423,423,423',
'423,423,423,727,423,,,,727,727,727,727,727,727,,,,727,727,738,738,738',
'738,738,738,,,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,738,738',
'738,738,738,738,738,,,738,,,,,,738,738,738,738,738,738,738,738,738,738',
'738,738,738,738,,738,738,,738,738,738,422,422,422,422,422,422,422,,',
'422,422,,,,,,422,422,,738,,,738,,,738,738,,,738,,738,422,,422,738,422',
'422,422,422,422,422,422,738,422,,,,738,738,738,738,738,738,,,,738,738',
'793,793,793,793,793,793,,,,793,793,,,,793,,793,793,793,793,793,793,793',
',,,,793,793,793,793,793,793,793,,,793,,,,,,793,793,793,793,793,793,793',
'793,793,793,793,793,793,793,,793,793,,793,793,793,421,421,421,421,421',
'421,421,,,421,421,,,,,,421,421,,793,,,793,,,793,793,,,793,,793,421,',
'421,793,421,421,421,421,421,421,421,793,421,,,,793,793,793,793,793,793',
',,,793,793,369,369,369,369,369,369,,,,369,369,,,,369,,369,369,369,369',
'369,369,369,,,,,369,369,369,369,369,369,369,,,369,,,,,,369,369,369,369',
'369,369,369,369,369,369,369,369,369,369,,369,369,,369,369,369,420,,',
',,,,,,,,,,,,,420,420,,369,,,369,,,369,369,,,369,,369,420,,420,369,420',
'420,420,420,,,420,369,420,,,,369,369,369,369,369,369,,,,369,369,273',
'273,273,273,273,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,',
',,,273,273,273,273,273,273,273,,,273,,,,,,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,,273,273,,273,273,273,419,,,,,,,,,,,,,,',
',419,419,,273,,,273,,,273,273,,,273,,273,419,,419,273,419,419,419,419',
',,419,273,419,,,,273,273,273,273,273,273,,,,273,273,673,673,673,673',
'673,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,673,673,673',
'673,673,673,673,,,673,,,,,,673,673,673,673,673,673,673,673,673,673,673',
'673,673,673,,673,673,,673,673,673,418,,,,,,,,,,,,,,,,418,418,,673,,',
'673,,,673,673,,,673,,673,418,,418,673,418,418,418,418,,,418,673,418',
',,,673,673,673,673,673,673,,,,673,673,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2',
'2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
',2,2,2,417,,,,,,,,,,,,,,,,417,417,,2,,,2,,,2,2,,,2,,2,417,,417,2,417',
'417,417,417,,,417,2,417,,,,2,2,2,2,2,2,,,,2,2,818,818,818,818,818,818',
',,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,818,818,818,818,818',
'818,818,,,818,,,,,,818,818,818,818,818,818,818,818,818,818,818,818,818',
'818,,818,818,,818,818,818,406,406,406,406,406,406,406,406,406,406,406',
',406,406,,,406,406,,818,,,818,,,818,818,,,818,,818,406,,406,818,406',
'406,406,406,406,406,406,818,406,,,,818,818,818,818,818,818,,,,818,818',
'805,805,805,805,805,805,,,,805,805,,,,805,,805,805,805,805,805,805,805',
',,,,805,805,805,805,805,805,805,,,805,,,,,,805,805,805,805,805,805,805',
'805,805,805,805,805,805,805,,805,805,,805,805,805,405,405,405,405,405',
'405,405,405,405,405,405,,405,405,,,405,405,,805,,,805,,,805,805,,,805',
',805,405,,405,805,405,405,405,405,405,405,405,805,405,,,,805,805,805',
'805,805,805,,,,805,805,268,268,268,268,268,268,,,,268,268,,,,268,,268',
'268,268,268,268,268,268,,,,,268,268,268,268,268,268,268,,,268,,,,,,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,,268,268,,268,268',
'268,414,,,,,,,,,,,,,,,,414,414,,268,,,268,,,268,268,,,268,,268,414,',
'414,268,414,414,414,414,,,,268,,,,,268,268,268,268,268,268,,,,268,268',
'739,739,739,739,739,739,,,,739,739,,,,739,,739,739,739,739,739,739,739',
',,,,739,739,739,739,739,739,739,,,739,,,,,,739,739,739,739,739,739,739',
'739,739,739,739,739,739,739,,739,739,,739,739,739,413,,,,,,,,,,,,,,',
',413,413,,739,,,739,,,739,739,,,739,,739,413,,413,739,413,413,413,413',
',,,739,,,,,739,739,739,739,739,739,,,,739,739,295,295,295,295,295,295',
',,,295,295,,,,295,,295,295,295,295,295,295,295,,,,,295,295,295,295,295',
'295,295,,,295,,,,,,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,,295',
',295,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295,751,751',
'751,751,751,751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,751',
'751,751,751,751,751,751,,,751,,,,,,751,751,751,751,751,751,751,751,751',
'751,751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751',
',,751,751,,,751,,751,,,,751,,,,,,,,751,,,,,751,751,751,751,751,751,',
',,751,751,207,207,207,207,207,207,,,,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,207,207,207,207,207,207,207,,,207,,,,,,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,,207,207,,207,207,207,,,,,,',
',,,,,,,,,,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,207,,,,,207',
'207,207,207,207,207,,,,207,207,494,494,494,494,494,494,,,,494,494,,',
',494,,494,494,494,494,494,494,494,,,,,494,494,494,494,494,494,494,,',
'494,,,,,,494,494,494,494,494,494,494,494,494,494,494,494,494,494,,494',
'494,,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494,,494,',
',,494,,,,,,,,494,,,,,494,494,494,494,494,494,,,,494,494,33,33,33,33',
'33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,33,33,33,33,33,33,33',
',,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33',
',,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,,,33,,,,,,,,33,,,,,33,33',
'33,33,33,33,,,,33,33,863,863,863,863,863,863,,,,863,863,,,,863,,863',
'863,863,863,863,863,863,,,,,863,863,863,863,863,863,863,,,863,,,,,,863',
'863,863,863,863,863,863,863,863,863,863,863,863,863,,863,863,,863,863',
'863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,,863,,863,,,,863,,,,,,,',
'863,,,,,863,863,863,863,863,863,,,,863,863,861,861,861,861,861,861,',
',,861,861,,,,861,,861,861,861,861,861,861,861,,,,,861,861,861,861,861',
'861,861,,,861,,,,,,861,861,861,861,861,861,861,861,861,861,861,861,861',
'861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861',
',861,,,,861,,,,,,,,861,,,,,861,861,861,861,861,861,,,,861,861,649,649',
'649,649,649,649,,,,649,649,,,,649,,649,649,649,649,649,649,649,,,,,649',
'649,649,649,649,649,649,,,649,,,,,,649,649,649,649,649,649,649,649,649',
'649,649,649,649,649,,649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,649,,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,',
',,649,649,703,703,703,703,703,703,,,,703,703,,,,703,,703,703,703,703',
'703,703,703,,,,,703,703,703,703,703,703,703,,,703,,,,,,703,703,703,703',
'703,703,703,703,703,703,703,703,703,703,,703,703,,703,703,703,,,,,,',
',,,,,,,,,,,,,703,,,703,,,703,703,,,703,,703,,,,703,,,,,,,,703,,,,,703',
'703,703,703,703,703,,,,703,703,877,877,877,877,877,877,,,,877,877,,',
',877,,877,877,877,877,877,877,877,,,,,877,877,877,877,877,877,877,,',
'877,,,,,,877,877,877,877,877,877,877,877,877,877,877,877,877,877,,877',
'877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,877,',
',,877,,,,,,,,877,,,,,877,877,877,877,877,877,,,,877,877,871,871,871',
'871,871,871,,,,871,871,,,,871,,871,871,871,871,871,871,871,,,,,871,871',
'871,871,871,871,871,,,871,,,,,,871,871,871,871,871,871,871,871,871,871',
'871,871,871,871,,871,871,,871,871,871,,,,,,,,,,,,,,,,,,,,871,,,871,',
',871,871,,,871,,871,,,,871,,,,,,,,871,,,,,871,871,871,871,871,871,,',
',871,871,503,503,503,503,503,503,,,,503,503,,,,503,,503,503,503,503',
'503,503,503,,,,,503,503,503,503,503,503,503,,,503,,,,,,503,503,503,503',
'503,503,503,503,503,503,503,503,503,503,,503,503,,503,503,503,,,,,,',
',,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,,,503,,,,,,,,503,,,,,503',
'503,503,503,503,503,,,,503,503,650,650,650,650,650,650,,,,650,650,,',
',650,,650,650,650,650,650,650,650,,,,,650,650,650,650,650,650,650,,',
'650,,,,,,650,650,650,650,650,650,650,650,650,650,650,650,650,650,,650',
'650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650,,650,',
',,650,,,,,,,,650,,,,,650,650,650,650,650,650,,,,650,650,197,197,197',
',197,,,,197,197,,,,197,,197,197,197,197,197,197,197,,,,,197,197,197',
'197,197,197,197,,,,,,,,,,197,,,197,197,197,197,197,197,197,197,197,197',
',197,197,,197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,197,,,197,',
',,,,197,,,,,,,,197,,,,,197,197,197,197,197,197,,,,197,197,198,198,198',
',198,,,,198,198,,,,198,,198,198,198,198,198,198,198,,,,,198,198,198',
'198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,198',
'198,,198,198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198',
',,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,,198,198,199,199,199',
',199,,,,199,199,,,,199,,199,199,199,199,199,199,199,,,,,199,199,199',
'199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199,199',
'199,,199,199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199',
',,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199,,,,199,199,919,919,919',
',919,,,,919,919,,,,919,,919,919,919,919,919,919,919,,,,,919,919,919',
'919,919,919,919,,,,,,,,,,919,,,919,919,919,919,919,919,919,919,919,919',
',919,919,,,,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,,,,,,,',
',,,,,,,,,,,919,919,919,919,919,919,,,,919,919,842,842,842,,842,,,,842',
'842,,,,842,,842,842,842,842,842,842,842,,,,,842,842,842,842,842,842',
'842,,,,,,,,,,842,,,842,842,842,842,842,842,842,842,842,842,,842,842',
',842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,842,,,,842',
',,,,,,,842,,,,,842,842,842,842,842,842,,,,842,842,210,210,210,,210,',
',,210,210,,,,210,,210,210,210,210,210,210,210,,,,,210,210,210,210,210',
'210,210,,,,,,,,,,210,,,210,210,210,210,210,210,210,210,210,210,,210',
'210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210',
',,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,211,211,211,,211,',
',,211,211,,,,211,,211,211,211,211,211,211,211,,,,,211,211,211,211,211',
'211,211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211,,211',
'211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211',
',,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,212,212,212,,212,',
',,212,212,,,,212,,212,212,212,212,212,212,212,,,,,212,212,212,212,212',
'212,212,,,,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,,212',
'212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,,,,,212',
',,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,213,213,213,,213,',
',,213,213,,,,213,,213,213,213,213,213,213,213,,,,,213,213,213,213,213',
'213,213,,,,,,,,,,213,,,213,213,213,213,213,213,213,213,213,213,,213',
'213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213',
',,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,214,214,214,,214,',
',,214,214,,,,214,,214,214,214,214,214,214,214,,,,,214,214,214,214,214',
'214,214,,,,,,,,,,214,,,214,214,214,214,214,214,214,214,214,214,,214',
'214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214',
',,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,215,215,215,,215,',
',,215,215,,,,215,,215,215,215,215,215,215,215,,,,,215,215,215,215,215',
'215,215,,,,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,,215',
'215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215',
',,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215,216,216,216,,216,',
',,216,216,,,,216,,216,216,216,216,216,216,216,,,,,216,216,216,216,216',
'216,216,,,,,,,,,,216,,,216,216,216,216,216,216,216,216,216,216,,216',
'216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216',
',,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,217,217,217,,217,',
',,217,217,,,,217,,217,217,217,217,217,217,217,,,,,217,217,217,217,217',
'217,217,,,,,,,,,,217,,,217,217,217,217,217,217,217,217,217,217,,217',
'217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217',
',,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,218,218,218,,218,',
',,218,218,,,,218,,218,218,218,218,218,218,218,,,,,218,218,218,218,218',
'218,218,,,,,,,,,,218,,,218,218,218,218,218,218,218,218,218,218,,218',
'218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218',
',,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,219,219,219,,219,',
',,219,219,,,,219,,219,219,219,219,219,219,219,,,,,219,219,219,219,219',
'219,219,,,,,,,,,,219,,,219,219,219,219,219,219,219,219,219,219,,219',
'219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219',
',,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,220,220,220,,220,',
',,220,220,,,,220,,220,220,220,220,220,220,220,,,,,220,220,220,220,220',
'220,220,,,,,,,,,,220,,,220,220,220,220,220,220,220,220,220,220,,220',
'220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220',
',,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,221,221,221,,221,',
',,221,221,,,,221,,221,221,221,221,221,221,221,,,,,221,221,221,221,221',
'221,221,,,,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221,,221',
'221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221',
',,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,222,222,222,,222,',
',,222,222,,,,222,,222,222,222,222,222,222,222,,,,,222,222,222,222,222',
'222,222,,,,,,,,,,222,,,222,222,222,222,222,222,222,222,222,222,,222',
'222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222',
',,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,223,223,223,,223,',
',,223,223,,,,223,,223,223,223,223,223,223,223,,,,,223,223,223,223,223',
'223,223,,,,,,,,,,223,,,223,223,223,223,223,223,223,223,223,223,,223',
'223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223',
',,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,224,224,224,,224,',
',,224,224,,,,224,,224,224,224,224,224,224,224,,,,,224,224,224,224,224',
'224,224,,,,,,,,,,224,,,224,224,224,224,224,224,224,224,224,224,,224',
'224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224',
',,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225,,225,',
',,225,225,,,,225,,225,225,225,225,225,225,225,,,,,225,225,225,225,225',
'225,225,,,,,,,,,,225,,,225,225,225,225,225,225,225,225,225,225,,225',
'225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225',
',,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,226,226,226,,226,',
',,226,226,,,,226,,226,226,226,226,226,226,226,,,,,226,226,226,226,226',
'226,226,,,,,,,,,,226,,,226,226,226,226,226,226,226,226,226,226,,226',
'226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226',
',,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227,,227,',
',,227,227,,,,227,,227,227,227,227,227,227,227,,,,,227,227,227,227,227',
'227,227,,,,,,,,,,227,,,227,227,227,227,227,227,227,227,227,227,,227',
'227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228,,228,',
',,228,228,,,,228,,228,228,228,228,228,228,228,,,,,228,228,228,228,228',
'228,228,,,,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228',
',,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229,,229,',
',,229,229,,,,229,,229,229,229,229,229,229,229,,,,,229,229,229,229,229',
'229,229,,,,,,,,,,229,,,229,229,229,229,229,229,229,229,229,229,,229',
'229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229',
',,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230,,230,',
',,230,230,,,,230,,230,230,230,230,230,230,230,,,,,230,230,230,230,230',
'230,230,,,,,,,,,,230,,,230,230,230,230,230,230,230,230,230,230,,230',
'230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230',
',,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231,,231,',
',,231,231,,,,231,,231,231,231,231,231,231,231,,,,,231,231,231,231,231',
'231,231,,,,,,,,,,231,,,231,231,231,231,231,231,231,231,231,231,,231',
'231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231',
',,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,232,232,232,,232,',
',,232,232,,,,232,,232,232,232,232,232,232,232,,,,,232,232,232,232,232',
'232,232,,,,,,,,,,232,,,232,232,232,232,232,232,232,232,232,232,,232',
'232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232',
',,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,233,233,233,,233,',
',,233,233,,,,233,,233,233,233,233,233,233,233,,,,,233,233,233,233,233',
'233,233,,,,,,,,,,233,,,233,233,233,233,233,233,233,233,233,233,,233',
'233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233',
',,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,234,234,234,,234,',
',,234,234,,,,234,,234,234,234,234,234,234,234,,,,,234,234,234,234,234',
'234,234,,,,,,,,,,234,,,234,234,234,234,234,234,234,234,234,234,,234',
'234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234',
',,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,235,235,235,,235,',
',,235,235,,,,235,,235,235,235,235,235,235,235,,,,,235,235,235,235,235',
'235,235,,,,,,,,,,235,,,235,235,235,235,235,235,235,235,235,235,,235',
'235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235',
',,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236,,236,',
',,236,236,,,,236,,236,236,236,236,236,236,236,,,,,236,236,236,236,236',
'236,236,,,,,,,,,,236,,,236,236,236,236,236,236,236,236,236,236,,236',
'236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236',
',,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,840,840,840,,840,',
',,840,840,,,,840,,840,840,840,840,840,840,840,,,,,840,840,840,840,840',
'840,840,,,,,,,,,,840,,,840,840,840,840,840,840,840,840,840,840,,840',
'840,,,,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840,,,840,,,,,,,,,,,,',
',,,,,,840,840,840,840,840,840,,,,840,840,244,244,244,,244,,,,244,244',
',,,244,,244,244,244,244,244,244,244,,,,,244,244,244,244,244,244,244',
',,,,,,,,,244,,,244,244,244,244,244,244,244,244,244,244,,244,244,,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',244,,,,,244,244,244,244,244,244,,,,244,244,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,246,246,246,246,246,246',
'246,,,,,,,,,,246,,,246,246,246,246,246,246,246,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,',
',,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,817,817,817,,817,,',
',817,817,,,,817,,817,817,817,817,817,817,817,,,,,817,817,817,817,817',
'817,817,,,,,,,,,,817,,,817,817,817,817,817,817,817,817,817,817,,817',
'817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,817,',
',,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,257,257,257',
'257,257,257,257,,,,,,,,,,257,,,257,257,257,257,257,257,257,257,257,257',
',257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,',
'257,,257,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,564',
'564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564,564,,,,,564',
'564,564,564,564,564,564,,,,,,,,,,564,,,564,564,564,564,564,564,564,564',
'564,564,,564,564,,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564',
',,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564,564,564,,,,564,564,566',
'566,566,,566,,,,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566',
'566,566,566,566,566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566',
'566,566,,566,566,,,,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566',
',566,,566,,,,,,,,,566,,,,,,566,566,566,566,566,566,,,,566,566,569,569',
'569,,569,,,,569,569,,,,569,,569,569,569,569,569,569,569,,,,,569,569',
'569,569,569,569,569,,,,,,,,,,569,,,569,569,569,569,569,569,569,569,569',
'569,,569,569,,569,569,569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569',
',,,,,569,,,,,,,,569,,,,,569,569,569,569,569,569,,,,569,569,573,573,573',
',573,,,,573,573,,,,573,,573,573,573,573,573,573,573,,,,,573,573,573',
'573,573,573,573,,,,,,,,,,573,,,573,573,573,573,573,573,573,573,573,573',
',573,573,,573,573,573,,,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573,',
',,,,573,,,,,,,,573,,,,,573,573,573,573,573,573,,,,573,573,587,587,587',
',587,,,,587,587,,,,587,,587,587,587,587,587,587,587,,,,,587,587,587',
'587,587,587,587,,,,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587',
',587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,',
',,,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,890,890,890',
',890,,,,890,890,,,,890,,890,890,890,890,890,890,890,,,,,890,890,890',
'890,890,890,890,,,,,,,,,,890,,,890,890,890,890,890,890,890,890,890,890',
',890,890,,890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890,890,,,890,',
',,,,890,,,,,,,,890,,,,,890,890,890,890,890,890,,,,890,890,886,886,886',
',886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,886,886,886',
'886,886,886,886,,,,,,,,,,886,,,886,886,886,886,886,886,886,886,886,886',
',886,886,,,,886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,,',
',,,,,,,,,,,886,886,886,886,886,886,,,,886,886,20,20,20,,20,,,,20,20',
',,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,',
',20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20',
',,20,,,20,20,,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20,,,,20,20,21',
'21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21,21,21',
'21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,',
',,,,,,,,,,,,,,,21,,,21,,,21,21,,,21,,,,,,21,,,,,,,,21,,,,,21,21,21,21',
'21,21,,,,21,21,25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,',
',25,25,25,25,25,25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25',
'25,,25,25,25,,,,,,,,,,,,,,,,,,,,25,,,25,,,25,25,,,25,,25,,25,,25,,,',
',,,,25,,,,,25,25,25,25,25,25,,,,25,25,26,26,26,,26,,,,26,26,,,,26,,26',
'26,26,26,26,26,26,,,,,26,26,26,26,26,26,26,,,,,,,,,,26,,,26,26,26,26',
'26,26,26,26,26,26,,26,26,,26,26,26,,,,,,,,,,,,,,,,,,,,26,,,26,,,26,26',
',,26,,26,,26,,26,,,,,,,,26,,,,,26,26,26,26,26,26,,,,26,26,27,27,27,',
'27,,,,27,27,,,,27,,27,27,27,27,27,27,27,,,,,27,27,27,27,27,27,27,,,',
',,,,,,27,,,27,27,27,27,27,27,27,27,27,27,,27,27,,27,27,27,,,,,,,,,,',
',,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27,27',
'27,27,,,,27,27,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,',
',30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,,30',
'30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,30,,30,30,,,30,,30,,30,,30,',
',,,,,,30,,,,,30,30,30,30,30,30,,,,30,30,31,31,31,,31,,,,31,31,,,,31',
',31,31,31,31,31,31,31,,,,,31,31,31,31,31,31,31,,,,,,,,,,31,,,31,31,31',
'31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,31',
',31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31,31,31,31,31,31,,,,31,31,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,34,34,34,34,34,34',
'34,,,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,,34,34,,,,34,,,,,,,,',
',,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,34,34,34,34,34,34',
',,,34,34,35,35,35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,35,35',
'35,35,35,35,35,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,,35,35,,',
',35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,,,,,,,,,,,,,,,,,35,35',
'35,35,35,35,,,,35,35,41,41,41,,41,,,,41,41,,,,41,,41,41,41,41,41,41',
'41,,,,,41,41,41,41,41,41,41,,,,,,,,,,41,,,41,41,41,41,41,41,41,41,41',
'41,,41,41,,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41',
',,,,,,,41,,,,,41,41,41,41,41,41,,,,41,41,42,42,42,,42,,,,42,42,,,,42',
',42,42,42,42,42,42,42,,,,,42,42,42,42,42,42,42,,,,,,,,,,42,,,42,42,42',
'42,42,42,42,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42',
'42,,,42,,,,,,42,,,,,,,,42,,,,,42,42,42,42,42,42,,,,42,42,43,43,43,,43',
',,,43,43,,,,43,,43,43,43,43,43,43,43,,,,,43,43,43,43,43,43,43,,,,,,',
',,,43,,,43,43,43,43,43,43,43,43,43,43,,43,43,,43,43,43,,,,,,,,,,,,,',
',,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,,43,43,43,43,43,43,',
',,43,43,922,922,922,,922,,,,922,922,,,,922,,922,922,922,922,922,922',
'922,,,,,922,922,922,922,922,922,922,,,,,,,,,,922,,,922,922,922,922,922',
'922,922,922,922,922,,922,922,,922,922,922,,,,,,,,,,,,,,,,,,,,922,,,922',
',,922,922,,,922,,,,,,922,,,,,,,,922,,,,,922,922,922,922,922,922,,,,922',
'922,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55',
'55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,,55,55,,55,55',
'55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55,,,,,,55,,,,,,,,55,,,,,55',
'55,55,55,55,55,,,,55,55,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56',
'56,56,,,,,56,56,56,56,56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56',
'56,56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,56,',
',,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56,56,57,57,57,,57,,,,57,57',
',,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57,57,57,,,,,,,,,,57,,,57',
'57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,,,,,,,,,,,,,,,,57,,',
'57,,,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57,,,,57,57,59',
'59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,59,59,59,59,59,59',
'59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,',
',,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,,59,,,,,,,,59,,,,,59,59,59',
'59,59,59,,,,59,59,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60',
',,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60',
'60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60',
',,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,64,64,64,,64,,,,64,64,,,,64',
',64,64,64,64,64,64,64,,,,,64,64,64,64,64,64,64,,,,,,,,,,64,,,64,64,64',
'64,64,64,64,64,64,64,,64,64,,,,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64',
',,64,,64,,,,,,,,,,,,,,,,,64,64,64,64,64,64,,,,64,64,866,866,866,,866',
',,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,866,866,866,866,866',
'866,866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866,866,866,,866',
'866,,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866',
',,,,,,,866,,,,,866,866,866,866,866,866,,,,866,866,855,855,855,,855,',
',,855,855,,,,855,,855,855,855,855,855,855,855,,,,,855,855,855,855,855',
'855,855,,,,,,,,,,855,,,855,855,855,855,855,855,855,855,855,855,,855',
'855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,855,',
'855,,855,,,,,,,,855,,,,,855,855,855,855,855,855,,,,855,855,85,85,85',
',85,,,,85,85,,,,85,,85,85,85,85,85,85,85,,85,,,85,85,85,85,85,85,85',
',,,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,85,,,,,,,',
',,,,,,,,,,,,85,,,85,85,,85,85,,,85,,85,,85,,85,,,,,,,,85,,85,,,85,85',
'85,85,85,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88,88,88,88,88,88',
'88,,88,,,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88,88,88',
'88,88,,88,88,,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,88,,,88,,88',
',88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,104,104,104,,104',
',,,104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104,104,104',
'104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104,104,,104',
'104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104,,,,,,104',
',,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105,,105,',
',,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105,105,,105',
'105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105,,,,,,105',
',,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,106,106,106,,106,',
',,106,106,,,,106,,106,106,106,106,106,106,106,,,,,106,106,106,106,106',
'106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,106,106,,106',
'106,,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106,,,,,,106',
',,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,107,107,107,,107,',
',,107,107,,,,107,,107,107,107,107,107,107,107,,,,,107,107,107,107,107',
'107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,107,107,,107',
'107,,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,,107,,,,,,107',
',,,,,,,107,,,,,107,107,107,107,107,107,,,,107,107,108,108,108,108,108',
',,,108,108,,,,108,,108,108,108,108,108,108,108,,,,,108,108,108,108,108',
'108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108',
',108,,,,108,,,,,,,,108,,,,,108,108,108,108,108,108,,,,108,108,852,852',
'852,,852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,852,852',
'852,852,852,852,852,,,,,,,,,,852,,,852,852,852,852,852,852,852,852,852',
'852,,852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852',
',852,,852,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,847',
'847,847,,847,,,,847,847,,,,847,,847,847,847,847,847,847,847,,,,,847',
'847,847,847,847,847,847,,,,,,,,,,847,,,847,847,847,847,847,847,847,847',
'847,847,,847,847,,,,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847,,,847',
',,,,,,,,,,,,,,,,,,847,847,847,847,847,847,,,,847,847,191,191,191,,191',
',,,191,191,,,,191,,191,191,191,191,191,191,191,,,,,191,191,191,191,191',
'191,191,,,,,,,,,,191,,,191,191,191,191,191,191,191,191,191,191,,191',
'191,,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191,,,191,191,,,191,,191,',
',,191,,,,,,,,191,,,,,191,191,191,191,191,191,,,,191,191,192,192,192',
',192,,,,192,192,,,,192,,192,192,192,192,192,192,192,,,,,192,192,192',
'192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192,192,192,192,192,192',
',192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192,,,192,192,,,192,',
'192,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192,192,193,193',
'193,,193,,,,193,193,,,,193,,193,193,193,193,193,193,193,,,,,193,193',
'193,193,193,193,193,,,,,,,,,,193,,,193,193,193,193,193,193,193,193,193',
'193,,193,193,,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193,,,193,193,,,193',
',,,,,193,,,,,,,,193,,,,,193,193,193,193,193,193,,,,193,193,194,194,194',
',194,,,,194,194,,,,194,,194,194,194,194,194,194,194,,,,,194,194,194',
'194,194,194,194,,,,,,,,,,194,,,194,194,194,194,194,194,194,194,194,194',
',194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,',
'194,,,,194,,,,,,,,194,,,,,194,194,194,194,194,194,,,,194,194,263,263',
'263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,263,263',
'263,263,263,263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263,263',
'263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263',
',263,,263,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,266',
'266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,266',
'266,266,266,266,266,266,,,,,,,,,,266,,,266,266,266,266,266,266,266,266',
'266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,266,266',
'266,,,266,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266',
'266,809,809,809,,809,,,,809,809,,,,809,,809,809,809,809,809,809,809',
',,,,809,809,809,809,809,809,809,,,,,,,,,,809,,,809,809,809,809,809,809',
'809,809,809,809,,809,809,,,,809,,,,,,,,,,,,,,,,,,,,809,,,809,,,809,809',
',,809,,,,,,,,,,,,,,,,,,,809,809,809,809,809,809,,,,809,809,798,798,798',
',798,,,,798,798,,,,798,,798,798,798,798,798,798,798,,,,,798,798,798',
'798,798,798,798,,,,,,,,,,798,,,798,798,798,798,798,798,798,798,798,798',
',798,798,,798,798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798,',
',,,,798,,,,,,,,798,,,,,798,798,798,798,798,798,,,,798,798,272,272,272',
',272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,272,272,272',
'272,272,272,272,,,,,,,,,,272,,,272,272,272,272,272,272,272,272,272,272',
',272,272,,,,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,,,,,',
',,,,,,,,,,,272,272,272,272,272,272,,,,272,272,911,911,911,,911,,,,911',
'911,,,,911,,911,911,911,911,911,911,911,,,,,911,911,911,911,911,911',
'911,,,,,,,,,,911,,,911,911,911,911,911,911,911,911,911,911,,911,911',
',911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,911,,911',
',911,,,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,796,796,796,',
'796,,,,796,796,,,,796,,796,796,796,796,796,796,796,,,,,796,796,796,796',
'796,796,796,,,,,,,,,,796,,,796,796,796,796,796,796,796,796,796,796,',
'796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,',
',,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796,796,8,8,8,8,8,',
',,8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,',
',,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,791,791,791,,791,,,,791,791,,,,791,,791',
'791,791,791,791,791,791,,,,,791,791,791,791,791,791,791,,,,,,,,,,791',
',,791,791,791,791,791,791,791,791,791,791,,791,791,,791,791,791,,,,',
',,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791',
'791,791,791,791,791,,,,791,791,780,780,780,,780,,,,780,780,,,,780,,780',
'780,780,780,780,780,780,,,,,780,780,780,780,780,780,780,,,,,,,,,,780',
',,780,780,780,780,780,780,780,780,780,780,,780,780,,,,780,,,,,,,,,,',
',,,,,,,,,780,,,780,,,780,780,,,780,,780,,780,,,,,,,,,,,,,,,780,780,780',
'780,780,780,,,,780,780,779,779,779,,779,,,,779,779,,,,779,,779,779,779',
'779,779,779,779,,,,,779,779,779,779,779,779,779,,,,,,,,,,779,,,779,779',
'779,779,779,779,779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,',
',,,,,779,,,779,,,779,779,,,779,,,,,,779,,,,,,,,779,,,,,779,779,779,779',
'779,779,,,,779,779,765,765,765,,765,,,,765,765,,,,765,,765,765,765,765',
'765,765,765,,,,,765,765,765,765,765,765,765,,,,,,,,,,765,,,765,765,765',
'765,765,765,765,765,765,765,,765,765,,765,765,765,,,,,,,,,,,,,,,,,,',
',765,,,765,,,765,765,,,765,,,,,,765,,,,,,,,765,,,,,765,765,765,765,765',
'765,,,,765,765,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9',
'9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9,,9,9,9,9,,9,9,',
',9,,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9,,,9,9,,,293,293',
'293,,293,,,9,293,293,,,,293,,293,293,293,293,293,293,293,,,,,293,293',
'293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293,293,293',
'293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,293,,293,293',
',,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293,752',
'752,752,,752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,752',
'752,752,752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752',
'752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752',
'752,,,752,,,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752',
'301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,',
'301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301,301',
'301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301',
'744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744,744,744,,,,',
'744,744,744,744,744,744,744,,,,,,,,,,744,,,744,744,744,744,744,744,744',
'744,744,744,,744,744,,744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744',
'744,,,744,,,,,,744,,,,,,,,744,,,,,744,744,744,744,744,744,,,,744,744',
'311,311,311,,311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,',
'311,311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311,311,311,311',
'311,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311,',
',311,311,,,311,,,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,,,,311',
'311,312,312,312,,312,,,,312,312,,,,312,,312,312,312,312,312,312,312',
',,,,312,312,312,312,312,312,312,,,312,,,,,,,312,,,312,312,312,312,312',
'312,312,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312',
',,312,312,,,312,,,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312',
'312,736,736,736,,736,,,,736,736,,,,736,,736,736,736,736,736,736,736',
',,,,736,736,736,736,736,736,736,,,736,,,,,,,736,,,736,736,736,736,736',
'736,736,736,736,736,,736,736,,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736',
',,736,736,,,736,,,,,,736,,,,,,,,736,,,,,736,736,736,736,736,736,,,,736',
'736,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,,,10,10,10,10,10,10,10,10,10,10,,,,,,10,10,10,10,10,10,10,10,',
',10,,,,,,,,10,10,,10,10,10,10,,10,10,,,10,,,,,10,10,10,10,,,,,,,,,,',
',,,10,10,,10,10,10,10,10,10,10,10,10,,10,,,10,10,,,323,323,323,,323',
',,10,323,323,,,,323,,323,323,323,323,323,323,323,,,,,323,323,323,323',
'323,323,323,,,,,,,,,,323,,,323,323,323,323,323,323,323,323,323,323,',
'323,323,,,,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,,,,,,',
',,,,,,,,,,323,323,323,323,323,323,,,,323,323,325,325,325,,325,,,,325',
'325,,,,325,,325,325,325,325,325,325,325,,,,,325,325,325,325,325,325',
'325,,,,,,,,,,325,,,325,325,325,325,325,325,325,325,325,325,,325,325',
',,,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325,,,,,,,,,,,,,,,,',
',,325,325,325,325,325,325,,,,325,325,711,711,711,,711,,,,711,711,,,',
'711,,711,711,711,711,711,711,711,,,,,711,711,711,711,711,711,711,,,',
',,,,,,711,,,711,711,711,711,711,711,711,711,711,711,,711,711,,711,711',
'711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,,711,,711,,711,,711,,,,',
',,,711,,,,,711,711,711,711,711,711,,,,711,711,709,709,709,,709,,,,709',
'709,,,,709,,709,709,709,709,709,709,709,,,,,709,709,709,709,709,709',
'709,,,,,,,,,,709,,,709,709,709,709,709,709,709,709,709,709,,709,709',
',709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,709,,709',
',709,,,,,,,,709,,,,,709,709,709,709,709,709,,,,709,709,706,706,706,',
'706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706,706,706,706',
'706,706,706,,,,,,,,,,706,,,706,706,706,706,706,706,706,706,706,706,',
'706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,706',
',706,,706,,,,,,,,706,,,,,706,706,706,706,706,706,,,,706,706,700,700',
'700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,700,700',
'700,700,700,700,700,,,,,,,,,,700,,,700,700,700,700,700,700,700,700,700',
'700,,700,700,,,,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700,,,',
',,,,,,,,,,,,,,,700,700,700,700,700,700,,,,700,700,694,694,694,,694,',
',,694,694,,,,694,,694,694,694,694,694,694,694,,,,,694,694,694,694,694',
'694,694,,,,,,,,,,694,,,694,694,694,694,694,694,694,694,694,694,,694',
'694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,,,,,694',
',,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694,693,693,693,,693,',
',,693,693,,,,693,,693,693,693,693,693,693,693,,,,,693,693,693,693,693',
'693,693,,,,,,,,,,693,,,693,693,693,693,693,693,693,693,693,693,,693',
'693,,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,693',
',,,,,,,693,,,,,693,693,693,693,693,693,,,,693,693,692,692,692,,692,',
',,692,692,,,,692,,692,692,692,692,692,692,692,,,,,692,692,692,692,692',
'692,692,,,,,,,,,,692,,,692,692,692,692,692,692,692,692,692,692,,692',
'692,,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,,,,,692',
',,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364',
'364,364,,,364,364,364,364,364,364,364,364,364,364,,,,,,364,364,364,364',
'364,364,364,364,,,364,,,,,,,,364,364,,364,364,364,364,,364,364,,,364',
',,,,364,364,364,364,,,,,,,,,,,,,,364,364,,364,364,364,364,364,364,364',
'364,364,,364,,,364,364,,,376,376,376,,376,,,364,376,376,,,,376,,376',
'376,376,376,376,376,376,,,,,376,376,376,376,376,376,376,,,,,,,,,,376',
',,376,376,376,376,376,376,376,376,376,376,,376,376,,376,376,376,,,,',
',,,,,,,,,,,,,,,376,,,376,,,376,376,,,376,,,,,,376,,,,,,,,376,,,,,376',
'376,376,376,376,376,,,,376,376,385,385,385,,385,,,,385,385,,,,385,,385',
'385,385,385,385,385,385,,,,,385,385,385,385,385,385,385,,,,,,,,,,385',
',,385,385,385,385,385,385,385,385,385,385,,385,385,,385,385,385,,,,',
',,,,,,,,,,,,,,,385,,,385,385,,385,385,,,385,,385,,385,,385,,,,,,,,385',
',,,,385,385,385,385,385,385,,,,385,385,682,682,682,,682,,,,682,682,',
',,682,,682,682,682,682,682,682,682,,,,,682,682,682,682,682,682,682,',
',,,,,,,,682,,,682,682,682,682,682,682,682,682,682,682,,682,682,,682',
'682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,,,,,682,,,,,,',
',682,,,,,682,682,682,682,682,682,,,,682,682,392,392,392,,392,,,,392',
'392,,,,392,,392,392,392,392,392,392,392,,,,,392,392,392,392,392,392',
'392,,,,,,,,,,392,,,392,392,392,392,392,392,392,392,392,392,,392,392',
',392,392,392,,,,,,,,,,,,,,,,,,,,392,,,392,392,,392,392,,,392,,392,,392',
',392,,,,,,,,392,,,,,392,392,392,392,392,392,,,,392,392,393,393,393,',
'393,,,,393,393,,,,393,,393,393,393,393,393,393,393,,,,,393,393,393,393',
'393,393,393,,,,,,,,,,393,,,393,393,393,393,393,393,393,393,393,393,',
'393,393,,393,393,393,,,,,,,,,,,,,,,,,,,,393,,,393,393,,393,393,,,393',
',393,,393,,393,,,,,,,,393,,,,,393,393,393,393,393,393,,,,393,393,400',
'400,400,,400,,,,400,400,,,,400,,400,400,400,400,400,400,400,,,,,400',
'400,400,400,400,400,400,,,,,,,,,,400,,,400,400,400,400,400,400,400,400',
'400,400,,400,400,,400,400,400,,,,,,,,,,,,,,,,,,,,400,,,400,,,400,400',
',,400,,400,,,,400,,,,,,,,400,,,,,400,400,400,400,400,400,,,,400,400',
'402,402,402,,402,,,,402,402,,,,402,,402,402,402,402,402,402,402,,,,',
'402,402,402,402,402,402,402,,,,,,,,,,402,,,402,402,402,402,402,402,402',
'402,402,402,,402,402,,402,402,402,,,,,,,,,,,,,,,,,,,,402,,,402,,,402',
'402,,,402,,,,,,402,,,,,,,,402,,,,,402,402,402,402,402,402,,,,402,402',
'403,403,403,,403,,,,403,403,,,,403,,403,403,403,403,403,403,403,,,,',
'403,403,403,403,403,403,403,,,,,,,,,,403,,,403,403,403,403,403,403,403',
'403,403,403,,403,403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403',
'403,,,403,,,,,,403,,,,,,,,403,,,,,403,403,403,403,403,403,,,,403,403',
'404,404,404,,404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,',
'404,404,404,404,404,404,404,,,,,,,,,,404,,,404,404,404,404,404,404,404',
'404,404,404,,404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404',
'404,,,404,,,,,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404,404',
'681,681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,',
'681,681,681,681,681,681,681,,,,,,,,,,681,,,681,681,681,681,681,681,681',
'681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681',
'681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681',
'433,433,433,,433,,,,433,433,,,,433,,433,433,433,433,433,433,433,,,,',
'433,433,433,433,433,433,433,,,,,,,,,,433,,,433,433,433,433,433,433,433',
'433,433,433,,433,433,,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433',
'433,,,433,,433,,433,,433,,,,,,,,433,,,,,433,433,433,433,433,433,,,,433',
'433,436,436,436,,436,,,,436,436,,,,436,,436,436,436,436,436,436,436',
',,,,436,436,436,436,436,436,436,,,,,,,,,,436,,,436,436,436,436,436,436',
'436,436,436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,',
',436,436,,,436,,436,,436,,436,,,,,,,,436,,,,,436,436,436,436,436,436',
',,,436,436,439,439,439,,439,,,,439,439,,,,439,,439,439,439,439,439,439',
'439,,,,,439,439,439,439,439,439,439,,,,,,,,,,439,,,439,439,439,439,439',
'439,439,439,439,439,,439,439,,439,439,439,,,,,,,,,,,,,,,,,,,,439,,,439',
',,439,439,,,439,,,,,,439,,,,,,,,439,,,,,439,439,439,439,439,439,,,,439',
'439,448,448,448,,448,,,,448,448,,,,448,,448,448,448,448,448,448,448',
',,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448,448,448,448,448',
'448,448,448,448,448,,448,448,,448,448,448,,,,,,,,,,,,,,,,,,,,448,,,448',
',,448,448,,,448,,448,,448,,448,,,,,,,,448,,,,,448,448,448,448,448,448',
',,,448,448,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642',
'642,,,,,642,642,642,642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642',
'642,642,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642',
',,642,642,,,642,,642,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,',
',,642,642,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637',
'637,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637',
'637,637,637,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637',
',,637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637',
',,,637,637,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465',
'465,,,,,465,465,465,465,465,465,465,,,,,,,,,,465,,,465,465,465,465,465',
'465,465,465,465,465,,465,465,,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465',
',,465,465,,,465,,465,,,,465,,,,,,,,465,,,,,465,465,465,465,465,465,',
',,465,465,906,906,906,,906,,,,906,906,,,,906,,906,906,906,906,906,906',
'906,,,,,906,906,906,906,906,906,906,,,,,,,,,,906,,,906,906,906,906,906',
'906,906,906,906,906,,906,906,,,,906,,,,,,,,,,,,,,,,,,,,906,,,906,,,906',
'906,,,906,,,,,,,,,,,,,,,,,,,906,906,906,906,906,906,,,,906,906,472,472',
'472,,472,,,,472,472,,,,472,,472,472,472,472,472,472,472,,,,,472,472',
'472,472,472,472,472,,,,,,,,,,472,,,472,472,472,472,472,472,472,472,472',
'472,,472,472,,472,472,472,,,,,,,,,,,,,,,,,,,,472,,,472,,,472,472,,,472',
',,,,,472,,,,,,,,472,,,,,472,472,472,472,472,472,,,,472,472,473,473,473',
',473,,,,473,473,,,,473,,473,473,473,473,473,473,473,,,,,473,473,473',
'473,473,473,473,,,,,,,,,,473,,,473,473,473,473,473,473,473,473,473,473',
',473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,',
',,,,473,,,,,,,,473,,,,,473,473,473,473,473,473,,,,473,473,474,474,474',
',474,,,,474,474,,,,474,,474,474,474,474,474,474,474,,,,,474,474,474',
'474,474,474,474,,,,,,,,,,474,,,474,474,474,474,474,474,474,474,474,474',
',474,474,,474,474,474,,,,,,,,,,,,,,,,,,,,474,,,474,,,474,474,,,474,',
',,,,474,,,,,,,,474,,,,,474,474,474,474,474,474,,,,474,474,478,478,478',
',478,,,,478,478,,,,478,,478,478,478,478,478,478,478,,,,,478,478,478',
'478,478,478,478,,,478,,,,,,,478,,,478,478,478,478,478,478,478,478,478',
'478,,478,478,,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478',
',,,,,478,,,,,,,,478,,,,,478,478,478,478,478,478,,,,478,478,631,631,631',
',631,,,,631,631,,,,631,,631,631,631,631,631,631,631,,,,,631,631,631',
'631,631,631,631,,,,,,,,,,631,,,631,631,631,631,631,631,631,631,631,631',
',631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,',
'631,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631,484,484',
'484,,484,,,,484,484,,,,484,,484,484,484,484,484,484,484,,,,,484,484',
'484,484,484,484,484,,,,,,,,,,484,,,484,484,484,484,484,484,484,484,484',
'484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484,,,484',
',484,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484,484,487,487',
'487,,487,,,,487,487,,,,487,,487,487,487,487,487,487,487,,,,,487,487',
'487,487,487,487,487,,,,,,,,,,487,,,487,487,487,487,487,487,487,487,487',
'487,,487,487,,487,487,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,,487',
',,,,,487,,,,,,,,487,,,,,487,487,487,487,487,487,,,,487,487,490,490,490',
',490,,,,490,490,,,,490,,490,490,490,490,490,490,490,,,,,490,490,490',
'490,490,490,490,,,,,,,,,,490,,,490,490,490,490,490,490,490,490,490,490',
',490,490,,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,,,490,490,,,490,',
',,,,490,,,,,,,,490,,,,,490,490,490,490,490,490,,,,490,490,617,617,617',
',617,,,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,617,617,617',
'617,617,617,617,,,,,,,,,,617,,,617,617,617,617,617,617,617,617,617,617',
',617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,',
',,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,614,614,614',
',614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,614,614,614',
'614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614,614,614,614,614',
',614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614,',
'614,,,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614,614,505,505',
'505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,505,505',
'505,505,505,505,505,,,,,,,,,,505,,,505,505,505,505,505,505,505,505,505',
'505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505',
',505,,,,505,,,,,,,,505,,,,,505,505,505,505,505,505,,,,505,505,893,893',
'893,,893,,,,893,893,,,,893,,893,893,893,893,893,893,893,,,,,893,893',
'893,893,893,893,893,,,,,,,,,,893,,,893,893,893,893,893,893,893,893,893',
'893,,893,893,,893,893,893,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,893,,,893',
',,,,,893,,,,,,,,893,,,,,893,893,893,893,893,893,,,,893,893,517,517,517',
',517,,,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,517,517,517',
'517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517',
'517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517',
',,,,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517,523,523,523',
',523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,,523,523,523',
'523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,523',
'523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523',
',,,,,523,,,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,541,541,541',
'541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541',
'541,541,541,541,,,541,541,541,541,541,541,541,541,541,541,,,,,,541,541',
'541,541,541,541,541,541,,,541,,,,,,,,541,541,,541,541,541,541,,541,541',
',,541,,,,,541,541,541,541,,,,,,,,,,,,,,541,541,,541,541,541,541,541',
'541,541,541,541,,541,,,541,541,,,544,544,544,,544,,,541,544,544,,,,544',
',544,544,544,544,544,544,544,,,,,544,544,544,544,544,544,544,,,,,,,',
',,544,,,544,544,544,544,544,544,544,544,544,544,,544,544,,544,544,544',
',,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,',
',544,544,544,544,544,544,,,,544,544,545,545,545,,545,,,,545,545,,,,545',
',545,545,545,545,545,545,545,,,,,545,545,545,545,545,545,545,,,,,,,',
',,545,,,545,545,545,545,545,545,545,545,545,545,,545,545,,545,545,545',
',,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,545,,,,545,,,,,,,,545',
',,,,545,545,545,545,545,545,,,,545,545,548,548,548,,548,,,,548,548,',
',,548,,548,548,548,548,548,548,548,,,,,548,548,548,548,548,548,548,',
',,,,,,,,548,,,548,548,548,548,548,548,548,548,548,548,,548,548,,548',
'548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,',
',548,,,,,548,548,548,548,548,548,,,,548,548,549,549,549,,549,,,,549',
'549,,,,549,,549,549,549,549,549,549,549,,,,,549,549,549,549,549,549',
'549,,,,,,,,,,549,,,549,549,549,549,549,549,549,549,549,549,,549,549',
',549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,549,',
',,,,,,549,,,,,549,549,549,549,549,549,,,,549,549,554,554,554,,554,,',
',554,554,,,,554,,554,554,554,554,554,554,554,,,,,554,554,554,554,554',
'554,554,,,,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554,,554',
'554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,,,,,,554',
',,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,557,557,557,,557,',
',,557,557,,,,557,,557,557,557,557,557,557,557,,,,,557,557,557,557,557',
'557,557,,,,,,,,,,557,,,557,557,557,557,557,557,557,557,557,557,,557',
'557,,557,557,557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557,,,,,,557',
',,,,,,,557,,,,,557,557,557,557,557,557,,,,557,557,598,598,598,,598,',
',,598,598,,,,598,,598,598,598,598,598,598,598,,,,,598,598,598,598,598',
'598,598,,,,,,,,,,598,,,598,598,598,598,598,598,598,598,598,598,,598',
'598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,598,',
'598,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,,,67',
'67,67,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,67,67,67,67,67',
',,,,,,67,67,,67,67,67,67,,67,67,,,67,,,,,67,67,67,67,,,,,,67,,,,,,,',
'67,67,,67,67,67,67,67,67,67,67,67,,67,,,67,670,670,670,670,670,670,670',
'670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670',
',,670,670,670,670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670',
'670,670,,,670,,,,,,,,670,670,,670,670,670,670,,670,670,,,670,,,,,670',
'670,670,670,,,,,,,,,,,,,,670,670,,670,670,670,670,670,670,670,670,670',
',670,,,670,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,,,81,81,81,81,81,81,81,81,81,81,,,,,,81,81,81,81,81,81',
'81,81,81,81,81,81,,,,,,,81,81,,81,81,81,81,,81,81,,,81,,,,,81,81,81',
'81,,,,,,,,,373,,,,,81,81,,81,81,81,81,81,81,81,81,81,,81,,,81,373,373',
'373,373,373,373,373,373,373,373,373,,373,373,,,373,373,,,,,,,,,,,,,',
',373,,373,,373,373,373,373,373,373,373,,373,,,,,,,467,467,,,467,,,,',
'373,,373,467,467,,467,467,467,467,,467,467,,,467,,,,,467,467,467,467',
',,,,,,,,,,,,,467,467,,467,467,467,467,467,467,467,467,467,,467,399,399',
'467,,399,,,,,,,,399,399,,399,399,399,399,,399,399,,,399,,,,,399,399',
'399,399,,,,,,,,,,,,,,399,399,,399,399,399,399,399,399,399,399,399,,399',
'398,398,399,,398,,,,,,,,398,398,,398,398,398,398,,398,398,,,398,,,,',
'398,398,398,398,,,,,,,,,,,,,,398,398,,398,398,398,398,398,398,398,398',
'398,,398,506,506,398,,506,,,,,,,,506,506,,506,506,506,506,,506,506,',
',506,,,,,506,506,506,506,,,,,,,,,,,,,,506,506,,506,506,506,506,506,506',
'506,506,506,,506,507,507,506,,507,,,,,,,,507,507,,507,507,507,507,,507',
'507,,,507,,,,,507,507,507,507,,,,,,,,,,,,,,507,507,,507,507,507,507',
'507,507,507,507,507,,507,596,596,507,,596,,,,,,,,596,596,,596,596,596',
'596,,596,596,,,596,,,,,596,596,596,596,,,,,,,,,,,,,,596,596,,596,596',
'596,596,596,596,596,596,596,,596,,,596,584,584,584,584,584,584,584,584',
'584,584,584,,584,584,,,584,584,,,,584,,,,,,,,,,,584,,584,,584,584,584',
'584,584,584,584,,584,,,,,,,466,466,,,466,,,,,584,,584,466,466,,466,466',
'466,466,,466,466,,,466,,,,,466,466,466,466,,,,,,,,,,,,,,466,466,,466',
'466,466,466,466,466,466,466,466,,466,597,597,466,,597,,,,,,,,597,597',
',597,597,597,597,,597,597,,,597,,,,,597,597,597,597,,,,,,,,,,,,,,597',
'597,,597,597,597,597,597,597,597,597,597,,597,475,475,597,,475,,,,,',
',,475,475,,475,475,475,475,,475,475,,,475,,,,,475,475,475,475,,,,,,',
',,,,,,,475,475,,475,475,475,475,475,475,475,475,475,,475,195,195,475',
',195,,,,,,,,195,195,,195,195,195,195,,195,195,,,195,,,,,195,195,195',
'195,,,,,,,,,,,,,,195,195,,195,195,195,195,195,195,195,195,195,,195,476',
'476,195,,476,,,,,,,,476,476,,476,476,476,476,,476,476,,,476,,,,,476',
'476,476,476,,,,,,,,,,,,,,476,476,,476,476,476,476,476,476,476,476,476',
',476,,,476,849,849,849,849,849,849,849,849,849,849,849,,849,849,,,849',
'849,,,,,,,,,,,,,,,849,,849,,849,849,849,849,849,849,849,,849,,,,,,,844',
'844,,,844,,,,,849,,849,844,844,,844,844,844,844,,844,844,,,844,,,,,844',
'844,844,844,,,,,,,,,,,,,,844,844,,844,844,844,844,844,844,844,844,844',
',844,643,643,844,,643,,,,,,,,643,643,,643,643,643,643,,643,643,,,643',
',,,,643,643,643,643,,,,,,,,,,,,,,643,643,,643,643,643,643,643,643,643',
'643,643,,643,843,843,643,,843,,,,,,,,843,843,,843,843,843,843,,843,843',
',,843,,,,,843,843,843,843,,,,,,,,,,,,,,843,843,,843,843,843,843,843',
'843,843,843,843,,843,255,255,843,,255,,,,,,,,255,255,,255,255,255,255',
',255,255,,,255,,,,,255,255,255,255,,,,,,,,,,,,,,255,255,,255,255,255',
'255,255,255,255,255,255,,255,641,641,255,,641,,,,,,,,641,641,,641,641',
'641,641,,641,641,,,641,,,,,641,641,641,641,,,,,,,,,,,,,,641,641,,641',
'641,641,641,641,641,641,641,641,,641,254,254,641,,254,,,,,,,,254,254',
',254,254,254,254,,254,254,,,254,,,,,254,254,254,254,,,,,,,,,,,,,,254',
'254,,254,254,254,254,254,254,254,254,254,,254,,,254,691,691,691,691',
'691,691,691,691,691,691,691,,691,691,,,691,691,,,,,,,,,,,,,,,691,,691',
',691,691,691,691,691,691,691,,691,689,689,689,689,689,689,689,689,689',
'689,689,,689,689,,691,689,689,,,,,,,,,,,,,,,689,,689,,689,689,689,689',
'689,689,689,,689,686,686,686,686,686,686,686,686,686,686,686,,686,686',
',689,686,686,,,,,,,,,,,,,,,686,,686,,686,686,686,686,686,686,686,,686',
'381,381,381,381,381,381,381,381,381,381,381,,381,381,,686,381,381,,',
',,,,,,,,,,,,381,,381,,381,381,381,381,381,381,381,,381,684,684,684,684',
'684,684,684,684,684,684,684,,684,684,,381,684,684,,,,,,,,,,,,,,,684',
',684,,684,684,684,684,684,684,684,,684,395,395,395,395,395,395,395,395',
'395,395,395,,395,395,,684,395,395,,,,,,,,,,,,,,,395,,395,,395,395,395',
'395,395,395,395,,395,679,679,679,679,679,679,679,679,679,679,679,,679',
'679,,395,679,679,,,,,,,,,,,,,,,679,,679,,679,679,679,679,679,679,679',
',679,22,22,22,22,22,22,22,22,22,22,22,,22,22,,679,22,22,,,,,,,,,,,,',
',,22,,22,,22,22,22,22,22,22,22,,22,240,240,240,240,240,240,240,240,240',
'240,240,,240,240,,22,240,240,,,,,,,,,,,,,,,240,,240,,240,240,240,240',
'240,240,240,,240,778,778,778,778,778,778,778,778,778,778,778,,778,778',
',240,778,778,,,,,,,,,,,,,,,778,,778,,778,778,778,778,778,778,778,,778',
'609,609,609,609,609,609,609,609,609,609,609,,609,609,,778,609,609,,',
',,,,,,,,,,,,609,,609,,609,609,609,609,609,609,609,,609,733,733,733,733',
'733,733,733,733,733,733,733,,733,733,,609,733,733,,,,,,,,,,,,,,,733',
',733,,733,733,733,733,733,733,733,,733,477,477,477,477,477,477,477,477',
'477,477,477,,477,477,733,733,477,477,,,,,,,,,,,,,,,477,,477,,477,477',
'477,477,477,477,477,,477,696,696,696,696,696,696,696,696,696,696,696',
',696,696,,477,696,696,,,,,,,,,,,,,,,696,,696,,696,696,696,696,696,696',
'696,,696,488,488,488,488,488,488,488,488,488,488,488,,488,488,,696,488',
'488,,,,,,,,,,,,,,,488,,488,,488,488,488,488,488,488,488,,488,,,,,,,',
',,,,,,,488,488' ]
        racc_action_check = arr = ::Array.new(25020, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   717,  2623,   908,   nil,  -100,   nil,   790, 15103, 15708,
 16668,   nil,   415,   789,   780,   825,   376,   130,   598,   nil,
 10142, 10263, 24580,   874,   nil, 10384, 10505, 10626,   493,     6,
 10747, 10868,   nil,  3721, 10989, 11110,   nil,   758,   170,   829,
   584, 11231, 11352, 11473,   752,   432,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   315,   nil, 11715, 11836, 11957,   -15, 12078,
 12199,   nil,   nil,   911, 12320,   787,   nil, 22815,   nil,   nil,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,   739,
   720, 23035,   nil,   nil,   nil, 12683,   nil,   nil, 12804,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   790,   nil,   nil,   nil, 12925, 13046, 13167, 13288, 13409,   625,
   nil,   432,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   691,   nil,   706,
  1647, 13772, 13893, 14014, 14135, 23743,   672,  4818,  4939,  5060,
   nil,   452,   -21,   761,   -80,   676,   720,  3477,   nil,   nil,
  5423,  5544,  5665,  5786,  5907,  6028,  6149,  6270,  6391,  6512,
  6633,  6754,  6875,  6996,  7117,  7238,  7359,  7480,  7601,  7722,
  7843,  7964,  8085,  8206,  8327,  8448,  8569,   nil,   nil,   nil,
 24625,   nil,   677,   665,  8811,   nil,  8932,   694,   nil,   nil,
   nil,   nil,   nil,   nil, 24217, 24097,   675,  9174,   nil,   673,
   nil,   nil,   nil, 14256,   nil,   nil, 14377,   670,  2989,   669,
   658,   594, 14740,  2379,   469,   -45,   651,   470,   616,   549,
    26,   nil,   584,   579,   nil,   nil,   154,   597,   595,   471,
   nil,   591,   nil, 15821,   nil,  3233,   554,   nil,   508,   235,
   343, 16063,   509,   301,   469,   nil,    89,   nil,   149,    31,
    21, 16305, 16426,   393,   158,   408,   -13,   548,   459,    21,
   458,   nil,   nil, 16781,   nil, 16902,   -23,   347,   372,   319,
   523,   465,   427,   355,   nil,   237,   nil,   nil,   nil,   nil,
   125,   nil,   -33,   nil,   179,   251,   215,   nil,   229,   -28,
   nil,   100,   nil,   nil,   nil,   nil,   nil,  1031,   nil,   nil,
   nil,   nil,   nil,   nil, 17870,   nil,   nil,   nil,   nil,  2257,
   216,   nil,   nil, 23083,   nil,   184, 17983,   nil,   178,   nil,
   nil, 24400,   148,   187,   246, 18104,   nil,   nil,   125,   137,
     0,   nil, 18346, 18467,   nil, 24490,   nil,   nil, 23269, 23209,
 18588,   102, 18709, 18830, 18951,  2867,  2745,   -52,    87,   139,
    -3,    -9,   -38,  3111,  2989,   627,   790,  2623,  2501,  2379,
  2257,  2135,  2013,  1891,  1769,  1647,   417,   244,  1525,  1403,
  1155,   233,   nil, 19193,   nil,   nil, 19314,   949,   nil, 19435,
   674,   nil,   nil,   250,   nil,   nil,   nil,   nil, 19556,   nil,
   271,   287,   960,   924,    87,   920,  1016,   954,   nil,   953,
   904,   nil,   nil,   nil,   941, 19919, 23563, 23149,   553,   935,
   nil,   nil, 20161, 20282, 20403, 23683, 23803, 24805, 20524,  1014,
  1011,   883,   nil,   nil, 20766,   nil,   nil, 20887, 24895,   nil,
 21008,   nil,   nil,   nil,  3599,   987,   nil,   nil,  1769,    30,
    53,   980,   984,  4575,   nil, 21371, 23329, 23389,    -7,   nil,
   192,   186,   321,   nil,   566,   nil,    14, 21613,   nil,  1332,
   nil,   nil,   nil, 21734,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   151,   nil,   nil,   nil,   841,   nil,
   nil, 21855,   846,   nil, 21968, 22089,   nil,   181, 22210, 22331,
   860,   nil,   nil,   nil, 22452,   858,   nil, 22573,   -31,   163,
   563,   442,   858,   911,  9295,   nil,  9416,   nil,   nil,  9537,
   823,   nil,   862,  9658,   nil,   851,   nil,   830,   nil,   nil,
   nil,   nil,   nil,   169, 23497,   -64,   809,  9779,   nil,   849,
   nil,   nil,   nil,   nil,   850,   858, 23449, 23623, 22694,   nil,
   -66,   nil,   859,     1,   116,   870,   424,   614,   899, 24715,
   925,   926,   -30,   981, 21250,   nil,   910, 21129,   nil,   nil,
   471,   nil,   988,   nil,   nil,   nil,   nil,   nil,   994,   nil,
   996, 20645,   916,    -5,     3,    10,    -4, 19798,   nil,   620,
   nil, 24157, 19677, 23977,   nil,   nil,   nil,   327,   246,  4087,
  4697,   382,   276,   924,   932,   933,   nil,   nil,   nil,   nil,
   nil,   930,   nil,   nil,   nil,   nil,  1012,   nil,   nil,  1025,
 22925,   -33,   548,  2501,   nil,   nil,   nil,   nil,   nil, 24535,
    26, 19072, 18225,   nil, 24445,   nil, 24355,   nil,   nil, 24310,
   nil, 24265, 17749, 17628, 17507,   222, 24850,   nil,   276,  1034,
 17386,   nil,   302,  4209,   286,   nil, 17265,   316,   nil, 17144,
   nil, 17023,   330,   nil,   380,  1281,  1525,   nil,   nil,   421,
   423,   -28,   495,   644,   nil,   522,   nil,  1891,   412,   457,
   nil,   nil,   nil, 24760,   539,   nil, 16547,   541,  2013,  3111,
   nil,   nil,   451,   -11, 16184,    -6,    52,   227,   672,   nil,
   537,  3355, 15942,   nil,   -12,   631,   636,   528,   nil,  1047,
   nil,   271,   nil,   nil,   490, 15587,   nil,   nil,   nil,   580,
   nil,   nil,   nil,   nil,   nil,   559,   nil,   nil, 24670, 15466,
 15345,   649,   673,   639,   707,   571,   601,   nil,   nil,   690,
   nil, 15224,   nil,  2135,   580,   nil, 14982,   592, 14619,   nil,
   nil,   622,   734,   656,   nil,  2867,   nil,   nil,    20, 14498,
   nil,   nil,   nil,    45,   nil,   756,   757,  9053,  2745,   nil,
   nil,   nil,   772,   448,   nil,   nil,   nil,   697,   660,   661,
   nil,   nil,   662,   660,   nil,   nil,  1084,   nil,   nil,   nil,
  8690,  1155,  5302, 24037, 23917,   786,   719, 13651,   nil, 23851,
   715,   nil, 13530,   700,   nil, 12562,   724,   nil,   nil,   nil,
   nil,  3965,   nil,  3843,   nil,   nil, 12441,   412,  1403,   nil,
   nil,  4453,   nil,   267,   nil,   nil,   nil,  4331,   nil,   761,
   802,   808,   212,   545,   323,   787, 10021,   nil,   nil,   nil,
  9900,   790,   nil, 21492,   nil,   913,   595,   nil,   nil,   nil,
   nil,   914,   915,   799,   962,   934, 20040,   790,   nil,   547,
   nil, 14861,   568,   nil,   nil,   nil,   nil,   nil,   nil,  5181,
   nil,   nil, 11594,   nil,   nil,   480,   nil ]

racc_action_default = [
    -1,  -520,  -519,  -520,    -2,  -508,    -5,    -6,  -520,  -520,
  -520,   -20,  -520,  -520,  -520,  -520,  -520,  -274,   -34,   -35,
  -520,  -520,   -40,   -42,   -43,  -286,  -323,  -324,   -47,  -252,
  -371,  -289,   -61,  -519,   -65,   -70,   -71,  -520,  -449,  -520,
  -520,  -520,  -520,  -520,  -510,  -217,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -498,  -276,  -520,  -519,  -519,  -292,  -520,
  -520,  -296,  -299,  -508,  -520,  -308,  -315,  -520,  -325,  -326,
  -394,  -395,  -396,  -397,  -398,  -519,  -401,  -519,  -519,  -519,
  -519,  -519,  -428,  -434,  -435,  -438,  -439,  -440,  -441,  -442,
  -443,  -444,  -445,  -446,  -447,  -448,  -451,  -452,   927,    -4,
  -509,  -515,  -516,  -517,  -520,  -520,  -520,  -520,  -520,    -8,
    -9,  -520,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,   -14,  -105,  -520,
  -519,  -520,  -520,  -520,  -519,  -520,  -520,  -520,  -520,  -520,
   -38,  -520,  -449,  -520,  -274,  -520,  -520,  -519,   -39,  -209,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -359,  -362,   -44,
  -218,  -231,  -519,  -519,  -520,  -239,  -520,  -262,  -286,  -323,
  -324,  -493,   -45,   -46,  -520,  -520,   -53,  -520,  -291,  -520,
  -372,  -375,   -59,  -519,  -370,   -60,  -520,   -61,  -519,  -520,
  -520,   -66,   -68,  -519,   -75,  -520,  -520,   -82,  -289,  -510,
  -365,  -327,  -371,  -520,   -69,   -73,  -282,  -436,  -437,  -520,
  -194,  -195,  -210,  -520,  -511,  -519,  -278,  -219,  -510,  -512,
  -512,  -520,  -520,  -512,  -520,  -490,  -512,  -293,   -41,  -520,
  -520,  -520,  -520,  -508,  -520,  -509,  -449,  -520,  -520,  -274,
  -520,  -339,  -340,  -520,  -311,  -520,   -96,   -97,  -134,  -135,
  -151,  -156,  -163,  -166,  -318,  -520,  -449,  -487,  -488,  -399,
  -520,  -414,  -520,  -416,  -520,  -520,  -520,  -406,  -520,  -520,
  -412,  -520,  -427,  -429,  -430,  -431,  -432,    -7,  -518,   -15,
   -16,   -17,   -18,   -19,  -520,   -11,   -12,   -13,  -106,  -519,
  -520,   -23,   -31,  -174,  -262,  -520,  -520,   -24,   -32,   -33,
   -25,  -176,  -520,  -499,  -500,  -519,  -501,  -502,  -499,  -252,
  -500,  -369,  -504,  -505,   -30,  -183,   -36,   -37,  -520,  -520,
  -519,  -282,  -520,  -520,  -520,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -196,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,  -208,  -211,  -212,  -213,  -214,
  -520,  -519,  -232,  -520,  -261,  -234,  -520,  -519,  -259,  -520,
  -252,  -499,  -500,  -252,   -50,   -54,  -253,  -254,  -255,  -366,
  -519,  -519,  -520,  -510,  -510,  -519,  -231,  -520,  -288,  -520,
   -62,  -280,   -74,   -67,  -520,  -519,  -520,  -520,   -81,  -520,
  -436,  -437,  -520,  -520,  -520,  -520,  -520,  -215,  -520,  -386,
  -520,  -510,  -220,  -221,  -514,  -513,  -223,  -514,  -510,  -284,
  -514,  -492,  -285,  -491,  -519,  -328,  -329,  -330,  -519,  -520,
  -520,  -520,  -520,  -519,  -378,  -519,  -520,  -520,  -282,  -305,
   -91,   -92,  -520,   -94,  -520,  -274,  -520,  -520,  -316,  -467,
  -320,  -506,  -507,  -520,  -400,  -415,  -418,  -419,  -421,  -402,
  -417,  -403,  -404,  -405,  -520,  -408,  -410,  -411,  -520,  -433,
   -10,  -520,  -520,   -22,  -520,  -520,  -266,  -283,  -520,  -520,
   -55,  -229,  -230,  -367,  -520,   -57,  -368,  -520,  -499,  -500,
  -503,  -281,  -520,  -174,  -520,  -355,  -520,  -357,  -360,  -520,
  -519,  -260,  -263,  -520,  -494,  -520,  -238,  -520,  -495,   -48,
  -363,   -49,  -364,  -519,   -40,  -520,  -519,  -520,  -251,  -520,
  -257,  -373,  -376,  -225,  -520,  -520,  -520,  -520,  -520,  -287,
   -62,   -72,  -520,  -499,  -500,  -519,   -78,   -80,  -520,  -182,
  -192,  -193,  -520,  -519,  -519,  -277,  -520,  -520,  -263,  -224,
  -519,  -331,  -519,  -297,  -332,  -333,  -334,  -300,  -520,  -303,
  -520,  -520,  -520,  -499,  -500,  -503,  -281,  -520,   -91,   -92,
   -93,  -520,  -519,  -520,  -309,  -453,  -454,  -520,  -312,  -519,
  -519,  -467,  -520,  -486,  -486,  -486,  -466,  -468,  -469,  -470,
  -471,  -472,  -473,  -476,  -478,  -479,  -481,  -482,  -483,  -520,
  -520,  -510,  -520,  -519,  -407,  -409,  -413,  -107,   -21,  -175,
  -264,  -520,  -520,   -27,  -178,   -28,  -179,   -56,   -29,  -180,
   -58,  -181,  -520,  -520,  -520,  -283,  -216,  -341,  -343,  -353,
  -520,  -356,  -520,  -519,  -519,  -236,  -520,  -519,   -51,  -520,
  -244,  -520,  -519,  -256,  -520,  -519,  -519,  -226,  -227,  -519,
  -519,  -510,  -520,   -76,  -290,  -519,  -337,  -519,  -387,  -519,
  -388,  -389,  -279,  -510,  -520,  -335,  -520,  -520,  -519,  -519,
  -302,  -304,  -380,  -520,  -520,  -283,  -520,   -91,   -92,   -95,
  -520,  -519,  -520,  -456,  -520,  -520,  -520,  -510,  -458,  -520,
  -462,  -520,  -464,  -465,  -520,  -520,  -480,  -484,  -321,  -520,
  -420,  -423,  -424,  -425,  -426,  -520,  -265,   -26,  -177,  -520,
  -344,   -83,  -520,  -520,   -90,  -352,  -520,  -354,  -358,  -520,
  -233,  -520,  -235,  -519,  -519,  -241,  -520,  -519,  -520,  -250,
  -258,  -520,  -520,  -520,    -3,  -519,  -393,  -338,  -520,  -520,
  -391,  -222,  -294,  -520,  -295,  -520,  -520,  -520,  -519,  -382,
  -306,  -283,  -520,  -520,  -313,  -317,  -319,  -520,  -486,  -486,
  -474,  -485,  -486,  -520,  -477,  -475,  -467,  -489,  -422,  -342,
  -520,  -349,  -519,  -520,  -520,   -89,  -520,  -520,  -361,  -519,
  -520,  -240,  -520,  -519,  -246,  -520,  -519,  -374,  -377,  -228,
  -392,  -519,  -390,  -519,  -298,  -301,  -520,  -519,  -519,  -310,
  -455,  -519,  -457,  -520,  -460,  -461,  -463,  -519,  -345,  -348,
  -520,  -520,   -85,   -87,   -86,   -88,  -520,  -351,  -237,   -52,
  -520,  -519,  -242,  -520,  -245,  -386,  -519,  -381,  -379,  -383,
  -384,  -520,  -520,  -486,  -520,  -520,  -520,   -84,  -350,  -519,
  -247,  -520,  -519,  -385,  -336,  -307,  -314,  -459,  -322,  -520,
  -347,  -243,  -520,  -248,  -346,  -519,  -249 ]

clist = [
'13,302,115,115,271,613,13,242,242,242,103,281,281,502,454,243,243,243',
'99,17,334,208,245,245,245,17,293,241,241,241,734,13,269,480,353,118',
'118,650,656,303,264,281,110,188,200,120,120,306,267,574,17,277,277,494',
'498,372,379,445,298,284,115,640,321,725,580,834,109,582,103,256,262',
'265,737,568,115,516,314,518,337,296,304,319,525,308,308,623,627,308',
'535,829,307,832,591,592,189,309,310,364,13,313,574,322,760,762,763,320',
'13,483,486,644,187,491,385,389,493,342,344,17,100,351,335,239,252,253',
'520,17,295,481,308,308,308,308,311,738,312,739,637,868,323,382,359,360',
'361,362,751,517,754,871,325,649,519,670,836,698,702,431,703,450,357',
'715,451,716,743,898,631,729,363,435,808,339,656,440,443,375,375,340',
'346,834,534,1,349,770,672,673,352,752,757,828,13,393,749,371,377,380',
'804,830,298,394,523,2,628,541,793,903,583,13,590,17,446,589,714,,,,',
',,,,,,,396,397,17,708,,4,,,,,,,,,,,,242,,,,,,455,,243,242,281,,,,243',
'245,,243,,270,241,245,469,,245,,456,13,459,241,449,,13,464,,,,675,874',
'875,,482,876,,267,,17,,,267,277,17,,264,13,,,463,,38,,281,,281,,38,',
'914,,,,,,17,,,385,389,899,103,574,,,,,574,,501,,,38,274,274,820,,,308',
'308,,,,515,,515,580,582,562,,499,500,721,,687,917,447,877,656,690,115',
',453,316,576,457,336,,,,13,,,,,,,,,,,,,,,,,608,,17,755,756,,118,,393',
'608,,,38,540,,556,120,,298,,38,,,,,,602,,,,,370,,,,,,913,,570,608,550',
',,,555,,,270,,,594,595,,586,,,,,,,588,,,,,632,,,,,,,,,,393,,,616,,,',
'298,574,393,619,,296,,,,,,730,,579,,,581,,,38,818,,822,,,13,270,705',
',13,,270,,393,13,612,38,624,624,,298,,,710,17,,719,720,17,,,,,17,645',
',,574,,,,,,,,,,115,,697,,,,,648,,281,,,,671,683,685,,,861,,688,,,863',
'608,,,,,,38,,900,118,274,38,,,,,677,,,120,,,,,,277,,,,750,570,,,38,',
',542,,375,,,,722,,,,,,,,,902,,,,742,,904,,,556,336,,336,,768,,,,,790',
',,792,,,393,,799,,,,,,,,298,,,13,13,,,,753,769,,,,758,,,,308,,115,,38',
'17,17,,,,13,,746,,,281,281,,,,,777,,,,,,,774,17,794,,,,,,785,787,797',
',13,,803,,,795,,,,,,,13,13,811,784,784,851,620,17,854,,622,,13,,,630',
',,,17,17,,,13,13,,827,,,,,17,,,,,13,839,624,,,,17,17,281,,824,308,608',
',,,,,,17,,,,813,888,,,308,892,,,894,,,,,,281,881,823,,38,13,,,38,,,277',
',38,,,,13,,,,862,,,17,,,,,910,13,281,281,,,,17,,281,,784,,870,,,,,921',
',17,923,393,878,879,,,891,,298,887,,,,926,,,,,,,,784,784,13,,13,274',
'281,784,,13,,16,13,,,,,16,13,,,17,,17,,,281,908,17,201,201,17,,,201',
'201,201,17,,281,,775,16,275,275,,784,920,,,,,,,,,,,,,924,,,,201,201',
'784,,201,201,,789,201,317,,,,,,784,,,,801,802,,,,38,38,,,,,,807,,,,',
',,,,,,815,816,,16,,,38,201,201,201,201,16,,,,,,,,,,,,,,,,,,,,,781,781',
',,38,,,,,,,,,,,,38,38,,,,,,850,,,,,38,,,,,,,860,,,,38,38,,,,,,,,867',
',,,38,,,,,,,,,16,201,201,201,201,,,201,201,201,,,,,,,,16,,,274,,,,,',
',,,,895,,896,38,,,,901,,,,,,,,38,,,,781,,,,,,,,,38,,,,,,,,,201,,,,,',
'201,,,201,,16,,781,781,275,16,,,,781,,,,,,,,,,,,,,38,,38,,16,,,38,,',
'38,,,,,,38,,,,201,201,,15,,781,,,,15,,,514,,514,,,,,,,,,,,781,,,,,,',
',,15,,,,781,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,201',
',,,,,,,,,,,15,,,,,,,,15,209,,,,240,240,240,,,,,,,,,,,,,,290,291,292',
',,,,201,,,,,,,,240,240,,,,,,,,201,,,,,,,,,,,,,201,,,,,,,,,,,,,,,,16',
',,,16,,,,15,16,,201,,,,,,,,,,,,201,,15,,,,201,,,,,,,,,,,,,,,,,,,,,,',
',,201,201,,,,,201,,,,,,,,,,,,275,,,,,,,,,,,,,,15,,,,,15,,,,,,373,240',
'381,240,,,395,201,,,,,,,,,15,,,209,405,406,407,408,409,410,411,412,413',
'414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430',
'201,,,,,201,,240,,240,,,16,16,,,,,,,240,,,,,,240,,,240,,,,,,,16,,,,',
',,,15,201,,,,,,,,,,,477,,,,,,782,782,488,,16,,,,,,,,,,,,16,16,,,,,,',
',,,,16,,,,,,,,,201,,16,16,,,,,,,,,,,,16,201,,,,,,,,,,,,,,,,,,,,,,,,240',
',,,275,,,,,,,,,,,,,16,,,,,,,240,,395,563,381,16,15,,,782,15,,,,,15,',
',16,,,,,,,,,,,,,,,240,,,240,,,240,782,782,201,,,,,782,584,,,,,,,,,,',
',,16,,16,,240,,,16,,,16,609,610,611,,,16,,,,,,,240,,782,240,,,240,,',
',,,,,,,,,,,,240,782,,,,,,,,,,,,,782,,,,,,,,,,,,,,,,,,,,,,,,,679,240',
',,684,686,,,374,378,689,,,691,,,,15,15,,696,,,,,240,,,29,240,,,,,29',
',,,,,,15,,240,,,29,29,,,,29,29,29,240,,,,,29,,437,,438,,,,,,,240,15',
',733,,,,,,,,29,29,15,15,29,29,240,,29,,,,,,15,,,240,,,,,,,,15,15,,,',
',,,,,,,,15,,,,,,,29,,,,29,29,29,29,29,,,240,778,,,,,,,,,,684,686,689',
',,,,,,297,305,,,15,240,,,240,,240,,,,,,15,,,341,,343,343,347,350,343',
',,,15,,,,,,,546,,,,,,,240,,,,,,,,,,,,,,,,29,29,29,29,29,240,,29,29,29',
',,,15,,15,,29,,778,15,,,15,,,,,,15,,849,,,572,,240,575,240,,578,,,,',
',,,,585,,,,,,,,240,,,,,,,,,,29,,,,,,29,,,29,,29,297,,,240,29,,618,,',
'575,,,618,240,,,240,,,,,,,,,,29,240,,,,,,,,,,,,,,,29,29,,,,,434,434',
',240,,,240,,,,,,,,,,,,,680,,452,,,240,,,,,,,,,,,240,,,,,,,,704,,,,707',
',,,,29,,,,,,,,,712,,,,,,,,,,,572,,,,,,,,,,,29,,,,,728,,,,,,,,,,,,,,',
',,374,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,551,,,,,29,,,,,,,776,,',
'297,,,29,,,,,,,,,,,,,,,,29,,,575,29,,,,575,29,,29,565,,,,,,434,,,551',
',29,551,,,,,29,,565,565,,,,434,,,,,819,,,,,297,,,,,,,,29,29,,,,,29,',
'835,,,,,,,,,,,,,,,,,,,,,,,,297,,,,,,,853,,856,,,,,,,,,29,,,,,,,,,,618',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,29,572,,434,575,,,29,29,,,,,,,897',
'565,,,434,,,,,,,,,,,,29,,,,,,,551,909,29,,912,,,,726,731,,,,,,726,,726',
',,,,575,29,,,,,,,,,,925,,29,29,297,,,,,,,,,,29,,,,,,,,,29,,29,29,,,',
',,,,,,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,434,,,434,,,,,434,,,,,,29,551',
'551,,,,,806,,,,810,29,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,',
',,,,,,,,,,,,,29,,29,,,,,29,434,,29,434,,,,,29,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,297,,,,,,,434,,,,434,,,434,,,,,,,,,,,726,,,,,,,,,,',
',,,,,,,,,,,,,434,,,,,726,,,,,,,,,,,,,434,,,434,,,,,,,,,,,,,434' ]
        racc_goto_table = arr = ::Array.new(2837, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'16,21,49,49,43,5,16,57,57,57,85,56,56,82,32,59,59,59,9,22,48,17,63,63',
'63,22,55,29,29,29,80,16,41,3,48,52,52,86,142,57,60,56,13,13,25,53,53',
'59,40,148,22,22,22,79,79,23,23,35,29,44,49,46,16,6,61,144,11,61,85,34',
'34,34,6,36,49,47,9,47,75,25,76,22,130,25,25,81,81,25,130,140,77,140',
'36,36,27,15,15,26,16,15,148,18,141,141,141,83,16,58,58,84,14,58,33,33',
'58,127,127,22,12,127,87,31,31,31,88,22,89,90,25,25,25,25,91,92,93,94',
'95,96,97,21,15,15,15,15,98,99,100,101,102,103,104,105,106,107,108,110',
'111,114,11,115,116,117,118,119,120,121,11,62,122,125,142,33,33,57,57',
'126,128,144,129,1,131,132,133,134,135,136,137,139,16,49,46,17,17,17',
'7,143,29,17,147,4,82,54,38,140,37,16,64,22,65,67,68,,,,,,,,,,,,25,25',
'22,36,,2,,,,,,,,,,,,57,,,,,,57,,59,57,56,,,,59,63,,59,,2,29,63,55,,63',
',29,16,41,29,60,,16,41,,,,130,141,141,,55,141,,40,,22,,,40,22,22,,60',
'16,,,44,,45,,56,,56,,45,,80,,,,,,22,,,33,33,6,85,148,,,,,148,,9,,,45',
'45,45,81,,,25,25,,,,22,,22,61,61,21,,15,15,32,,35,141,31,86,142,35,49',
',31,45,62,31,45,,,,16,,,,,,,,,,,,,,,,,33,,22,3,3,,52,,49,33,,,45,13',
',60,53,,29,,45,,,,,,21,,,,,2,,,,,,5,,59,33,34,,,,34,,,2,,,55,55,,59',
',,,,,,63,,,,,21,,,,,,,,,,49,,,55,,,,29,148,49,55,,25,,,,,,23,,34,,,34',
',,45,79,,3,,,16,2,62,,16,,2,,49,16,25,45,85,85,,29,,,62,22,,33,33,22',
',,,,22,85,,,148,,,,,,,,,,49,,43,,,,,25,,56,,,,25,17,17,,,79,,17,,,79',
'33,,,,,,45,,82,52,45,45,,,,,13,,,53,,,,,,22,,,,21,59,,,45,,,2,,57,,',
',29,,,,,,,,,3,,,,57,,3,,,60,45,,45,,48,,,,,62,,,62,,,49,,62,,,,,,,,29',
',,16,16,,,,85,55,,,,85,,,,25,,49,,45,22,22,,,,16,,15,,,56,56,,,,,17',
',,,,,,22,22,57,,,,,,16,16,59,,16,,55,,,63,,,,,,,16,16,55,22,22,62,2',
'22,62,,2,,16,,,2,,,,22,22,,,16,16,,55,,,,,22,,,,,16,43,85,,,,22,22,56',
',85,25,33,,,,,,,22,,,,15,62,,,25,62,,,62,,,,,,56,21,15,,45,16,,,45,',
',22,,45,,,,16,,,,16,,,22,,,,,62,16,56,56,,,,22,,56,,22,,85,,,,,62,,22',
'62,49,16,16,,,59,,29,16,,,,62,,,,,,,,22,22,16,,16,45,56,22,,16,,20,16',
',,,,20,16,,,22,,22,,,56,16,22,20,20,22,,,20,20,20,22,,56,,2,20,20,20',
',22,16,,,,,,,,,,,,,16,,,,20,20,22,,20,20,,2,20,20,,,,,,22,,,,2,2,,,',
'45,45,,,,,,2,,,,,,,,,,,2,2,,20,,,45,20,20,20,20,20,,,,,,,,,,,,,,,,,',
',,,45,45,,,45,,,,,,,,,,,,45,45,,,,,,2,,,,,45,,,,,,,2,,,,45,45,,,,,,',
',2,,,,45,,,,,,,,,20,20,20,20,20,,,20,20,20,,,,,,,,20,,,45,,,,,,,,,,2',
',2,45,,,,2,,,,,,,,45,,,,45,,,,,,,,,45,,,,,,,,,20,,,,,,20,,,20,,20,,45',
'45,20,20,,,,45,,,,,,,,,,,,,,45,,45,,20,,,45,,,45,,,,,,45,,,,20,20,,19',
',45,,,,19,,,20,,20,,,,,,,,,,,45,,,,,,,,,19,,,,45,,,,,,,,,,,,,,,,,,,',
'20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,19,,,,,,,,19,28,,,,28',
'28,28,,,,,,,,,,,,,,28,28,28,,,,,20,,,,,,,,28,28,,,,,,,,20,,,,,,,,,,',
',,20,,,,,,,,,,,,,,,,20,,,,20,,,,19,20,,20,,,,,,,,,,,,20,,19,,,,20,,',
',,,,,,,,,,,,,,,,,,,,,,20,20,,,,,20,,,,,,,,,,,,20,,,,,,,,,,,,,,19,,,',
',19,,,,,,28,28,28,28,,,28,20,,,,,,,,,19,,,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,20,,,,,20,,28',
',28,,,20,20,,,,,,,28,,,,,,28,,,28,,,,,,,20,,,,,,,,19,20,,,,,,,,,,,28',
',,,,,20,20,28,,20,,,,,,,,,,,,20,20,,,,,,,,,,,20,,,,,,,,,20,,20,20,,',
',,,,,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,28,,,,20,,,,,,,,,,,,,20,,,,,,',
'28,,28,28,28,20,19,,,20,19,,,,,19,,,20,,,,,,,,,,,,,,,28,,,28,,,28,20',
'20,20,,,,,20,28,,,,,,,,,,,,,20,,20,,28,,,20,,,20,28,28,28,,,20,,,,,',
',28,,20,28,,,28,,,,,,,,,,,,,,,28,20,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,',
',,,,,,,28,28,,,28,28,,,24,24,28,,,28,,,,19,19,,28,,,,,28,,,39,28,,,',
',39,,,,,,,19,,28,,,39,39,,,,39,39,39,28,,,,,39,,24,,24,,,,,,,28,19,',
'28,,,,,,,,39,39,19,19,39,39,28,,39,,,,,,19,,,28,,,,,,,,19,19,,,,,,,',
',,,,19,,,,,,,39,,,,39,39,39,39,39,,,28,28,,,,,,,,,,28,28,28,,,,,,,10',
'10,,,19,28,,,28,,28,,,,,,19,,,10,,10,10,10,10,10,,,,19,,,,,,,24,,,,',
',,28,,,,,,,,,,,,,,,,39,39,39,39,39,28,,39,39,39,,,,19,,19,,39,,28,19',
',,19,,,,,,19,,28,,,24,,28,24,28,,24,,,,,,,,,24,,,,,,,,28,,,,,,,,,,39',
',,,,,39,,,39,,39,10,,,28,39,,24,,,24,,,24,28,,,28,,,,,,,,,,39,28,,,',
',,,,,,,,,,,39,39,,,,,10,10,,28,,,28,,,,,,,,,,,,,24,,10,,,28,,,,,,,,',
',,28,,,,,,,,24,,,,24,,,,,39,,,,,,,,,24,,,,,,,,,,,24,,,,,,,,,,,39,,,',
',24,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,10,,,',
',39,,,,,,,24,,,10,,,39,,,,,,,,,,,,,,,,39,,,24,39,,,,24,39,,39,10,,,',
',,10,,,10,,39,10,,,,,39,,10,10,,,,10,,,,,24,,,,,10,,,,,,,,39,39,,,,',
'39,,24,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,24,,24,,,,,,,,,39,,,,,,,,,,24',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,39,24,,10,24,,,39,39,,,,,,,24,10',
',,10,,,,,,,,,,,,39,,,,,,,10,24,39,,24,,,,10,10,,,,,,10,,10,,,,,24,39',
',,,,,,,,,24,,39,39,10,,,,,,,,,,39,,,,,,,,,39,,39,39,,,,,,,,,,,,39,39',
',,,,,,,,,,,,,,,,,,,,,,,,,,10,,,10,,,,,10,,,,,,39,10,10,,,,,10,,,,10',
'39,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,39,,39',
',,,,39,10,,39,10,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,',
',,,,10,,,,10,,,10,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,10,,,,',
',,,,,,,,10,,,10,,,,,,,,,,,,,10' ]
        racc_goto_check = arr = ::Array.new(2837, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   179,   225,  -262,   199,  -474,  -550,  -531,   nil,    13,
  1911,    58,   113,    33,   100,    36,    -2,     0,    37,  1178,
   866,   -55,    17,  -136,  1627,    24,   -13,    83,  1266,     2,
   nil,    96,  -249,   -83,    40,  -199,  -358,  -240,  -506,  1836,
    15,    -1,   nil,   -30,    24,   296,  -451,  -248,   -47,    -7,
   nil,   nil,    26,    36,  -167,   -18,   -23,   -18,  -192,   -10,
    10,  -376,   -76,    -3,  -242,   -49,   nil,  -239,  -380,   nil,
   nil,   nil,   nil,   nil,   nil,    11,    23,    32,   nil,  -256,
  -590,  -414,  -301,    41,  -407,     5,  -482,    53,  -211,    72,
  -169,    71,  -490,    72,  -492,  -373,  -683,    73,  -500,  -179,
  -502,  -677,    82,  -369,  -184,  -369,  -616,  -413,  -412,   nil,
   -82,  -412,   nil,   nil,  -103,  -432,  -101,  -431,  -469,  -704,
  -340,  -449,  -561,   nil,   nil,    96,   100,    38,    97,  -168,
  -258,   100,  -491,  -345,  -345,   103,  -461,  -465,   nil,  -572,
  -670,  -551,  -481,  -564,  -696,   nil,   nil,  -140,  -387 ]

racc_goto_default = [
   nil,   nil,   479,   nil,   nil,   nil,   735,   nil,     5,   nil,
     6,     7,   315,   nil,   nil,   nil,   205,    19,    14,   206,
   289,   nil,   204,   nil,   247,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   605,   nil,   nil,   nil,   nil,   nil,   280,
    32,   nil,    34,    37,    36,   202,   513,   nil,   117,   387,
   116,   119,    71,    72,   nil,   nil,    45,   299,   nil,   300,
   552,   553,   432,   571,   nil,   nil,   257,   nil,   nil,    46,
    47,    48,    49,    50,    51,    52,   nil,   258,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   495,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,
   nil,   nil,   391,   259,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    70,    73,    74,   nil,   nil,   nil,   nil,
   530,   nil,   nil,   nil,   nil,   nil,   nil,   652,   653,   654,
   655,   nil,   831,   662,   663,   666,   669,   nil,   251 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_174,
  5, 160, :_reduce_175,
  3, 160, :_reduce_176,
  6, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  4, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  4, 160, :_reduce_192,
  4, 160, :_reduce_193,
  2, 160, :_reduce_194,
  2, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  2, 160, :_reduce_209,
  2, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  5, 160, :_reduce_216,
  1, 160, :_reduce_none,
  1, 156, :_reduce_218,
  1, 153, :_reduce_none,
  2, 153, :_reduce_220,
  2, 153, :_reduce_221,
  5, 153, :_reduce_222,
  2, 153, :_reduce_223,
  3, 153, :_reduce_224,
  3, 192, :_reduce_225,
  4, 192, :_reduce_226,
  4, 192, :_reduce_227,
  6, 192, :_reduce_228,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_231,
  2, 163, :_reduce_232,
  5, 163, :_reduce_233,
  2, 163, :_reduce_234,
  5, 163, :_reduce_235,
  4, 163, :_reduce_236,
  7, 163, :_reduce_237,
  3, 163, :_reduce_238,
  1, 163, :_reduce_none,
  4, 196, :_reduce_240,
  3, 196, :_reduce_241,
  5, 196, :_reduce_242,
  7, 196, :_reduce_243,
  2, 196, :_reduce_244,
  5, 196, :_reduce_245,
  4, 196, :_reduce_246,
  6, 196, :_reduce_247,
  7, 196, :_reduce_248,
  9, 196, :_reduce_249,
  3, 196, :_reduce_250,
  1, 196, :_reduce_none,
  0, 198, :_reduce_252,
  2, 166, :_reduce_253,
  1, 197, :_reduce_none,
  0, 199, :_reduce_255,
  3, 197, :_reduce_256,
  0, 200, :_reduce_257,
  4, 197, :_reduce_258,
  2, 195, :_reduce_259,
  2, 194, :_reduce_260,
  1, 194, :_reduce_none,
  1, 189, :_reduce_262,
  3, 189, :_reduce_263,
  3, 155, :_reduce_264,
  4, 155, :_reduce_265,
  2, 155, :_reduce_266,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_275,
  0, 221, :_reduce_276,
  4, 188, :_reduce_277,
  0, 222, :_reduce_278,
  5, 188, :_reduce_279,
  3, 188, :_reduce_280,
  3, 188, :_reduce_281,
  2, 188, :_reduce_282,
  4, 188, :_reduce_283,
  3, 188, :_reduce_284,
  3, 188, :_reduce_285,
  1, 188, :_reduce_286,
  4, 188, :_reduce_287,
  3, 188, :_reduce_288,
  1, 188, :_reduce_289,
  5, 188, :_reduce_290,
  2, 188, :_reduce_291,
  1, 188, :_reduce_none,
  2, 188, :_reduce_293,
  6, 188, :_reduce_294,
  6, 188, :_reduce_295,
  0, 223, :_reduce_296,
  0, 224, :_reduce_297,
  7, 188, :_reduce_298,
  0, 225, :_reduce_299,
  0, 226, :_reduce_300,
  7, 188, :_reduce_301,
  5, 188, :_reduce_302,
  4, 188, :_reduce_303,
  5, 188, :_reduce_304,
  0, 227, :_reduce_305,
  0, 228, :_reduce_306,
  9, 188, :_reduce_307,
  0, 229, :_reduce_308,
  0, 230, :_reduce_309,
  7, 188, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  9, 188, :_reduce_314,
  0, 234, :_reduce_315,
  0, 235, :_reduce_316,
  6, 188, :_reduce_317,
  0, 236, :_reduce_318,
  6, 188, :_reduce_319,
  0, 237, :_reduce_320,
  0, 238, :_reduce_321,
  9, 188, :_reduce_322,
  1, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 152, :_reduce_327,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 212, :_reduce_none,
  5, 212, :_reduce_336,
  1, 138, :_reduce_none,
  2, 138, :_reduce_338,
  1, 215, :_reduce_none,
  1, 215, :_reduce_340,
  1, 239, :_reduce_341,
  3, 239, :_reduce_342,
  1, 240, :_reduce_343,
  2, 240, :_reduce_344,
  4, 240, :_reduce_345,
  7, 240, :_reduce_346,
  6, 240, :_reduce_347,
  4, 240, :_reduce_348,
  3, 240, :_reduce_349,
  5, 240, :_reduce_350,
  4, 240, :_reduce_351,
  2, 240, :_reduce_352,
  1, 240, :_reduce_353,
  2, 240, :_reduce_354,
  1, 168, :_reduce_355,
  2, 168, :_reduce_356,
  1, 168, :_reduce_357,
  3, 168, :_reduce_358,
  0, 242, :_reduce_359,
  0, 243, :_reduce_360,
  6, 241, :_reduce_361,
  2, 164, :_reduce_362,
  4, 164, :_reduce_363,
  4, 164, :_reduce_364,
  0, 245, :_reduce_365,
  3, 210, :_reduce_366,
  4, 210, :_reduce_367,
  4, 210, :_reduce_368,
  3, 210, :_reduce_369,
  2, 210, :_reduce_370,
  1, 210, :_reduce_371,
  0, 246, :_reduce_372,
  0, 247, :_reduce_373,
  6, 209, :_reduce_374,
  0, 248, :_reduce_375,
  0, 249, :_reduce_376,
  6, 209, :_reduce_377,
  0, 252, :_reduce_378,
  6, 214, :_reduce_379,
  1, 250, :_reduce_none,
  4, 250, :_reduce_381,
  2, 250, :_reduce_382,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  6, 137, :_reduce_385,
  0, 137, :_reduce_386,
  1, 253, :_reduce_387,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 254, :_reduce_390,
  1, 254, :_reduce_none,
  2, 139, :_reduce_392,
  1, 139, :_reduce_none,
  1, 201, :_reduce_394,
  1, 201, :_reduce_395,
  1, 201, :_reduce_none,
  1, 202, :_reduce_397,
  1, 256, :_reduce_none,
  2, 256, :_reduce_399,
  3, 257, :_reduce_400,
  1, 257, :_reduce_401,
  3, 203, :_reduce_402,
  3, 204, :_reduce_403,
  3, 205, :_reduce_404,
  3, 205, :_reduce_405,
  1, 260, :_reduce_406,
  3, 260, :_reduce_407,
  1, 261, :_reduce_none,
  2, 261, :_reduce_409,
  3, 206, :_reduce_410,
  3, 206, :_reduce_411,
  1, 263, :_reduce_412,
  3, 263, :_reduce_413,
  1, 258, :_reduce_414,
  2, 258, :_reduce_415,
  1, 259, :_reduce_416,
  2, 259, :_reduce_417,
  1, 262, :_reduce_418,
  0, 265, :_reduce_419,
  3, 262, :_reduce_420,
  0, 266, :_reduce_421,
  4, 262, :_reduce_422,
  1, 264, :_reduce_423,
  1, 264, :_reduce_424,
  1, 264, :_reduce_425,
  1, 264, :_reduce_none,
  2, 184, :_reduce_427,
  1, 184, :_reduce_428,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  3, 185, :_reduce_433,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_436,
  2, 255, :_reduce_437,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_443,
  1, 177, :_reduce_444,
  1, 177, :_reduce_445,
  1, 177, :_reduce_446,
  1, 177, :_reduce_447,
  1, 177, :_reduce_448,
  1, 207, :_reduce_449,
  1, 151, :_reduce_450,
  1, 154, :_reduce_451,
  1, 154, :_reduce_452,
  1, 216, :_reduce_453,
  0, 268, :_reduce_454,
  4, 216, :_reduce_455,
  2, 216, :_reduce_456,
  4, 218, :_reduce_457,
  2, 218, :_reduce_458,
  6, 269, :_reduce_459,
  4, 269, :_reduce_460,
  4, 269, :_reduce_461,
  2, 269, :_reduce_462,
  4, 269, :_reduce_463,
  2, 269, :_reduce_464,
  2, 269, :_reduce_465,
  1, 269, :_reduce_466,
  0, 269, :_reduce_467,
  1, 275, :_reduce_468,
  1, 275, :_reduce_469,
  1, 275, :_reduce_470,
  1, 275, :_reduce_471,
  1, 275, :_reduce_472,
  1, 270, :_reduce_473,
  3, 270, :_reduce_474,
  3, 276, :_reduce_475,
  1, 271, :_reduce_476,
  3, 271, :_reduce_477,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 272, :_reduce_480,
  1, 272, :_reduce_481,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 274, :_reduce_484,
  2, 273, :_reduce_485,
  0, 273, :_reduce_486,
  1, 219, :_reduce_none,
  0, 279, :_reduce_488,
  5, 219, :_reduce_489,
  1, 208, :_reduce_490,
  2, 208, :_reduce_491,
  2, 208, :_reduce_492,
  1, 191, :_reduce_none,
  3, 191, :_reduce_494,
  3, 280, :_reduce_495,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 217, :_reduce_515,
  1, 217, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_518,
  0, 142, :_reduce_519 ]

racc_reduce_n = 520

racc_shift_n = 927

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tLBRACK2 => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tQWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "block_par",
  "block_var",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_22(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]

                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no2"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no3"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_80(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

def _reduce_174(val, _values, result)
                      result = node_assign val[0], val[2]
                    
    result
end

def _reduce_175(val, _values, result)
                      result = node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_176(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist if val[2]
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_194(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", argl(val[2])))
                    
    result
end

def _reduce_207(val, _values, result)
                      result = get_match_node val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 217 omitted

def _reduce_218(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 229 omitted

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = arg_concat val[0], val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = arg_concat val[0], val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      args = list_prepend val[0], val[2]
                      result = arg_blk_pass args, val[3]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = arg_concat s(:array, val[0]), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_247(val, _values, result)
                      arg_value, _, args, _, assocs, opt_block = val
                      result = s(:array, arg_value).add_all(args)
                      result.add(s(:hash, *assocs.sexp_body))
                      result = arg_blk_pass result, opt_block
                    
    result
end

def _reduce_248(val, _values, result)
                      result = arg_concat s(:array, val[0]).add(s(:hash, *val[2].sexp_body)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = arg_blk_pass result, val[8]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_253(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_256(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_257(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_258(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_276(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter

                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_302(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_303(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_304(val, _values, result)
                      (_, line), _, _, elsebody, _ = val
                      result = new_case nil, elsebody, line
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_309(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (in_def || in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_312(val, _values, result)
                      result = in_def
                      self.in_def = false
                    
    result
end

def _reduce_313(val, _values, result)
                      result = in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        in_def or in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.in_def

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_321(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:array, clean_mlhs(val[0]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = list_append val[0], clean_mlhs(val[2])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_344(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = block_var18 val[0], nil, val[3]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = block_var18 val[0], val[3], val[6]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = block_var18 val[0], s(:splat), val[5]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = block_var18 val[0], val[3], nil
                    
    result
end

def _reduce_349(val, _values, result)
                      result = block_var18 val[0], s(:splat), nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = block_var18 nil, val[1], val[4]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = block_var18 nil, s(:splat), val[3]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = block_var18 nil, val[1], nil
                    
    result
end

def _reduce_353(val, _values, result)
                      result = block_var18 nil, s(:splat), nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = block_var18 nil, nil, val[1]
                    
    result
end

def _reduce_355(val, _values, result)
 result = 0 
    result
end

def _reduce_356(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_357(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_359(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_360(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_361(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_362(val, _values, result)
                      block_dup_check val[0], val[1]

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_366(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_372(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_373(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_374(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_375(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_376(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_377(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_379(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

# reduce 383 omitted

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_386(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_387(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 388 omitted

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_395(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_415(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_417(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_420(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_422(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_423(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_424(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_425(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_428(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_437(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_444(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_445(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_446(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_447(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_448(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_449(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_450(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_451(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_452(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_453(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_454(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_466(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_467(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_468(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_469(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_470(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_472(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_474(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

# reduce 478 omitted

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_481(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 482 omitted

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = nil
                    
    result
end

# reduce 487 omitted

def _reduce_488(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_490(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_492(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

def _reduce_515(val, _values, result)
 yyerrok 
    result
end

# reduce 516 omitted

# reduce 517 omitted

def _reduce_518(val, _values, result)
 yyerrok 
    result
end

def _reduce_519(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby18Parser
