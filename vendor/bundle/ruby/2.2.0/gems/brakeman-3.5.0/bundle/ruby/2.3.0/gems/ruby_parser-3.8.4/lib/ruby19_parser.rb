#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-284,552,580,-103,-102,552,259,-284,-284,-284,207,208,509,-284,-284',
'715,-284,210,832,-493,521,616,672,520,630,-99,-493,259,-101,552,79,-106',
'307,308,593,-493,-284,-284,80,-284,-284,-284,-284,-284,552,521,207,208',
'523,-100,695,-104,-102,211,-101,552,-104,259,629,521,-106,261,523,582',
'581,594,-101,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-556,695,-284,-284,-284,695,612,207,208,605,-284,-405',
'258,-284,207,208,592,604,-284,211,-284,-107,-284,-284,-284,-284,-284',
'-284,-284,-105,-284,-95,-284,258,107,-93,-103,-102,107,106,714,-103',
'-102,106,-480,-284,-284,671,-96,-90,-284,-480,-480,-480,-105,-97,-480',
'-480,-480,107,-480,-101,107,258,106,880,-101,106,-480,107,-480,-480',
'-480,-91,106,-95,-93,107,-92,211,-480,-480,106,-480,-480,-480,-480,-480',
'107,-104,-103,630,203,106,-104,-557,-494,211,-95,204,600,107,-93,580',
'211,107,106,-414,202,-265,106,-480,-480,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,-480,-480,-480,629,-98,-480,-480,-480,580,-480,-480,-95',
'-96,-480,-95,-93,-480,-480,-93,-480,-95,-480,-99,-480,-93,-480,-480',
'-480,-480,-480,-480,-480,107,-480,-556,-480,580,106,-414,585,580,630',
'582,581,588,-414,-553,-554,-480,-480,-480,-480,-483,-480,-414,-495,-480',
'-480,107,-483,-483,-483,630,106,-483,-483,-483,-331,-483,582,581,583',
'-414,-94,-331,629,-483,-485,-483,-483,-483,231,107,-331,-485,-560,706',
'106,-483,-483,707,-483,-483,-483,-483,-483,629,582,581,-480,-483,582',
'581,-100,437,521,-480,-483,523,-263,725,-553,-554,228,748,-480,-483',
'230,229,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483',
'-483,-483,-553,-554,-483,-483,-483,-560,-483,-483,575,598,-483,580,-560',
'-483,-483,576,-483,-556,-483,-107,-483,-560,-483,-483,-483,-483,-483',
'-483,-483,-104,-483,761,-483,536,535,534,747,537,775,-560,558,800,775',
'-560,433,-483,-483,-483,-483,-284,-483,434,607,-483,-483,591,-284,-284',
'-284,831,435,-284,-284,-284,686,-284,536,535,534,541,537,587,582,581',
'578,-284,-284,-284,545,544,548,547,107,834,-102,-284,-284,106,-284,-284',
'-284,-284,-284,606,-95,686,-560,536,535,534,-104,537,-487,-560,-85,836',
'-486,-488,-556,-487,-71,760,-560,-486,-488,839,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,-284,-560,-492,-284,-284,-284',
'-93,750,-284,-492,840,-284,-102,919,-284,-284,760,-284,-492,-284,846',
'-284,563,-284,-284,-284,-284,-284,-284,-284,-495,-284,686,-284,536,535',
'534,733,537,686,562,536,535,534,796,537,-284,-284,-284,-284,-560,-284',
'381,-491,-284,-105,389,-560,-560,-560,-491,391,390,-560,-560,761,-560',
'536,535,534,541,537,-91,252,660,-560,-489,682,-100,-92,253,548,547,-489',
'558,-101,-560,-560,-490,-560,-560,-560,-560,-560,852,-490,-263,205,686',
'-483,536,535,534,541,537,686,-483,536,535,534,856,537,545,544,548,547',
'858,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560',
'-560,-480,509,-560,-560,-560,541,613,-480,-98,859,-560,211,682,-560',
'-107,861,548,547,-560,864,-560,685,-560,-560,-560,-560,-560,-560,-560',
'866,-560,-560,-560,868,-494,686,868,536,535,534,211,537,231,-97,-560',
'-560,-560,873,-94,-106,-560,-560,-560,-560,-103,486,-560,-560,-560,539',
'-560,536,535,534,875,537,504,505,877,-560,-560,-560,-560,682,228,525',
'-90,524,230,229,-560,-560,-99,-560,-560,-560,-560,-560,686,231,536,535',
'534,107,537,107,199,541,106,686,106,536,535,534,211,537,545,544,548',
'547,511,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-560',
'-560,-560,107,682,-560,-560,-560,106,749,-560,207,208,-560,510,682,-560',
'-560,887,-560,888,-560,211,-560,872,-560,-560,-560,-560,-560,-560,-560',
'891,-560,-560,-560,686,-266,536,535,534,506,537,207,208,231,261,500',
'-560,-560,-560,-560,-278,-560,501,211,-560,-103,264,-278,-278,-278,502',
'499,-278,-278,-278,539,-278,536,535,534,3,537,541,800,775,228,-278,-278',
'-278,230,229,226,227,548,547,898,-278,-278,899,-278,-278,-278,-278,-278',
'686,495,536,535,534,902,537,207,208,541,719,686,494,536,535,534,904',
'537,545,544,548,547,905,-278,-278,-278,-278,-278,-278,-278,-278,-278',
'-278,-278,-278,-278,-278,211,682,-278,-278,-278,-70,486,-278,484,481',
'-278,261,682,-278,-278,471,-278,921,-278,210,-278,685,-278,-278,-278',
'-278,-278,-278,-278,923,-278,686,-278,536,535,534,-277,537,110,111,112',
'113,114,-277,512,-278,-278,-278,-278,-562,-278,513,-277,-278,924,439',
'-562,-562,-562,438,435,-562,-562,-562,539,-562,536,535,534,541,537,231',
'928,436,-562,-562,-562,-562,823,824,548,547,825,101,102,-562,-562,932',
'-562,-562,-562,-562,-562,686,935,536,535,534,937,537,868,868,541,228',
'942,943,392,230,229,226,227,545,544,548,547,868,-562,-562,-562,-562',
'-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,868,682,-562,-562',
'-562,560,921,-562,948,950,-562,868,561,-562,-562,868,-562,868,-562,954',
'-562,559,-562,-562,-562,-562,-562,-562,-562,921,-562,-562,-562,539,387',
'536,535,534,371,537,368,344,211,306,-285,-562,-562,-562,-562,-561,-562',
'-285,305,-562,666,250,-561,-561,-561,103,-285,-561,-561,-561,539,-561',
'536,535,534,206,537,541,201,921,-561,-561,-561,-561,978,979,545,544',
'548,547,980,-561,-561,982,-561,-561,-561,-561,-561,710,-284,110,111',
'112,113,114,709,-284,541,719,868,868,-557,868,-557,711,-284,545,544',
'548,547,-556,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561',
'-561,-561,-561,471,-285,-561,-561,-561,710,471,-561,-285,734,-561,-264',
'941,-561,-561,211,-561,-285,-561,728,-561,711,-561,-561,-561,-561,-561',
'-561,-561,752,-561,-561,-561,-492,727,-493,946,486,484,698,-492,558',
'-493,947,660,-561,-561,-561,-561,-492,-561,-493,945,-561,281,69,70,71',
'12,57,211,691,-277,63,64,689,261,688,67,-277,65,66,68,32,33,72,73,211',
'-277,261,660,680,31,30,29,95,94,96,97,679,844,22,536,535,534,231,537',
'11,47,231,13,99,98,100,89,56,91,90,92,-284,93,101,102,676,87,88,-284',
'44,45,43,-285,-557,775,674,211,-284,686,-285,536,535,534,-284,537,667',
'760,666,-285,660,-284,42,515,211,35,-557,649,58,59,-284,794,60,-85,37',
'211,775,686,46,536,535,534,804,537,211,211,23,541,211,211,231,85,79',
'81,82,83,84,231,548,547,80,86,281,69,70,71,12,57,200,62,231,63,64,231',
'619,541,67,,65,66,68,32,33,72,73,,548,547,,,31,30,29,95,94,96,97,,844',
'22,536,535,534,,537,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,',
'87,88,,44,45,43,110,111,112,113,114,,686,,536,535,534,,537,110,111,112',
'113,114,,42,,,35,,,58,59,,,60,,37,,,,46,539,,536,535,534,,537,23,541',
',,,85,79,81,82,83,84,,548,547,80,86,281,69,70,71,12,57,,62,,63,64,,',
',67,541,65,66,68,32,33,72,73,,545,544,548,547,31,30,29,95,94,96,97,',
',22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,686,,536,535,534,,537,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46',
'761,,536,535,534,,537,23,541,,,,85,79,81,82,83,84,,548,547,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,541,65,66,68,32,33,72,73,,545,544,548',
'547,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,686,,536,535,534,,537,,,,,,,42,,',
'35,,,58,59,,,60,,37,,,,46,761,,536,535,534,,537,23,541,,,,85,79,81,82',
'83,84,,548,547,80,86,8,69,70,71,12,57,,62,,63,64,,,,67,541,65,66,68',
'32,33,72,73,,545,544,548,547,31,30,29,95,94,96,97,,,22,,,,,,11,47,10',
'13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,',
',,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,539,,536,535,534,,537,23,,,,',
'85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,541,65',
'66,68,32,33,72,73,,545,544,548,547,31,30,29,95,94,96,97,,,22,,,,,,11',
'47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-579',
'-579,-579,-579,237,239,,,-579,-579,,,,,,245,246,,42,,,35,,,58,59,,,60',
',37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83',
'84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,,243',
'244,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227',
'238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,235,240,241,242,237,239,,,243,244,,,,,,245,246,,42,,,35,,,58,59',
',,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247',
'248,243,244,,-579,-579,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244,,-579',
'-579,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227',
'238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,-579,-579,-579,-579,237,239,,,-579,-579,,,,,,245,246,,42,,,35,,',
'58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-579,-579,-579,-579',
'237,239,,,-579,-579,,,,,,245,246,,42,,,283,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-579,-579,-579,-579,237,239,,,-579,-579,,,',
',,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
'-579,-579,-579,-579,237,239,,,-579,-579,,,,,,245,246,,42,,,35,,,58,59',
',,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,-579,-579,-579,-579,237,239',
',,-579,-579,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,,,232,23,233,,,,85,79,81,82,83,84,,,,80,86,8,69,70',
'71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228',
',234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37',
'228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82,83,84,,,,80',
'86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,283,,,58,59,,',
'60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82,83,84',
',,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,,46,230,229,226,227,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35',
',,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,42,,,283,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,',
',60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,644,,271',
',46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,-413,85,79,81,82,83,84,-413,-413,-413,80,86,-413,-413',
'-413,,-413,,,62,,,,,,-413,-413,-413,,,,,,,,,-413,-413,,-413,-413,-413',
'-413,-413,,,,,,,,,,,,,,,,,,,,,,,,-413,-413,-413,-413,-413,-413,-413',
'-413,-413,-413,-413,-413,-413,-413,,,-413,-413,-413,,,-413,,261,-413',
',,-413,-413,,-413,,-413,,-413,,-413,-413,-413,-413,-413,-413,-413,,-413',
'-413,-413,,,,,,,,,,,,-291,-413,-413,,-413,,-413,-291,-291,-291,,,-291',
'-291,-291,539,-291,536,535,534,,537,,,,,-291,-291,,,,,,,,,-291,-291',
',-291,-291,-291,-291,-291,,,,,,,,,,541,528,,,,,,,,545,544,548,547,,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,,,-291',
'-291,-291,,,-291,,264,-291,,,-291,-291,,-291,,-291,,-291,,-291,-291',
'-291,-291,-291,-291,-291,,-291,,-291,,,,,,,,,,,,,-291,-291,,-291,,-291',
'69,70,71,,57,,,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99',
'98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,',
',,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,287,,,,,,,,,,,,,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,304,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,617',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,,,245,246,,216,,,222,,',
'58,59,,,60,,,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79',
'81,82,83,84,,,,80,86,107,249,69,70,71,106,57,62,,,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,338',
',,35,,,58,59,,,60,,37,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,381,,62,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,397,,,,46,,,,,,',
',221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,397',
',,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,644,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,',
',,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,',
',85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65,66,68,298,299,72,73,,,,',
',294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,911,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,',
'87,88,,,,302,,,,,,,,,,,,,,,,,,,,901,,,222,,,58,59,,,60,,,,,,,,,,,,,',
',,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,617,296,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,,245,246,292,,,222,,,58,59,,,60,,',
',228,,234,,230,229,226,227,238,236,232,,233,,,85,79,81,82,83,84,,,,80',
'86,,,249,497,-240,,,62,69,70,71,12,57,,,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58',
'59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,',
',,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,515,,58,59,,,60',
',,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,564,56,91,90',
'565,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,566,,,222,,,58,59,',
',60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,564,56,91,90,565,,93,101,102,,87,88,,,,302,,,',
',,,,,,,,,,,,,,,,566,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,-578,85,79,81,82,83,84,-578,-578,-578,80,86,-578,-578,-578',
',-578,,,62,,,,,,-578,-578,-578,,,,,,,,,-578,-578,,-578,-578,-578,-578',
'-578,,,,,,,,,,,,,,,,,,,,,,,,-578,-578,-578,-578,-578,-578,-578,-578',
'-578,-578,-578,-578,-578,-578,,,-578,-578,-578,,,-578,,261,-578,,,-578',
'-578,,-578,,-578,,-578,,-578,-578,-578,-578,-578,-578,-578,,-578,-578',
'-578,,,,,,,,,,,,,-578,-578,,-578,,-578,69,70,71,,57,,,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,-578,85,79,81,82,83,84,-578,-578,-578',
'80,86,-578,-578,-578,,-578,,,62,,,,,,,-578,,,,,,,,,,-578,-578,,-578',
'-578,-578,-578,-578,,,,,,,,,,,,,-578,,,,,,,-578,-578,-578,,,-578,-578',
'-578,,-578,,,,,,-578,,,,-578,,,-578,,,,,261,-578,-578,-578,,-578,-578',
'-578,-578,-578,,,,,,,,,,,,,,-578,,,,,,,,,,,,,-578,,,,,-578,,,-578,,',
',,,,-578,,,,,261,-578,,,,,,,,,,,,,,,,,,,,,,-578,,,,,,69,70,71,,57,,',
'-578,63,64,,,-578,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,644,,271,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,12',
'57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,381,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,',
',,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,',
',296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,',
',,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,644,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,397,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,',
',221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,731,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,601,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,,245,246,,216,,,222,,,58,59,,,60,,,228,,234,46,230,229,226,227',
'238,236,232,221,233,,,,85,79,81,82,83,84,,,,80,86,,249,,,,,,62,166,177',
'167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175,164',
'178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,,,,,',
'161,168,159,160,156,157,158,118,120,117,,119,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,378,377,119,,379,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,',
',,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166,177',
'167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175,164',
'178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,,,,,',
'161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,,,155,166,177,167,190,163,183',
'173,172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176',
'169,,,,185,192,187,353,352,354,351,162,181,180,,,,,,161,168,159,160',
'348,349,350,346,120,91,90,347,,93,,,,,,,151,152,,148,130,131,132,139',
'136,138,,,133,134,,,,153,154,140,141,,,,,,360,,,,,,,,145,144,,129,150',
'147,146,142,143,137,135,127,149,128,656,417,155,,657,,,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,',
',,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,653,410,155',
',654,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154',
'140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127',
'149,128,413,417,155,,412,,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,622,417,155,,623,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,973,417,155,,974,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,703,417,155,,704,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,701,410,155,,702,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,468,410,155,,469,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,468,410,155,,469,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,468,410,155,,469,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,808,417,155,,809,,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,620,410',
'155,,621,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,971,410,155,,972,,,,,,,,,151,152,,148,130,131,132,139,136',
'138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147',
'146,142,143,137,135,127,149,128,622,417,155,,623,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,',
',145,144,,129,150,147,146,142,143,137,135,127,149,128,406,410,155,,407',
',,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,968,417,155,,967,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,620,410,155,,621,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227',
'238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,',
',,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228',
',234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247',
'248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226',
'227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232',
',233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246',
',,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229',
'226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236',
'232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245',
'246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,211,249,245,246,,,,,,,',
',,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,,,,,,,,,,,,,,,,249' ]
        racc_action_table = arr = ::Array.new(23729, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'412,876,374,973,971,855,297,412,412,412,722,722,436,412,412,570,412',
'22,751,290,317,422,527,317,466,335,290,28,986,805,77,562,43,43,372,290',
'412,412,77,412,412,412,412,412,328,669,20,20,669,336,555,702,701,22',
'806,329,972,61,466,318,436,414,318,374,374,374,751,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,973,554,412,412,412,807,412,430',
'430,405,412,28,297,412,664,664,372,404,412,722,412,339,412,412,412,412',
'412,412,412,704,412,654,412,28,876,653,973,971,855,876,570,973,971,855',
'89,412,412,527,412,335,412,89,89,89,412,562,89,89,89,570,89,986,805',
'61,570,805,986,805,89,555,89,89,89,336,555,702,701,328,806,401,89,89',
'328,89,89,89,89,89,329,972,703,475,17,329,972,704,214,430,654,17,398',
'554,653,369,664,807,554,770,17,730,807,89,89,89,89,89,89,89,89,89,89',
'89,89,89,89,475,339,89,89,89,364,89,89,654,704,89,654,653,89,89,653',
'89,654,89,214,89,653,89,89,89,89,89,89,89,720,89,703,89,366,720,770',
'366,589,476,369,369,369,770,564,565,89,89,89,89,92,89,770,215,89,89',
'5,92,92,92,636,5,92,92,92,48,92,364,364,364,770,703,48,476,92,352,92',
'92,92,443,278,48,352,656,566,278,92,92,566,92,92,92,92,92,636,366,366',
'564,565,589,589,215,217,322,564,565,322,395,589,564,565,443,621,564',
'565,443,443,92,92,92,92,92,92,92,92,92,92,92,92,92,92,564,565,92,92',
'92,656,92,92,356,393,92,362,656,92,92,356,92,656,92,217,92,656,92,92',
'92,92,92,92,92,621,92,629,92,629,629,629,620,629,926,656,926,956,956',
'808,213,92,92,92,92,623,92,213,407,92,92,371,623,623,623,735,213,623',
'623,623,872,623,872,872,872,629,872,368,362,362,362,623,623,623,629',
'629,629,629,332,753,620,623,623,332,623,623,623,623,623,406,407,685',
'808,685,685,685,407,685,354,808,648,754,353,351,808,354,648,629,808',
'353,351,755,623,623,623,623,623,623,623,623,623,623,623,623,623,623',
'808,289,623,623,623,406,623,623,289,757,623,406,872,623,623,758,623',
'289,623,761,623,340,623,623,623,623,623,623,623,41,623,982,623,982,982',
'982,602,982,921,338,921,921,921,685,921,623,623,623,623,413,623,334',
'350,623,623,117,413,413,413,350,117,117,413,413,932,413,932,932,932',
'982,932,41,27,769,413,349,921,41,602,27,982,982,349,333,602,413,413',
'348,413,413,413,413,413,773,348,776,18,935,347,935,935,935,932,935,541',
'347,541,541,541,777,541,932,932,932,932,781,413,413,413,413,413,413',
'413,413,413,413,413,413,413,413,346,306,413,413,413,935,413,346,18,782',
'413,783,541,413,18,784,935,935,413,785,413,541,413,413,413,413,413,413',
'413,788,413,413,413,789,40,796,791,796,796,796,793,796,442,306,622,413',
'413,795,413,306,413,622,622,622,413,323,622,622,622,674,622,674,674',
'674,798,674,302,302,801,622,622,622,622,796,442,320,40,319,442,442,622',
'622,40,622,622,622,622,622,954,311,954,954,954,815,954,885,13,674,815',
'794,885,794,794,794,811,794,674,674,674,674,308,622,622,622,622,622',
'622,622,622,622,622,622,622,622,622,715,954,622,622,622,715,622,622',
'716,716,622,307,794,622,622,816,622,817,622,818,622,794,622,622,622',
'622,622,622,622,827,622,622,622,950,828,950,950,950,303,950,327,327',
'461,301,291,622,622,622,622,56,622,291,296,622,622,295,56,56,56,292',
'291,56,56,56,573,56,573,573,573,1,573,950,690,690,461,56,56,56,461,461',
'461,461,950,950,841,56,56,842,56,56,56,56,56,919,286,919,919,919,847',
'919,315,315,573,573,682,285,682,682,682,849,682,573,573,573,573,850',
'56,56,56,56,56,56,56,56,56,56,56,56,56,56,284,919,56,56,56,282,272,56',
'269,268,56,257,682,56,56,254,56,874,56,223,56,682,56,56,56,56,56,56',
'56,878,56,937,56,937,937,937,293,937,647,647,647,647,647,293,309,56',
'56,56,56,418,56,309,293,56,879,219,418,418,418,218,309,418,418,418,528',
'418,528,528,528,937,528,462,884,216,418,418,418,418,723,723,937,937',
'723,723,723,418,418,892,418,418,418,418,418,873,893,873,873,873,894',
'873,895,897,528,462,901,903,197,462,462,462,462,528,528,528,528,988',
'418,418,418,418,418,418,418,418,418,418,418,418,418,418,975,873,418',
'418,418,337,976,418,911,914,418,915,337,418,418,916,418,917,418,918',
'418,337,418,418,418,418,418,418,418,920,418,418,418,719,115,719,719',
'719,84,719,83,69,47,42,502,418,418,418,418,417,418,502,39,418,944,25',
'417,417,417,3,502,417,417,417,890,417,890,890,890,19,890,719,16,955',
'417,417,417,417,960,961,719,719,719,719,962,417,417,963,417,417,417',
'417,417,568,657,280,280,280,280,280,568,657,890,890,964,965,657,966',
'967,568,657,890,890,890,890,968,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,614,707,417,417,417,900,608,417,707,603,417,599',
'900,417,417,624,417,707,417,595,417,900,417,417,417,417,417,417,417',
'626,417,417,417,908,593,909,910,643,641,557,908,556,909,910,650,417',
'417,417,417,908,417,909,910,417,927,927,927,927,927,927,652,551,912',
'927,927,549,655,546,927,912,927,927,927,927,927,927,927,970,912,658',
'659,539,927,927,927,927,927,927,927,532,760,927,760,760,760,662,760',
'927,927,663,927,927,927,927,927,927,927,927,927,809,927,927,927,531',
'927,927,809,927,927,927,948,809,665,530,518,809,868,948,868,868,868',
'974,868,517,673,516,948,507,974,927,503,498,927,974,496,927,927,974',
'684,927,493,927,687,692,866,927,866,866,866,697,866,492,700,927,868',
'478,477,447,927,927,927,927,927,927,446,868,868,927,927,922,922,922',
'922,922,922,15,927,445,922,922,444,432,866,922,,922,922,922,922,922',
'922,922,,866,866,,,922,922,922,922,922,922,922,,899,922,899,899,899',
',899,922,922,,922,922,922,922,922,922,922,922,922,,922,922,922,,922',
'922,,922,922,922,9,9,9,9,9,,864,,864,864,864,,864,491,491,491,491,491',
',922,,,922,,,922,922,,,922,,922,,,,922,861,,861,861,861,,861,922,864',
',,,922,922,922,922,922,922,,864,864,922,922,803,803,803,803,803,803',
',922,,803,803,,,,803,861,803,803,803,803,803,803,803,,861,861,861,861',
'803,803,803,803,803,803,803,,,803,,,,,,803,803,,803,803,803,803,803',
'803,803,803,803,,803,803,803,,803,803,,803,803,803,,,,,,,839,,839,839',
'839,,839,,,,,,,803,,,803,,,803,803,,,803,,803,,,,803,836,,836,836,836',
',836,803,839,,,,803,803,803,803,803,803,,839,839,803,803,724,724,724',
'724,724,724,,803,,724,724,,,,724,836,724,724,724,724,724,724,724,,836',
'836,836,836,724,724,724,724,724,724,724,,,724,,,,,,724,724,,724,724',
'724,724,724,724,724,724,724,,724,724,724,,724,724,,724,724,724,,,,,',
',679,,679,679,679,,679,,,,,,,724,,,724,,,724,724,,,724,,724,,,,724,834',
',834,834,834,,834,724,679,,,,724,724,724,724,724,724,,679,679,724,724',
'387,387,387,387,387,387,,724,,387,387,,,,387,834,387,387,387,387,387',
'387,387,,834,834,834,834,387,387,387,387,387,387,387,,,387,,,,,,387',
'387,387,387,387,387,387,387,387,387,387,387,,387,387,387,,387,387,,387',
'387,387,,,,,,,,,,,,,,,,,,,,387,,,387,,,387,387,,,387,,387,,,,387,676',
',676,676,676,,676,387,,,,,387,387,387,387,387,387,,,,387,387,314,314',
'314,314,314,314,,387,,314,314,,,,314,676,314,314,314,314,314,314,314',
',676,676,676,676,314,314,314,314,314,314,314,,,314,,,,,,314,314,,314',
'314,314,314,314,314,314,314,314,,314,314,314,,314,314,,314,314,314,451',
'451,451,451,451,451,451,,,451,451,,,,,,451,451,,314,,,314,,,314,314',
',,314,,314,451,,451,314,451,451,451,451,451,451,451,314,451,,,,314,314',
'314,314,314,314,,,,314,314,812,812,812,812,812,812,,314,,812,812,,,',
'812,,812,812,812,812,812,812,812,,,,,,812,812,812,812,812,812,812,,',
'812,,,,,,812,812,,812,812,812,812,812,812,812,812,812,,812,812,812,',
'812,812,,812,812,812,464,464,464,464,464,464,464,464,,464,464,,,,,,464',
'464,,812,,,812,,,812,812,,,812,,812,464,,464,812,464,464,464,464,464',
'464,464,812,464,,,,812,812,812,812,812,812,,,,812,812,907,907,907,907',
'907,907,,812,,907,907,,,,907,,907,907,907,907,907,907,907,,,,,,907,907',
'907,907,907,907,907,,,907,,,,,,907,907,,907,907,907,907,907,907,907',
'907,907,,907,907,907,,907,907,,907,907,907,463,463,463,463,463,463,463',
',,463,463,,,,,,463,463,,907,,,907,,,907,907,,,907,,907,463,,463,907',
'463,463,463,463,463,463,463,907,463,,,,907,907,907,907,907,907,,,,907',
'907,199,199,199,199,199,199,,907,,199,199,,,,199,,199,199,199,199,199',
'199,199,,,,,,199,199,199,199,199,199,199,,,199,,,,,,199,199,,199,199',
'199,199,199,199,199,199,199,,199,199,199,,199,199,,199,199,199,441,441',
'441,441,441,441,441,441,441,441,441,,441,441,,,441,441,,199,,,199,,',
'199,199,,,199,,199,441,,441,199,441,441,441,441,441,441,441,199,441',
',,,199,199,199,199,199,199,,,,199,199,763,763,763,763,763,763,,199,',
'763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763,763,763,763,763',
'763,763,,,763,,,,,,763,763,,763,763,763,763,763,763,763,763,763,,763',
'763,763,,763,763,,763,763,763,440,440,440,440,440,440,440,440,440,440',
'440,,440,440,,,440,440,,763,,,763,,,763,763,,,763,,763,440,,440,763',
'440,440,440,440,440,440,440,763,440,,,,763,763,763,763,763,763,,,,763',
'763,553,553,553,553,553,553,,763,,553,553,,,,553,,553,553,553,553,553',
'553,553,,,,,,553,553,553,553,553,553,553,,,553,,,,,,553,553,,553,553',
'553,553,553,553,553,553,553,,553,553,553,,553,553,,553,553,553,460,460',
'460,460,460,460,460,,,460,460,,,,,,460,460,,553,,,553,,,553,553,,,553',
',553,460,,460,553,460,460,460,460,460,460,460,553,460,,,,553,553,553',
'553,553,553,,,,553,553,288,288,288,288,288,288,,553,,288,288,,,,288',
',288,288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288',
',,,,,288,288,,288,288,288,288,288,288,288,288,288,,288,288,288,,288',
'288,,288,288,288,459,459,459,459,459,459,459,,,459,459,,,,,,459,459',
',288,,,288,,,288,288,,,288,,288,459,,459,288,459,459,459,459,459,459',
'459,288,459,,,,288,288,288,288,288,288,,,,288,288,848,848,848,848,848',
'848,,288,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848',
'848,848,848,848,,,848,,,,,,848,848,,848,848,848,848,848,848,848,848',
'848,,848,848,848,,848,848,,848,848,848,458,458,458,458,458,458,458,',
',458,458,,,,,,458,458,,848,,,848,,,848,848,,,848,,848,458,,458,848,458',
'458,458,458,458,458,458,848,458,,,,848,848,848,848,848,848,,,,848,848',
'718,718,718,718,718,718,,848,,718,718,,,,718,,718,718,718,718,718,718',
'718,,,,,,718,718,718,718,718,718,718,,,718,,,,,,718,718,,718,718,718',
'718,718,718,718,718,718,,718,718,718,,718,718,,718,718,718,457,457,457',
'457,457,457,457,,,457,457,,,,,,457,457,,718,,,718,,,718,718,,,718,,718',
'457,,457,718,457,457,457,457,457,457,457,718,457,,,,718,718,718,718',
'718,718,,,,718,718,765,765,765,765,765,765,,718,,765,765,,,,765,,765',
'765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,,,765,,,,,',
'765,765,,765,765,765,765,765,765,765,765,765,,765,765,765,,765,765,',
'765,765,765,456,456,456,456,456,456,456,,,456,456,,,,,,456,456,,765',
',,765,,,765,765,,,765,,765,456,,456,765,456,456,456,456,456,456,456',
'765,456,,,,765,765,765,765,765,765,,,,765,765,766,766,766,766,766,766',
',765,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766,766,766',
'766,766,766,,,766,,,,,,766,766,,766,766,766,766,766,766,766,766,766',
',766,766,766,,766,766,,766,766,766,455,,,,,,,,,,,,,,,,455,455,,766,',
',766,,,766,766,,,766,,766,455,,455,766,455,455,455,455,,,455,766,455',
',,,766,766,766,766,766,766,,,,766,766,2,2,2,2,2,2,,766,,2,2,,,,2,,2',
'2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
'2,,2,2,,2,2,2,454,,,,,,,,,,,,,,,,454,454,,2,,,2,,,2,2,,,2,,2,454,,454',
'2,454,454,454,454,,,454,2,454,,,,2,2,2,2,2,2,,,,2,2,852,852,852,852',
'852,852,,2,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852',
'852,852,852,852,852,,,852,,,,,,852,852,,852,852,852,852,852,852,852',
'852,852,,852,852,852,,852,852,,852,852,852,453,,,,,,,,,,,,,,,,453,453',
',852,,,852,,,852,852,,,852,,852,453,,453,852,453,453,453,453,,,453,852',
'453,,,,852,852,852,852,852,852,,,,852,852,283,283,283,283,283,283,,852',
',283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283',
'283,283,,,283,,,,,,283,283,,283,283,283,283,283,283,283,283,283,,283',
'283,283,,283,283,,283,283,283,452,,,,,,,,,,,,,,,,452,452,,283,,,283',
',,283,283,,,283,,283,452,,452,283,452,452,452,452,,,452,283,452,,,,283',
'283,283,283,283,283,,,,283,283,222,222,222,222,222,222,,283,,222,222',
',,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222',
',,222,,,,,,222,222,,222,222,222,222,222,222,222,222,222,,222,222,222',
',222,222,,222,222,222,450,,,,,,,,,,,,,,,,450,450,,222,,,222,,,222,222',
',,222,,222,450,,,222,450,450,450,450,,,,222,,,,,222,222,222,222,222',
'222,,,,222,222,550,550,550,550,550,550,,222,,550,550,,,,550,,550,550',
'550,550,550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,550',
'550,,550,550,550,550,550,550,550,550,550,,550,550,550,,550,550,,550',
'550,550,449,,,,,,,,,,,,,,,,449,449,,550,,,550,,,550,550,,,550,,550,449',
',449,550,449,449,449,449,,,,550,,,,,550,550,550,550,550,550,,,,550,550',
'881,881,881,881,881,881,,550,,881,881,,,,881,,881,881,881,881,881,881',
'881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,881,881,,881,881,881',
'881,881,881,881,881,881,,881,881,881,,881,881,,881,881,881,448,,,,,',
',,,,,,,,,,448,448,,881,,,881,,,881,881,,,881,,881,448,,448,881,448,448',
'448,448,,,,881,,,,,881,881,881,881,881,881,,,,881,881,775,775,775,775',
'775,775,,881,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775',
'775,775,775,775,775,,,775,,,,,,775,775,,775,775,775,775,775,775,775',
'775,775,,775,775,775,,775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,',
'775,,,775,775,,,775,,775,,,,775,,,,,,,,775,,,,,775,775,775,775,775,775',
',,,775,775,671,671,671,671,671,671,,775,,671,671,,,,671,,671,671,671',
'671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,,671,671',
',671,671,671,671,671,671,671,671,671,,671,671,671,,671,671,,671,671',
'671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,671,,,,671,,,,,,,',
'671,,,,,671,671,671,671,671,671,,,,671,671,672,672,672,672,672,672,',
'671,,672,672,,,,672,,672,672,672,672,672,672,672,,,,,,672,672,672,672',
'672,672,672,,,672,,,,,,672,672,,672,672,672,672,672,672,672,672,672',
',672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,,,,,,,,672,,,672,,,672',
'672,,,672,,672,,,,672,,,,,,,,672,,,,,672,672,672,672,672,672,,,,672',
'672,717,717,717,717,717,717,,672,,717,717,,,,717,,717,717,717,717,717',
'717,717,,,,,,717,717,717,717,717,717,717,,,717,,,,,,717,717,,717,717',
'717,717,717,717,717,717,717,,717,717,717,,717,717,,717,717,717,,,,,',
',,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,717,,,,717,,,,,,,,717,,,,,717',
'717,717,717,717,717,,,,717,717,35,35,35,35,35,35,,717,,35,35,,,,35,',
'35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,35,35,,35,35',
'35,35,35,35,35,35,35,,35,35,35,,35,35,,35,35,35,,,,,,,,,,,,,,,,,,,,35',
',,35,,,35,35,,,35,,35,,,,35,,,,,,,,35,,,,,35,35,35,35,35,35,,,,35,35',
'931,931,931,931,931,931,,35,,931,931,,,,931,,931,931,931,931,931,931',
'931,,,,,,931,931,931,931,931,931,931,,,931,,,,,,931,931,,931,931,931',
'931,931,931,931,931,931,,931,931,931,,931,931,,931,931,931,,,,,,,,,',
',,,,,,,,,,931,,,931,,,931,931,,,931,,931,,,,931,,,,,,,,931,,,,,931,931',
'931,931,931,931,,,,931,931,802,802,802,802,802,802,,931,,802,802,,,',
'802,,802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,',
'802,,,,,,802,802,,802,802,802,802,802,802,802,802,802,,802,802,802,',
'802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,802',
',,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,930,930,930',
'930,930,930,,802,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930',
'930,930,930,930,930,930,,,930,,,,,,930,930,,930,930,930,930,930,930',
'930,930,930,,930,930,930,,930,930,,930,930,930,,,,,,,,,,,,,,,,,,,,930',
',,930,,,930,930,,,930,,930,,,,930,,,,,,,,930,,,,,930,930,930,930,930',
'930,,,,930,930,208,208,208,,208,,,930,208,208,,,,208,,208,208,208,208',
'208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208',
'208,208,208,208,208,208,,208,208,208,,208,208,,208,208,208,,,,,,,,,',
',,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,208,,,,,208,208',
'208,208,208,208,,,,208,208,209,209,209,,209,,,208,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
',209,,,209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209,209',
'209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209',
',,,,209,209,209,209,209,209,,,,209,209,210,210,210,,210,,,209,210,210',
',,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210',
',,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210',
'210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210',
',,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,210,58,58,58,,58,',
'210,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58',
',,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,,58,58,58,,,,,,',
',,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58,58',
'58,58,,,,58,58,604,604,604,,604,,,58,604,604,,,,604,,604,604,604,604',
'604,604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604',
'604,604,604,604,604,604,604,604,604,604,,604,604,,604,604,604,,,,,,',
',,,,,,,,,,,,,604,,,604,,,604,604,,,604,,604,,604,,604,,,,,,,,604,,,',
',604,604,604,604,604,604,,,,604,604,605,605,605,,605,,,604,605,605,',
',,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605,605',
',,605,,,,,,,605,,,605,605,605,605,605,605,605,605,605,605,605,605,,605',
'605,,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,,,605',
',605,,,,,,,,605,,,,,605,605,605,605,605,605,,,,605,605,606,606,606,',
'606,,,605,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606',
'606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606,606,,606',
'606,606,,606,606,,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606',
',,606,,,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,607',
'607,607,,607,,,606,607,607,,,,607,,607,607,607,607,607,607,607,,,,,',
'607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607',
'607,607,,607,607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,',
'607,,,607,607,,,607,,,,,,607,,,,,,,,607,,,,,607,607,607,607,607,607',
',,,607,607,612,612,612,,612,,,607,612,612,,,,612,,612,612,612,612,612',
'612,612,,,,,,612,612,612,612,612,612,612,,,612,,,,,,,612,,,612,612,612',
'612,612,612,612,612,,612,612,612,,612,612,,612,612,612,,,,,,,,,,,,,',
',,,,,,612,,,612,,,612,612,,,612,,,,,,612,,,,,,,,612,,,,,612,612,612',
'612,612,612,,,,612,612,613,613,613,,613,,,612,613,613,,,,613,,613,613',
'613,613,613,613,613,,,,,,613,613,613,613,613,613,613,,,613,,,,,,,613',
',,613,613,613,613,613,613,613,613,,613,613,613,,613,613,,613,613,613',
',,,,,,,,,,,,,,,,,,,613,,,613,,,613,613,,,613,,,,,,613,,,,,,,,613,,,',
',613,613,613,613,613,613,,,,613,613,616,616,616,,616,,,613,616,616,',
',,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616,616,616,616',
',,616,,,,,,,616,,,616,616,616,616,616,616,616,616,,616,616,616,,616',
'616,,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,,,,,616',
',,,,,,,616,,,,,616,616,616,616,616,616,,,,616,616,617,617,617,,617,',
',616,617,617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617',
'617,617,617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617',
'617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617',
',,,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,23,23,23',
',23,,,617,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,',
',,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23',
'23,23,23,,,,23,23,945,945,945,,945,,,23,945,945,,,,945,,945,945,945',
'945,945,945,945,,,,,,945,945,945,945,945,945,945,,,945,,,,,,,945,,,945',
'945,945,945,945,945,945,945,945,945,945,945,,945,945,,945,945,945,,',
',,,,,,,,,,,,,,,,,945,,,945,,,945,945,,,945,,945,,945,,945,,,,,,,,945',
',,,29,945,945,945,945,945,945,29,29,29,945,945,29,29,29,,29,,,945,,',
',,,29,29,29,,,,,,,,,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,,,29',
'29,29,29,29,29,29,29,29,29,29,29,29,29,,,29,29,29,,,29,,29,29,,,29,29',
',29,,29,,29,,29,29,29,29,29,29,29,,29,29,29,,,,,,,,,,,,30,29,29,,29',
',29,30,30,30,,,30,30,30,326,30,326,326,326,,326,,,,,30,30,,,,,,,,,30',
'30,,30,30,30,30,30,,,,,,,,,,326,326,,,,,,,,326,326,326,326,,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30',
',30,,30,,30,30,30,30,30,30,30,,30,,30,,,,,,,,,,,,,30,30,,30,,30,31,31',
'31,,31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31',
',,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31',
',,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31',
'31,31,31,31,31,,,,31,31,32,32,32,,32,,,31,32,32,,,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32',
'32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,',
',32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,33,33,33,,33',
',,32,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,',
',,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33',
'33,33,33,33,,,,33,33,36,36,36,,36,,,33,36,36,,,,36,,36,36,36,36,36,36',
'36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36',
',36,36,36,,36,36,,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,',
',,,,,,,,,,,,,,,36,36,36,36,36,36,,,,36,36,37,37,37,,37,,,36,37,37,,',
',37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,',
'37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37',
',,37,,,37,37,,,37,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,44,44',
'44,37,44,,,37,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44',
'44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,,44,44',
'44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,44,,,,,44',
'44,44,44,44,44,,,,44,44,45,45,45,,45,,,44,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,46,46,46,,46,,,45,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,59,59,59,,59,,,46,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59',
'59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59',
',59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,',
',,,,,,59,,,,,59,59,59,59,59,59,,,,59,59,60,60,60,,60,,,59,60,60,,,,60',
',60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60',
'60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60',
',,60,,,60,60,,,60,,,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,63',
'63,63,,63,,,60,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63',
'63,63,63,63,63,,,,63,63,64,64,64,,64,,,63,64,64,,,,64,,64,64,64,64,64',
'64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64',
'64,,64,64,64,,64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64',
',,,,,64,,,,,,,,64,,,,,64,64,64,64,64,64,,,,64,64,67,67,67,,67,,,64,67',
'67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,625',
',67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,625,625,625',
'625,625,625,625,625,625,625,625,,625,625,,,625,625,,67,,,67,,,67,67',
',,67,,,625,,625,67,625,625,625,625,625,625,625,67,625,,,,67,67,67,67',
'67,67,,,,67,67,67,625,68,68,68,67,68,67,,,68,68,,,,68,,68,68,68,68,68',
'68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68',
'68,,68,68,68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68',
',,,,,,,,,,,,,,,,68,68,68,68,68,68,,,,68,68,105,105,105,105,105,,,68',
'105,105,,,,105,,105,105,105,105,105,105,105,,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,',
'105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105',
'105,,,105,,105,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105',
'105,110,110,110,,110,105,,105,110,110,,,,110,,110,110,110,110,110,110',
'110,,,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110,110',
'110,110,110,110,,110,110,110,,110,110,,110,110,110,,,,,,,,,,,,,,,,,',
',,110,,,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110,110',
'110,110,,,,110,110,111,111,111,,111,,,110,111,111,,,,111,,111,111,111',
'111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,,111,,,111',
'111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111,111,,,,,',
',,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111,,,,,111',
'111,111,111,111,111,,,,111,111,112,112,112,,112,,,111,112,112,,,,112',
',112,112,112,112,112,112,112,,,,,,112,112,112,112,112,112,112,,,112',
',,,,,,112,,,112,112,112,112,112,112,112,112,,112,112,112,,112,112,,112',
'112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112,,,112,,,,,,112,,,,,,',
',112,,,,,112,112,112,112,112,112,,,,112,112,113,113,113,,113,,,112,113',
'113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113',
'113,,,113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113,113,',
'113,113,,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,',
',,,113,,,,,,,,113,,,,,113,113,113,113,113,113,,,,113,113,114,114,114',
'114,114,,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114,114',
'114,114,114,114,114,,,114,,,,,,114,114,,114,114,114,114,114,114,114',
'114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,',
'114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114',
',,,114,114,200,200,200,,200,,,114,200,200,,,,200,,200,200,200,200,200',
'200,200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200',
'200,200,200,200,200,,200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,',
',,,,,,200,,,200,,,200,200,,,200,,200,,,,200,,,,,,,,200,,,,,200,200,200',
'200,200,200,,,,200,200,201,201,201,,201,,,200,201,201,,,,201,,201,201',
'201,201,201,201,201,,,,,,201,201,201,201,201,201,201,,,201,,,,,,,201',
',,201,201,201,201,201,201,201,201,,201,201,201,,201,201,,201,201,201',
',,,,,,,,,,,,,,,,,,,201,,,201,,,201,201,,,201,,,,,,201,,,,,,,,201,,,',
',201,201,201,201,201,201,,,,201,201,202,202,202,,202,,,201,202,202,',
',,202,,202,202,202,202,202,202,202,,,,,,202,202,202,202,202,202,202',
',,202,,,,,,,202,,,202,202,202,202,202,202,202,202,202,202,202,202,,202',
'202,,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,,202,202,,,202,,202,',
'202,,202,,,,,,,,202,,,,,202,202,202,202,202,202,,,,202,202,205,205,205',
',205,,,202,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,205,205,,,,205,205',
'206,206,206,,206,,,205,206,206,,,,206,,206,206,206,206,206,206,206,',
',,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,206,,,,206,,,,,,,,206,,,,,206,206,206,206,206',
'206,,,,206,206,207,207,207,,207,,,206,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,,,,,,,,,',
',,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207',
'207,207,207,207,,,,207,207,880,880,880,,880,,,207,880,880,,,,880,,880',
'880,880,880,880,880,880,,,,,,880,880,880,880,880,880,880,,,880,,,,,',
',880,,,880,880,880,880,880,880,880,880,,880,880,880,,880,880,,880,880',
'880,,,,,,,,,,,,,,,,,,,,880,,,880,,,880,880,,,880,,880,,,,880,,,,,,,',
'880,,,,,880,880,880,880,880,880,,,,880,880,221,221,221,,221,,,880,221',
'221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221',
'221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,',
'221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,',
',,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,224,224,224',
',224,,,221,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224',
'224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224',
',224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224',
'224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224',
'225,225,225,,225,,,224,225,225,,,,225,,225,225,225,225,225,225,225,',
',,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225',
'225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225',
',,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225',
',,,225,225,226,226,226,,226,,,225,226,226,,,,226,,226,226,226,226,226',
'226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226',
'226,226,226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,',
',,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226',
'226,226,226,,,,226,226,227,227,227,,227,,,226,227,227,,,,227,,227,227',
'227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227',
',,227,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,227',
',,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,',
',227,227,227,227,227,227,,,,227,227,228,228,228,,228,,,227,228,228,',
',,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228',
',,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228',
',,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229,,229,',
',228,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229',
'229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229',
'229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229',
',,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230',
',230,,,229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230',
',230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230',
'230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230',
'231,231,231,,231,,,230,231,231,,,,231,,231,231,231,231,231,231,231,',
',,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231',
'231,231,231,,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231',
',,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231',
',,,231,231,232,232,232,,232,,,231,232,232,,,,232,,232,232,232,232,232',
'232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232',
'232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,',
',,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232',
'232,232,232,,,,232,232,233,233,233,,233,,,232,233,233,,,,233,,233,233',
'233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233',
',,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233',
',,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,',
',233,233,233,233,233,233,,,,233,233,234,234,234,,234,,,233,234,234,',
',,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234',
',,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,,234',
'234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234',
',,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,235,235,235,,235,',
',234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235',
'235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235',
'235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235',
',,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236',
',236,,,235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236',
'236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236',
',236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236',
'236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236',
'237,237,237,,237,,,236,237,237,,,,237,,237,237,237,237,237,237,237,',
',,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237',
'237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237',
',,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,238,238,238,,238,,,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,',
',,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238',
'238,238,238,,,,238,238,239,239,239,,239,,,238,239,239,,,,239,,239,239',
'239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239',
',,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239',
',,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,',
',239,239,239,239,239,239,,,,239,239,240,240,240,,240,,,239,240,240,',
',,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240',
',,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240',
'240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240',
',,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,241,241,241,,241,',
',240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241',
'241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241',
'241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241',
',,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,242,242,242',
',242,,,241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242',
'242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242',
',242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242',
'242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242',
'243,243,243,,243,,,242,243,243,,,,243,,243,243,243,243,243,243,243,',
',,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243',
',,,243,243,244,244,244,,244,,,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,',
',,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244',
'244,244,244,,,,244,244,245,245,245,,245,,,244,245,245,,,,245,,245,245',
'245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245',
',,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245',
',,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,',
',245,245,245,245,245,245,,,,245,245,246,246,246,,246,,,245,246,246,',
',,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246',
',,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246',
'246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246',
',,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,247,247,247,,247,',
',246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247',
'247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247',
'247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247',
',,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,248,248,248',
',248,,,247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248',
'249,249,249,,249,,,248,249,249,,,,249,,249,249,249,249,249,249,249,',
',,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,255,255,255,,255,,,249,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,255,255,255,255,,255,255,,255,255,255,,,,,,,,,,',
',,,,,,,,,255,,,255,,,255,255,,,255,,255,,255,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,261,261,261,,261,,,255,261,261,,,,261',
',261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261',
',,,,,,261,,,261,261,261,261,261,261,261,261,261,261,261,261,,261,261',
',261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,261,,261',
',261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,264,264,264,',
'264,,,261,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,264',
'264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264',
'264,,,264,,264,,264,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264',
'264,264,271,271,271,,271,,264,,271,271,,,,271,,271,271,271,271,271,271',
'271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271',
'271,271,271,271,,271,271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,',
',,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271',
'271,271,,,,271,271,273,273,273,,273,,,271,273,273,,,,273,,273,273,273',
'273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273',
'273,273,273,273,273,273,273,,273,273,273,,273,273,,273,273,273,,,,,',
',,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273',
'273,273,273,273,273,,,,273,273,275,275,275,,275,,,273,275,275,,,,275',
',275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275',
',,,,,,275,,,275,275,275,275,275,275,275,275,,275,275,275,,275,275,,275',
'275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,',
',275,,,,,275,275,275,275,275,275,,,,275,275,856,856,856,,856,,,275,856',
'856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856,856,856,856,856',
'856,,,856,,,,,,,856,,,856,856,856,856,856,856,856,856,,856,856,856,',
'856,856,,,,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,,,,,,,',
',,,,,,,,,,856,856,856,856,856,856,,,,856,856,281,281,281,281,281,,,856',
'281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,281,281,,281,281,281,281,281,281,281,281,281,,281',
'281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281',
',,281,,281,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281',
'846,846,846,,846,,,281,846,846,,,,846,,846,846,846,846,846,846,846,',
',,,,846,846,846,846,846,846,846,,,846,,,,,,,846,,,846,846,846,846,846',
'846,846,846,,846,846,846,,846,846,,,,846,,,,,,,,,,,,,,,,,,,,846,,,846',
',,846,846,,,846,,,,,,,,,,,,,,,,,,,846,846,846,846,846,846,,,,846,846',
'287,287,287,,287,,,846,287,287,,,,287,,287,287,287,287,287,287,287,',
',,,,287,287,287,287,287,287,287,,,287,,,,,,425,287,,,287,287,287,287',
'287,287,287,287,,287,287,287,,287,287,,,,287,,425,425,425,425,425,425',
'425,425,425,425,425,,425,425,,,425,425,287,,,287,,,287,287,,,287,,,',
'425,,425,,425,425,425,425,425,425,425,,425,,,287,287,287,287,287,287',
',,,287,287,,,425,287,425,,,287,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8',
',,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8',
'8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8',
'8,,,,8,8,832,832,832,,832,,,8,832,832,,,,832,,832,832,832,832,832,832',
'832,,,,,,832,832,832,832,832,832,832,,,832,,,,,,,832,,,832,832,832,832',
'832,832,832,832,,832,832,832,,832,832,,832,832,832,,,,,,,,,,,,,,,,,',
',,832,,,832,,,832,832,,,832,,,,,,832,,,,,,,,832,,,,,832,832,832,832',
'832,832,,,,832,832,831,831,831,,831,,,832,831,831,,,,831,,831,831,831',
'831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,,831,,,831',
'831,831,831,831,831,831,831,831,831,831,831,,831,831,,831,831,831,,',
',,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,831,,831,,,,,,,,831,,',
',,831,831,831,831,831,831,,,,831,831,304,304,304,,304,,,831,304,304',
',,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304',
',,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,,304',
'304,,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,,,,,,,',
',,,,,,304,304,304,304,304,304,,,,304,304,813,813,813,,813,,,304,813',
'813,,,,813,,813,813,813,813,813,813,813,,,,,,813,813,813,813,813,813',
'813,,,813,,,,,,,813,,,813,813,813,813,813,813,813,813,,813,813,813,',
'813,813,,813,813,813,,,,,,,,,,,,,,,,,,,,813,,,813,,,813,813,,,813,,',
',,,813,,,,,,,,813,,,,,813,813,813,813,813,813,,,,813,813,313,313,313',
',313,,,813,313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313',
'313,313,313,313,313,,,313,,,,,,,313,,,313,313,313,313,313,313,313,313',
',313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,313',
',313,313,,,313,,,,,,313,,,,,,,,313,,,,,313,313,313,313,313,313,,,,313',
'313,800,800,800,,800,,,313,800,800,,,,800,,800,800,800,800,800,800,800',
',,,,,800,800,800,800,800,800,800,,,800,,,,,,,800,,,800,800,800,800,800',
'800,800,800,,800,800,800,,800,800,,800,800,800,,,,,,,,,,,,,,,,,,,,800',
',,800,,,800,800,,,800,,,,,,800,,,,,,,,800,,,,,800,800,800,800,800,800',
',,,800,800,330,330,330,,330,,,800,330,330,,,,330,,330,330,330,330,330',
'330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330',
'330,330,330,330,330,,330,330,330,,330,330,,330,330,330,,,,,,,,,,,,,',
',,,,,,330,,,330,,,330,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330',
'330,330,330,,,,330,330,331,331,331,,331,,,330,331,331,,,,331,,331,331',
'331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,,331',
',,331,331,331,331,331,331,331,331,,331,331,331,,331,331,,331,331,331',
',,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,,,,331,,,,,,,,331,,,',
',331,331,331,331,331,331,,,,331,331,343,343,343,,343,,,331,343,343,',
',,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343',
',,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343',
'343,,,,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,,,,,,,',
',,,,,,343,343,343,343,343,343,,,,343,343,345,345,345,,345,,,343,345',
'345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345',
'345,,,345,,,,,,,345,,,345,345,345,345,345,345,345,345,,345,345,345,',
'345,345,,,,345,,,,,,,,,,,,,,,,,,,,345,,,345,,,345,345,,,345,,,,,,,,',
',,,,,,,,,,345,345,345,345,345,345,,,,345,345,752,752,752,,752,,,345',
'752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752',
'752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752',
',752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,',
',,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752,750,750,750',
',750,,,752,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750',
'750,750,750,750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750,750',
',750,750,750,,750,750,,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750',
'750,,,750,,,,,,750,,,,,,,,750,,,,,750,750,750,750,750,750,,,,750,750',
'749,749,749,,749,,,750,749,749,,,,749,,749,749,749,749,749,749,749,',
',,,,749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749,749,749',
'749,749,749,,749,749,749,,749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749',
',,749,,,749,749,,,749,,,,,,749,,,,,,,,749,,,,,749,749,749,749,749,749',
',,,749,749,748,748,748,,748,,,749,748,748,,,,748,,748,748,748,748,748',
'748,748,,,,,,748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748',
'748,748,748,748,748,,748,748,748,,748,748,,748,748,748,,,,,,,,,,,,,',
',,,,,,748,,,748,,,748,748,,,748,,,,,,748,,,,,,,,748,,,,,748,748,748',
'748,748,748,,,,748,748,747,747,747,,747,,,748,747,747,,,,747,,747,747',
'747,747,747,747,747,,,,,,747,747,747,747,747,747,747,,,747,,,,,,,747',
',,747,747,747,747,747,747,747,747,,747,747,747,,747,747,,747,747,747',
',,,,,,,,,,,,,,,,,,,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,747,,,',
',747,747,747,747,747,747,,,,747,747,733,733,733,,733,,,747,733,733,',
',,733,,733,733,733,733,733,733,733,,,,,,733,733,733,733,733,733,733',
',,733,,,,,,,733,,,733,733,733,733,733,733,733,733,,733,733,733,,733',
'733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733,733,,,733,,,,,,733',
',,,,,,,733,,,,,733,733,733,733,733,733,,,,733,733,731,731,731,,731,',
',733,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731,731,731,731',
'731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731,,731,731',
'731,,731,731,,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731',
',,,,,731,,,,,,,,731,,,,,731,731,731,731,731,731,,,,731,731,397,397,397',
',397,,,731,397,397,,,,397,,397,397,397,397,397,397,397,,,,,,397,397',
'397,397,397,397,397,,,397,,,,,,,397,,,397,397,397,397,397,397,397,397',
',397,397,397,,397,397,,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397,,,397',
'397,,,397,,,,,,397,,,,,,,,397,,,,408,397,397,397,397,397,397,408,408',
'408,397,397,408,408,408,,408,,,397,,,,,,408,408,408,,,,,,,,,408,408',
',408,408,408,408,408,,,,,,,,,,,,,,,,,,,,,,,,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,,,408,408,408,,,408,,408,408,,,408,408',
',408,,408,,408,,408,408,408,408,408,408,408,,408,408,408,,,,,,,,,,,',
',408,408,,408,,408,711,711,711,,711,,,,711,711,,,,711,,711,711,711,711',
'711,711,711,,,,,,711,711,711,711,711,711,711,,,711,,,,,,,711,,,711,711',
'711,711,711,711,711,711,711,711,711,711,,711,711,,711,711,711,,,,,,',
',,,,,,,,,,,,,711,,,711,,,711,711,,,711,,711,,711,,711,,,,,,,,711,,,',
',711,711,711,711,711,711,,,,711,711,435,435,435,,435,,,711,435,435,',
',,435,,435,435,435,435,435,435,435,,,,,,435,435,435,435,435,435,435',
',,435,,,,,,,435,,,435,435,435,435,435,435,435,435,435,435,435,435,,435',
'435,,435,435,435,,,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,435,',
'435,,435,,,,,,,,435,,,,,435,435,435,435,435,435,,,,435,435,437,437,437',
',437,,,435,437,437,,,,437,,437,437,437,437,437,437,437,,,,,,437,437',
'437,437,437,437,437,,,437,,,,,,,437,,,437,437,437,437,437,437,437,437',
',437,437,437,,437,437,,437,437,437,,,,,,,,,,,,,,,,,,,,437,,,437,,,437',
'437,,,437,,,,,,437,,,,,,,,437,,,,,437,437,437,437,437,437,,,,437,437',
'438,438,438,,438,,,437,438,438,,,,438,,438,438,438,438,438,438,438,',
',,,,438,438,438,438,438,438,438,,,438,,,,,,,438,,,438,438,438,438,438',
'438,438,438,,438,438,438,,438,438,,438,438,438,,,,,,,,,,,,,,,,,,,,438',
',,438,,,438,438,,,438,,,,,,438,,,,,,,,438,,,,,438,438,438,438,438,438',
',,,438,438,439,439,439,,439,,,438,439,439,,,,439,,439,439,439,439,439',
'439,439,,,,,,439,439,439,439,439,439,439,,,439,,,,,,,439,,,439,439,439',
'439,439,439,439,439,,439,439,439,,439,439,,439,439,439,,,,,,,,,,,,,',
',,,,,,439,,,439,,,439,439,,,439,,,,,,439,,,,,,,,439,,,,,439,439,439',
'439,439,439,,,,439,439,705,705,705,,705,,,439,705,705,,,,705,,705,705',
'705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705',
',,705,705,705,705,705,705,705,705,,705,705,705,,705,705,,705,705,705',
',,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,705,,,',
'467,705,705,705,705,705,705,467,467,467,705,705,467,467,467,,467,,,705',
',,,,,,467,,,,,,,,,,467,467,,467,467,467,467,467,,,,,,,,,,,,,470,,,,',
',,470,470,470,,,470,470,470,,470,,,,,,467,,,,470,,,467,,,,,467,467,470',
'470,,470,470,470,470,470,,,,,,,,,,,,,,467,,,,,,,,,,,,,467,,,,,467,,',
'470,,,,,,,470,,,,,470,470,,,,,,,,,,,,,,,,,,,,,,470,,,,,,481,481,481',
',481,,,470,481,481,,,470,481,,481,481,481,481,481,481,481,,,,,,481,481',
'481,481,481,481,481,,,481,,,,,,,481,,,481,481,481,481,481,481,481,481',
'481,481,481,481,,481,481,,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,',
',481,481,,,481,,481,,481,,481,,,,,,,,481,,,,,481,481,481,481,481,481',
',,,481,481,484,484,484,,484,,,481,484,484,,,,484,,484,484,484,484,484',
'484,484,,,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484,484,484',
'484,484,484,484,484,484,484,484,484,,484,484,,484,484,484,,,,,,,,,,',
',,,,,,,,,484,,,484,,,484,484,,,484,,,,484,,484,,,,,,,,484,,,,,484,484',
'484,484,484,484,,,,484,484,486,486,486,,486,,,484,486,486,,,,486,,486',
'486,486,486,486,486,486,,,,,,486,486,486,486,486,486,486,,,486,,,,,',
',486,,,486,486,486,486,486,486,486,486,,486,486,486,,486,486,,486,486',
'486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,486,,,,,,,,486',
',,,,486,486,486,486,486,486,,,,486,486,490,490,490,490,490,,,486,490',
'490,,,,490,,490,490,490,490,490,490,490,,,,,,490,490,490,490,490,490',
'490,,,490,,,,,,490,490,,490,490,490,490,490,490,490,490,490,,490,490',
'490,,490,490,,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,,,490,490,,,490',
',490,,,,490,,,,,,,,490,,,,,490,490,490,490,490,490,,,,490,490,699,699',
'699,,699,490,,490,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699',
'699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699,699',
'699,,699,699,699,,699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699',
',,699,699,,,699,,699,,,,699,,,,,,,,699,,,,,699,699,699,699,699,699,',
',,699,699,497,497,497,,497,,,699,497,497,,,,497,,497,497,497,497,497',
'497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497,,,497,497,497',
'497,497,497,497,497,,497,497,497,,497,497,,,,497,,,,,,,,,,,,,,,,,,,',
'497,,,497,,,497,497,,,497,,,,,,,,,,,,,,,,,,,497,497,497,497,497,497',
',,,497,497,680,680,680,,680,,,497,680,680,,,,680,,680,680,680,680,680',
'680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680',
'680,680,680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,',
',,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680',
'680,680,680,,,,680,680,499,499,499,,499,,,680,499,499,,,,499,,499,499',
'499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499',
',,499,499,499,499,499,499,499,499,499,499,499,499,,499,499,,499,499',
'499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,499,,499,,499,,,,',
',,,499,,,,,499,499,499,499,499,499,,,,499,499,506,506,506,,506,,,499',
'506,506,,,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506',
'506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506',
',506,506,,,,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,,',
',,,,,,,,,,,506,506,506,506,506,506,,,,506,506,509,509,509,,509,,,506',
'509,509,,,,509,,509,509,509,509,509,509,509,,,,,,509,509,509,509,509',
'509,509,,,509,,,,,,,509,,,509,509,509,509,509,509,509,509,,509,509,509',
',509,509,,509,509,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509,,,509,',
',,,,509,,,,,,,,509,,,,,509,509,509,509,509,509,,,,509,509,510,510,510',
',510,,,509,510,510,,,,510,,510,510,510,510,510,510,510,,,,,,510,510',
'510,510,510,510,510,,,510,,,,,,,510,,,510,510,510,510,510,510,510,510',
',510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510',
'510,,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510,510,510,,,,510,510',
'511,511,511,,511,,,510,511,511,,,,511,,511,511,511,511,511,511,511,',
',,,,511,511,511,511,511,511,511,,,511,,,,,,,511,,,511,511,511,511,511',
'511,511,511,,511,511,511,,511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511',
',,511,,,511,511,,,511,,,,,,511,,,,,,,,511,,,,,511,511,511,511,511,511',
',,,511,511,515,515,515,,515,,,511,515,515,,,,515,,515,515,515,515,515',
'515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515,,,515,515,515',
'515,515,515,515,515,,515,515,515,,515,515,,515,515,515,,,,,,,,,,,,,',
',,,,,,515,,,515,,,515,515,,,515,,,,,,515,,,,,,,,515,,,,,515,515,515',
'515,515,515,,,,515,515,520,520,520,,520,,,515,520,520,,,,520,,520,520',
'520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520',
',,520,520,520,520,520,520,520,520,520,520,520,520,,520,520,,520,520',
'520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,520,,,,520,,,,,,,',
'520,,,,,520,520,520,520,520,520,,,,520,520,523,523,523,,523,,,520,523',
'523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523',
'523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,523,523,523,523',
',523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,',
',,,,523,,,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,666,666,666',
',666,,,523,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666',
'666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666',
',666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,666,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,660,660,660,,660,,,666,660,660,,,,660,,660,660,660,660,660,660,660',
',,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660',
'660,660,660,,660,660,660,,660,660,,,,660,,,,,,,,,,,,,,,,,,,,660,,,660',
',,660,660,,,660,,,,,,,,,,,,,,,,,,,660,660,660,660,660,660,,,,660,660',
'649,649,649,,649,,,660,649,649,,,,649,,649,649,649,649,649,649,649,',
',,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649',
'649,649,649,,649,649,649,,649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,649,,,649,,,,,,,,,,,,,,,,,,,649,649,649,649,649,649,,,,649,649',
'644,644,644,,644,,,649,644,644,,,,644,,644,644,644,644,644,644,644,',
',,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644',
'644,644,644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644',
',,644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644',
',,,644,644,559,559,559,,559,,,644,559,559,,,,559,,559,559,559,559,559',
'559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559,,,559,559,559',
'559,559,559,559,559,559,559,559,559,,559,559,,559,559,559,,,,,,,,,,',
',,,,,,,,,559,,,559,,,559,559,,,559,,559,,559,,559,,,,,,,,559,,,,,559',
'559,559,559,559,559,,,,559,559,571,571,571,,571,,,559,571,571,,,,571',
',571,571,571,571,571,571,571,,,,,,571,571,571,571,571,571,571,,,571',
',,,,,,571,,,571,571,571,571,571,571,571,571,,571,571,571,,571,571,,571',
'571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,',
',571,,,,,571,571,571,571,571,571,,,,571,571,577,577,577,,577,,,571,577',
'577,,,,577,,577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577',
'577,,,577,,,,,,,577,,,577,577,577,577,577,577,577,577,,577,577,577,',
'577,577,,577,577,577,,,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,',
',,,577,,,,,,,,577,,,,,577,577,577,577,577,577,,,,577,577,600,600,600',
',600,,,577,600,600,,,,600,,600,600,600,600,600,600,600,,,,,,600,600',
'600,600,600,600,600,,,600,,,,,,,600,,,600,600,600,600,600,600,600,600',
',600,600,600,,600,600,,600,600,600,,,,,,,,,,,,,,,,,,,,600,,,600,,,600',
'600,,,600,,600,,,,600,,,,,,,,600,,,,,600,600,600,600,600,600,,,,600',
'600,601,601,601,,601,,,600,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,400,,601,,,601,601,601,601',
'601,601,601,601,,601,601,601,,601,601,,601,601,601,400,400,400,400,400',
'400,400,400,400,400,400,,400,400,,,400,400,,601,,,601,,,601,601,,,601',
',,400,,400,601,400,400,400,400,400,400,400,601,400,,,,601,601,601,601',
'601,601,,,,601,601,,400,,,,,,601,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11',
',,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11',
'11,11,11,11,,,11,11,,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12',
',,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,388,388,388,388,388,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,,,,388,388,388',
'388,388,388,388,388,388,388,,,,,,388,388,388,388,388,388,388,388,388',
',,388,,,,,,,,,388,388,,388,388,388,388,388,388,388,,,388,388,,,,388',
'388,388,388,,,,,,,,,,,,,,388,388,,388,388,388,388,388,388,388,388,388',
'388,388,,,388,388,,,,,,,,,,388,597,597,597,597,597,597,597,597,597,597',
'597,597,597,597,597,597,597,597,597,597,597,597,597,597,,,,597,597,597',
'597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,597,597',
',,597,,,,,,,,,597,597,,597,597,597,597,597,597,597,,,597,597,,,,597',
'597,597,597,,,,,,,,,,,,,,597,597,,597,597,597,597,597,597,597,597,597',
'597,597,,,597,597,,,,,,,,,,597,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,85,85,85,85,85,85,,,,85,85,85,85,85,85,85,85,85,85,,',
',,,85,85,85,85,85,85,85,85,85,85,85,85,,85,,,,,,,85,85,,85,85,85,85',
'85,85,85,,,85,85,,,,85,85,85,85,,,,,,,,,,,,,,85,85,,85,85,85,85,85,85',
'85,85,85,85,85,,,85,721,721,721,721,721,721,721,721,721,721,721,721',
'721,721,721,721,721,721,721,721,721,721,721,721,,,,721,721,721,721,721',
'721,721,721,721,721,,,,,,721,721,721,721,721,721,721,721,721,,,721,',
',,,,,,,721,721,,721,721,721,721,721,721,721,,,721,721,,,,721,721,721',
'721,,,,,,,,,,,,,,721,721,,721,721,721,721,721,721,721,721,721,721,721',
',,721,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71',
'71,71,71,71,71,,71,,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71',
'71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,501,501',
'71,,501,,,,,,,,,501,501,,501,501,501,501,501,501,501,,,501,501,,,,501',
'501,501,501,,,,,,501,,,,,,,,501,501,,501,501,501,501,501,501,501,501',
'501,501,501,500,500,501,,500,,,,,,,,,500,500,,500,500,500,500,500,500',
'500,,,500,500,,,,500,500,500,500,,,,,,500,,,,,,,,500,500,,500,500,500',
'500,500,500,500,500,500,500,500,204,204,500,,204,,,,,,,,,204,204,,204',
'204,204,204,204,204,204,,,204,204,,,,204,204,204,204,,,,,,204,,,,,,',
',204,204,,204,204,204,204,204,204,204,204,204,204,204,434,434,204,,434',
',,,,,,,,434,434,,434,434,434,434,434,434,434,,,434,434,,,,434,434,434',
'434,,,,,,434,,,,,,,,434,434,,434,434,434,434,434,434,434,434,434,434',
'434,947,947,434,,947,,,,,,,,,947,947,,947,947,947,947,947,947,947,,',
'947,947,,,,947,947,947,947,,,,,,947,,,,,,,,947,947,,947,947,947,947',
'947,947,947,947,947,947,947,561,561,947,,561,,,,,,,,,561,561,,561,561',
'561,561,561,561,561,,,561,561,,,,561,561,561,561,,,,,,561,,,,,,,,561',
'561,,561,561,561,561,561,561,561,561,561,561,561,560,560,561,,560,,',
',,,,,,560,560,,560,560,560,560,560,560,560,,,560,560,,,,560,560,560',
'560,,,,,,560,,,,,,,,560,560,,560,560,560,560,560,560,560,560,560,560',
'560,710,710,560,,710,,,,,,,,,710,710,,710,710,710,710,710,710,710,,',
'710,710,,,,710,710,710,710,,,,,,710,,,,,,,,710,710,,710,710,710,710',
'710,710,710,710,710,710,710,252,252,710,,252,,,,,,,,,252,252,,252,252',
'252,252,252,252,252,,,252,252,,,,252,252,252,252,,,,,,,,,,,,,,252,252',
',252,252,252,252,252,252,252,252,252,252,252,253,253,252,,253,,,,,,',
',,253,253,,253,253,253,253,253,253,253,,,253,253,,,,253,253,253,253',
',,,,,,,,,,,,,253,253,,253,253,253,253,253,253,253,253,253,253,253,709',
'709,253,,709,,,,,,,,,709,709,,709,709,709,709,709,709,709,,,709,709',
',,,709,709,709,709,,,,,,709,,,,,,,,709,709,,709,709,709,709,709,709',
'709,709,709,709,709,433,433,709,,433,,,,,,,,,433,433,,433,433,433,433',
'433,433,433,,,433,433,,,,433,433,433,433,,,,,,433,,,,,,,,433,433,,433',
'433,433,433,433,433,433,433,433,433,433,946,946,433,,946,,,,,,,,,946',
'946,,946,946,946,946,946,946,946,,,946,946,,,,946,946,946,946,,,,,,946',
',,,,,,,946,946,,946,946,946,946,946,946,946,946,946,946,946,513,513',
'946,,513,,,,,,,,,513,513,,513,513,513,513,513,513,513,,,513,513,,,,513',
'513,513,513,,,,,,513,,,,,,,,513,513,,513,513,513,513,513,513,513,513',
'513,513,513,203,203,513,,203,,,,,,,,,203,203,,203,203,203,203,203,203',
'203,,,203,203,,,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203',
'203,203,203,203,203,203,203,203,941,941,203,,941,,,,,,,,,941,941,,941',
'941,941,941,941,941,941,,,941,941,,,,941,941,941,941,,,,,,941,,,,,,',
',941,941,,941,941,941,941,941,941,941,941,941,941,941,512,512,941,,512',
',,,,,,,,512,512,,512,512,512,512,512,512,512,,,512,512,,,,512,512,512',
'512,,,,,,512,,,,,,,,512,512,,512,512,512,512,512,512,512,512,512,512',
'512,,,512,420,420,420,420,420,420,420,420,420,420,420,,420,420,,,420',
'420,,,,,,,,,,,,,,,420,,420,,420,420,420,420,420,420,420,,420,24,24,24',
'24,24,24,24,24,24,24,24,,24,24,,420,24,24,,,,,,,,,,,,,,,24,,24,,24,24',
'24,24,24,24,24,,24,514,514,514,514,514,514,514,514,514,514,514,,514',
'514,,24,514,514,,,,,,,,,,,,,,,514,,514,,514,514,514,514,514,514,514',
',514,732,732,732,732,732,732,732,732,732,732,732,,732,732,,514,732,732',
',,,,,,,,,,,,,,732,,732,,732,732,732,732,732,732,732,,732,830,830,830',
'830,830,830,830,830,830,830,830,,830,830,,732,830,830,,,,,,,,,,,,,,',
'830,,830,,830,830,830,830,830,830,830,,830,737,737,737,737,737,737,737',
'737,737,737,737,,737,737,,830,737,737,,,,,,,,,,,,,,,737,,737,,737,737',
'737,737,737,737,737,,737,833,833,833,833,833,833,833,833,833,833,833',
',833,833,,737,833,833,,,,,,,,,,,,,,,833,,833,,833,833,833,833,833,833',
'833,,833,739,739,739,739,739,739,739,739,739,739,739,,739,739,,833,739',
'739,,,,,,,,,,,,,,,739,,739,,739,739,739,739,739,739,739,,739,742,742',
'742,742,742,742,742,742,742,742,742,,742,742,,739,742,742,,,,,,,,,,',
',,,,742,,742,,742,742,742,742,742,742,742,,742,744,744,744,744,744,744',
'744,744,744,744,744,,744,744,,742,744,744,,,,,,,,,,,,,,,744,,744,,744',
'744,744,744,744,744,744,,744,746,746,746,746,746,746,746,746,746,746',
'746,,746,746,,744,746,746,,,,,,,,,,,,,,,746,,746,,746,746,746,746,746',
'746,746,,746,465,465,465,465,465,465,465,465,465,465,465,,465,465,,746',
'465,465,,,,,,,,,,,,,,,465,,465,,465,465,465,465,465,465,465,,465,266',
'266,266,266,266,266,266,266,266,266,266,,266,266,465,465,266,266,,,',
',,,,,,,,,,,266,,266,,266,266,266,266,266,266,266,,266,661,661,661,661',
'661,661,661,661,661,661,661,,661,661,,266,661,661,,,,,,,,,,,,,,,661',
',661,,661,661,661,661,661,661,661,,661,,,,,,,,,,,,,,,,661' ]
        racc_action_check = arr = ::Array.new(23729, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   790,  3164,  1040,   nil,   135,   nil,   nil, 14842,  1317,
   nil, 21209, 21333,   580,   nil,  1161,   966,    95,   475,   915,
    10,   nil,   -73,  6402, 23061,  1009,   nil,   460,     2,  6640,
  6765,  6895,  7019,  7143,   nil,  4414,  7267,  7391,   nil,   904,
   543,   408,   969,   -29,  7515,  7639,  7763,   897,   192,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   770,   nil,  5286,  7887,
  8011,    32,   nil,  8135,  8259,   nil,   nil,  8383,  8509,   939,
   nil, 21931,   nil,   nil,   nil,   nil,   nil,   -86,   nil,   nil,
   nil,   nil,   nil,   891,   889, 21705,   nil,   nil,   nil,   125,
   nil,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  8633,   nil,   nil,   nil,   nil,
  8757,  8881,  9005,  9129,  9253,   903,   nil,   468,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   828,   nil,  2164,
  9377,  9501,  9625, 22846, 22114,  9749,  9873,  9997,  4913,  5037,
  5161,   nil,   nil,   302,    90,   171,   869,   220,   775,   819,
   nil, 10245,  3539,   780, 10369, 10493, 10617, 10741, 10865, 10989,
 11113, 11237, 11361, 11485, 11609, 11733, 11857, 11981, 12105, 12229,
 12353, 12477, 12601, 12725, 12849, 12973, 13097, 13221, 13345, 13469,
   nil,   nil, 22480, 22541,   769, 13593,   nil,   772,   nil,   nil,
   nil, 13717,   nil,   nil, 13841,   nil, 23556,   nil,   731,   730,
   nil, 13966,   769, 14090,   nil, 14214,   nil,   nil,   159,   nil,
  1037, 14462,   721,  3414,   725,   735,   686, 14710,  2539,   389,
   -59,   687,   725,   809,   nil,   686,   647,   -19,   nil,   nil,
   nil,   674,   601,   630, 15214,   nil,   510,   665,   639,   817,
   nil,   618,   nil, 15462,  1789,   785,   nil,  -106,   -67,   578,
   558,   nil,   182,   563,   nil,   nil,  6729,   725,    32,    43,
 15710, 15834,   292,   533,   386,     1,    25,   908,   450,    78,
   463,   nil,   nil, 15958,   nil, 16082,   518,   486,   475,   463,
   440,   365,   202,   364,   360,   nil,   266,   nil,   nil,   nil,
   nil,   nil,   287,   nil,   151,   nil,   179,   nil,   284,   124,
   nil,   268,   -26,   nil,   -58,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1664, 21457,   nil,
   nil,   nil,   nil,   232,   nil,   183,   nil, 17074,    52,   nil,
 21077,    34,   nil,   nil,   -31,   -39,   342,   301, 17188,   nil,
   nil,   nil,     0,   515,   -29,   nil,   nil,  1030,   900,   nil,
 23016,   nil,  -114,   nil,   nil, 14711,   nil,   nil,   nil,   nil,
    52,   nil,  1211, 22663, 22175, 17442,   -75, 17566, 17690, 17814,
  2289,  2164,   571,   217,  1234,  1231,  1218,  1211,  3789,  3664,
  3539,  1789,  3414,  3289,  3164,  3039,  2914,  2789,  2664,  2539,
  2414,   696,   855,  2039,  1914, 23511,   -51, 18052,   nil,   nil,
 18108,   nil,   nil,   nil,   nil,    97,   169,  1151,  1150,   nil,
   nil, 18225,   nil,   nil, 18349,   nil, 18473,   nil,   nil,   nil,
 18597,  1330,  1146,  1132,   nil,   nil,  1126, 18845,  1126, 19093,
 22053, 21992,   947,  1161,   nil,   nil, 19217,  1119,   nil, 19341,
 19465, 19589, 22968, 22785, 23106, 19713,  1239,  1235,  1109,   nil,
 19837,   nil,   nil, 19961,   nil,   nil,   nil,    -6,   864,   nil,
  1105,  1095,  1071,   nil,   nil,   nil,   nil,   nil,   nil,  1057,
   nil,   519,   nil,   nil,   nil,   nil,  1127,   nil,   nil,  1125,
  3664,  1160,   nil,  2414,    56,    24,  1136,  1141,   nil, 20581,
 22358, 22297,     7,   nil,   224,   225,   238,   nil,   996,   nil,
    14, 20705,   nil,   734,   nil,   nil,   nil, 20829,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,
   nil,   nil,   nil,  1015,   nil,  1017,   nil, 21581,   nil,   993,
 20953, 21077,   415,  1025,  5410,  5534,  5658,  5782,  1020,   nil,
   nil,   nil,  5906,  6030,  1014,   nil,  6154,  6278,   nil,   nil,
   285,   230,   640,   385,  1000,  8383,  1012,   nil,   nil,   316,
   nil,   nil,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,
   nil,  1020,   nil,  1060, 20457,   nil,   nil,   850,   311, 20333,
  1026,   nil,  1045,    92,    88,  1087,   263,   997,  1100,  1062,
 20209, 23601,  1139,  1143,    59,  1219, 20085,   nil,   nil,   -81,
   nil,  4039,  4164,  1114,   604,   nil,  1716,   nil,   nil,  1561,
 18969,   nil,   774,   nil,  1130,   380,   nil,  1137,   nil,   nil,
   780,   nil,  1250,   nil,   nil,   nil,   nil,  1261,   nil, 18721,
  1147,    28,    27,   147,    86, 17938,   nil,  1034,   nil, 22602,
 22419, 17318,   nil,   nil,   nil,   595,   693,  4289,  2789,   963,
   109, 21818,   -26,   876,  1539,   nil,   nil,   nil,   nil,   nil,
    61, 16950, 23151, 16826,   nil,   266,   nil, 23241,   nil, 23331,
   nil,   nil, 23376,   nil, 23421,   nil, 23466, 16702, 16578, 16454,
 16330,   -69, 16206,   290,   312,   322,   nil,   366,   350,   nil,
  1150,   350,   nil,  2289,   nil,  2914,  3039,   nil,   nil,   410,
   163,   nil,   nil,   551,   nil,  3914,   432,   487,   nil,   nil,
   nil,   468,   596,   481,   482,   486,   nil,   nil,   496,   500,
   nil,   503,   nil,   510,   644,   514,   580,   nil,   651,   nil,
 15586,   655,  4664,  1414,   nil,    17,    30,    60,   354,  1142,
   nil,   574,  1914, 15338,   nil,   563,   727,   729,   614,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   637,   626,   nil,
 23196, 15090, 14966, 23286,  1591,   nil,  1466,   nil,   nil,  1436,
   nil,   696,   679,   nil,   nil,   nil, 14586,   810,  2664,   717,
   827,   nil,  3289,   nil,   nil,    -7, 14338,   nil,   nil,   nil,
   nil,  1341,   nil,   nil,  1311,   nil,  1214,   nil,  1186,   nil,
   nil,   nil,   349,   893,   739,   nil,   -11,   nil,   871,   896,
 10121,  3789,   nil,   nil,   914,   565,   nil,   nil,   nil,   nil,
   994,   nil,   809,   816,   820,   822,   nil,   823,   nil,  1275,
  1038,   900,   nil,   843,   nil,   nil,   nil,  2039,  1066,  1068,
  1069,   934,  1095,   nil,   861,   863,   867,   869,   871,   763,
   881,   453,  1289,   nil,   nil,   nil,   360,  1164,   nil,   nil,
  4789,  4539,   479,   nil,   nil,   512,   nil,   831,   nil,   nil,
   nil, 22907,   nil,   nil,  1028,  6526, 22724, 22236,  1153,   nil,
   703,   nil,   nil,   nil,   633,   925,   364,   nil,   nil,   nil,
  1050,  1051,  1056,   939,   956,   957,   959,   999,  1006,   nil,
  1062,    -8,    44,    -9,  1164,   852,   858,   nil,   nil,   nil,
   nil,   nil,   446,   nil,   nil,   nil,    16,   nil,   837,   nil ]

racc_action_default = [
    -1,  -579,  -578,  -579,    -2,  -565,    -4,    -5,  -579,    -8,
    -9,  -579,  -579,  -579,   -29,  -579,  -579,  -579,  -277,  -579,
   -41,   -44,  -567,  -579,   -49,   -51,   -52,   -53,  -258,  -258,
  -258,  -288,  -327,  -328,   -70,  -578,   -74,   -82,   -84,  -579,
  -492,  -493,  -579,  -579,  -579,  -579,  -579,  -567,  -239,  -270,
  -271,  -272,  -273,  -274,  -275,  -276,  -555,  -279,  -579,  -578,
  -578,  -296,  -393,  -579,  -579,  -301,  -304,  -565,  -579,  -312,
  -319,  -579,  -329,  -330,  -434,  -435,  -436,  -437,  -438,  -578,
  -441,  -578,  -578,  -578,  -578,  -578,  -470,  -476,  -477,  -553,
  -481,  -482,  -554,  -484,  -485,  -486,  -487,  -488,  -489,  -490,
  -491,  -496,  -497,   990,    -3,  -566,  -574,  -575,  -576,    -7,
  -579,  -579,  -579,  -579,  -579,  -579,   -17,  -579,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -122,  -578,
  -579,  -579,  -578,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -567,  -568,   -48,  -579,  -492,  -493,  -579,  -277,  -579,  -579,
  -231,  -579,  -578,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -399,  -402,  -579,  -579,   -59,  -579,  -295,  -579,  -415,  -418,
   -65,  -578,  -412,   -66,  -567,   -67,  -240,  -253,  -578,  -578,
  -257,  -579,  -263,  -579,  -549,  -579,   -68,   -69,  -565,   -13,
   -14,  -579,   -72,  -578,  -567,  -579,   -75,   -78,  -578,   -90,
   -91,  -579,  -579,   -98,  -288,  -291,  -567,  -405,  -327,  -328,
  -331,  -413,  -579,   -80,  -579,   -86,  -285,  -478,  -479,  -579,
  -216,  -217,  -232,  -579,  -578,  -281,  -241,  -571,  -571,  -579,
  -579,  -547,  -571,  -579,  -297,  -298,  -518,   -50,  -579,  -579,
  -579,  -579,  -565,  -579,  -566,  -492,  -493,  -579,  -579,  -277,
  -579,  -352,  -353,  -579,  -315,  -579,  -113,  -114,  -154,  -155,
  -156,  -172,  -177,  -184,  -187,  -322,  -579,  -492,  -493,  -544,
  -545,  -439,  -579,  -454,  -579,  -456,  -579,  -458,  -579,  -579,
  -446,  -579,  -579,  -452,  -579,  -469,  -471,  -472,  -473,  -474,
    -6,  -577,   -23,   -24,   -25,   -26,   -27,  -578,  -579,   -19,
   -20,   -21,  -123,  -579,   -30,   -39,   -40,  -579,  -579,   -31,
  -197,  -567,  -248,  -249,  -578,  -578,  -556,  -557,  -258,  -410,
  -558,  -559,  -557,  -556,  -258,  -409,  -411,  -558,  -559,   -37,
  -205,   -38,  -579,   -42,   -43,  -195,  -263,   -45,   -46,   -47,
  -567,  -294,  -579,  -579,  -579,  -578,  -285,  -579,  -579,  -579,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -230,  -233,  -234,  -235,  -236,  -567,  -578,  -258,  -556,  -557,
  -258,   -56,   -60,  -259,  -406,  -578,  -578,  -567,  -567,  -290,
  -254,  -579,  -262,  -255,  -579,  -260,  -579,  -264,  -552,   -12,
  -566,   -16,  -567,   -71,  -283,   -87,   -76,  -579,  -567,  -578,
  -579,  -579,   -97,  -579,  -478,  -479,  -579,   -83,   -88,  -579,
  -579,  -579,  -579,  -579,  -237,  -579,  -426,  -579,  -567,  -242,
  -573,  -572,  -244,  -573,  -286,  -287,  -548,  -579,  -518,  -396,
  -543,  -543,  -543,  -517,  -519,  -520,  -521,  -522,  -523,  -524,
  -525,  -579,  -527,  -533,  -535,  -536,  -538,  -539,  -540,  -579,
  -578,  -343,  -344,  -578,  -579,  -579,  -579,  -579,  -421,  -578,
  -579,  -579,  -285,  -309,  -108,  -109,  -579,  -111,  -579,  -277,
  -579,  -579,  -320,  -518,  -324,  -563,  -564,  -579,  -440,  -455,
  -460,  -461,  -463,  -442,  -457,  -443,  -459,  -444,  -445,  -579,
  -448,  -450,  -451,  -579,  -475,  -579,   -18,  -579,   -28,  -269,
  -579,  -579,  -414,  -579,  -250,  -252,  -579,  -579,   -61,  -246,
  -247,  -407,  -579,  -579,   -63,  -408,  -579,  -579,  -293,  -569,
  -556,  -557,  -556,  -557,  -567,  -195,  -579,  -382,  -383,  -578,
  -385,  -400,   -54,  -403,   -55,  -404,  -578,  -416,  -419,  -245,
  -289,  -578,  -261,  -265,  -579,  -550,  -551,   -15,   -73,  -579,
   -79,   -85,  -567,  -556,  -557,  -578,   -94,   -96,  -579,   -81,
  -579,  -204,  -214,  -215,  -567,  -578,  -578,  -280,  -282,  -571,
  -394,  -578,  -578,  -578,  -579,  -510,  -579,  -513,  -515,  -579,
  -579,  -354,  -579,  -356,  -358,  -365,  -524,  -567,  -537,  -541,
  -578,  -345,  -578,  -302,  -346,  -347,  -305,  -579,  -308,  -579,
  -567,  -556,  -557,  -560,  -284,  -579,  -108,  -109,  -110,  -579,
  -579,  -578,  -313,  -498,  -499,  -579,  -316,  -578,  -578,  -518,
  -579,  -579,  -567,  -579,  -578,  -447,  -449,  -453,   -10,  -124,
  -267,  -579,  -198,  -579,  -570,  -578,   -33,  -200,   -34,  -201,
   -62,   -35,  -203,   -36,  -202,   -64,  -196,  -579,  -579,  -579,
  -579,  -414,  -579,  -543,  -543,  -543,  -381,  -579,  -578,  -387,
  -579,  -524,  -531,  -578,   -57,  -578,  -578,  -256,  -266,   -77,
   -92,   -89,  -292,  -578,  -350,  -578,  -427,  -578,  -428,  -429,
  -243,  -579,  -579,  -567,  -543,  -543,  -528,  -542,  -543,  -543,
  -534,  -543,  -529,  -567,  -579,  -363,  -579,  -526,  -579,  -348,
  -579,  -579,  -578,  -578,  -307,  -579,  -414,  -579,  -108,  -109,
  -112,  -567,  -578,  -579,  -501,  -579,  -579,  -579,  -567,  -503,
  -325,  -546,  -462,  -465,  -466,  -467,  -468,  -579,  -268,   -32,
  -199,  -251,  -579,  -238,  -372,  -374,  -579,  -377,  -379,  -579,
  -384,  -579,  -388,  -389,  -391,  -392,  -579,  -579,  -578,  -579,
  -579,   -11,  -578,  -433,  -351,  -579,  -579,  -431,  -397,  -398,
  -395,  -579,  -506,  -508,  -579,  -511,  -579,  -514,  -579,  -516,
  -355,  -357,  -361,  -579,  -366,  -299,  -579,  -300,  -579,  -579,
  -579,  -578,  -310,  -414,  -579,  -579,  -317,  -321,  -323,  -502,
  -518,  -464,  -543,  -543,  -543,  -543,  -532,  -543,  -386,  -579,
  -530,  -579,  -401,  -579,  -417,  -420,  -432,  -578,   -99,  -100,
  -579,  -579,  -107,  -430,  -543,  -543,  -543,  -543,  -359,  -579,
  -364,  -579,  -578,  -303,  -306,  -265,  -578,  -578,  -314,  -500,
  -578,  -578,  -579,  -369,  -371,  -579,  -375,  -579,  -378,  -380,
  -390,  -579,  -285,   -58,  -426,  -578,  -579,  -579,  -106,  -504,
  -579,  -507,  -509,  -512,  -579,  -362,  -578,  -422,  -423,  -424,
  -579,  -579,  -579,  -543,  -543,  -543,  -543,  -284,  -560,  -425,
  -567,  -556,  -557,  -560,  -105,  -543,  -360,  -349,  -311,  -318,
  -326,  -367,  -579,  -370,  -373,  -376,  -414,  -505,  -543,  -368 ]

clist = [
'6,209,424,557,355,472,108,517,286,665,401,124,124,116,198,533,262,645',
'376,126,126,267,267,267,396,483,313,121,121,602,421,718,4,28,550,553',
'105,303,790,28,773,754,300,300,254,260,263,798,708,284,268,268,268,529',
'28,9,645,316,321,408,414,9,28,28,28,104,28,801,108,477,519,522,282,642',
'300,526,642,363,317,365,367,370,373,365,693,696,687,121,871,28,786,265',
'276,277,28,28,843,109,28,874,361,121,896,328,329,2,507,332,467,470,845',
'364,579,757,633,374,586,635,115,590,269,269,269,851,631,755,570,333',
'572,197,342,388,636,637,638,848,28,597,645,212,319,28,28,28,28,28,359',
'320,318,322,382,383,384,385,315,324,325,783,9,327,327,483,340,327,712',
'356,574,386,314,518,785,330,788,802,431,331,920,803,705,927,343,812',
'571,815,930,345,717,573,721,890,409,810,267,758,380,842,642,642,896',
'527,402,670,326,251,466,763,327,327,327,327,475,765,476,766,957,871',
'699,533,777,398,418,855,955,790,1,398,697,793,479,362,28,28,28,28,366',
'940,28,28,28,28,28,28,841,624,474,267,892,369,493,845,786,267,751,28',
'267,673,589,976,372,402,822,723,533,724,375,813,482,482,784,577,,,,',
'268,503,508,,,108,770,,,268,786,,28,496,262,408,414,,28,300,764,28,',
'492,,650,,958,498,427,428,429,430,652,659,490,300,285,28,977,28,473',
'394,399,756,28,282,419,423,,478,282,,,806,,893,,894,108,491,,,882,489',
'726,,,,,269,28,,,931,300,,300,,269,,,655,914,,740,,28,28,,645,745,,700',
'655,,554,555,,,,,,,,,603,,,,,6,,,124,,596,,556,,618,610,126,767,,,,615',
'482,482,121,,609,681,533,,816,817,424,,,,655,595,28,,409,,780,642,608',
'267,327,327,963,,614,,,402,,,,969,,883,9,639,640,,626,,818,,,,418,769',
',,610,,648,610,,,,,651,,627,609,28,,609,508,,,,627,627,393,,,508,,,',
'668,632,,,634,409,,267,778,767,,,,,,402,285,409,,,,300,,884,,17,,,,881',
'300,17,,,,418,,811,,28,,,,,,,213,418,28,,,,,,213,213,213,,17,291,291',
'647,,,28,409,681,267,,795,,,,694,694,402,,285,,907,,213,285,,655,,213',
'213,641,713,213,337,,,,418,,533,,28,922,,28,,,,,,28,,,,,,959,124,986',
'729,,,28,603,,126,,,28,669,17,664,,121,,213,213,213,213,17,,508,,961',
'962,,,759,772,,,603,771,,627,,,28,28,482,,,610,28,28,615,,28,,,,797',
',609,820,300,,,,,681,,681,774,779,,300,716,,,,759,,722,,,,,,603,,,,',
'753,398,821,,774,,774,,,735,,,,409,,,,267,28,28,17,213,213,213,,402',
'213,213,213,213,213,213,814,,805,,,819,736,738,,418,,17,741,743,,789',
'423,482,791,,28,121,918,681,,,28,,18,807,,860,28,28,18,,,970,,28,759',
'870,,,213,,,,28,,213,,,213,,853,,,,857,,18,293,293,,,889,,,681,17,681',
'17,,603,,291,17,28,,28,28,,,,327,655,,,,28,,694,291,339,,,,,,886,,,17',
'681,,,,,323,690,,,692,,28,,28,28,213,213,,,,876,,,28,28,,,18,568,829',
'568,,300,885,,,18,19,,,,,300,19,,,,,,,16,,,,,,16,,,28,,,,28,,,929,,',
',19,895,17,,897,,327,,,,,,,16,,,,,,327,,,28,,,,915,,,916,,917,,341,774',
',,,,,,,,409,,267,,,28,,213,18,,402,,,,781,782,603,,,,28,774,,,418,28',
',19,28,28,418,18,395,,,,19,,426,,16,,,28,,,,,,16,,,,,964,,,965,,966',
',,17,,,,,827,,291,,213,975,,,,,,291,,,,,,,,,213,,,18,,18,,,,293,18,',
',,,,485,988,487,847,488,849,850,,,,293,,,,,854,,,19,17,18,,17,,,422',
',,213,,,16,,,,,,,,,213,19,878,879,,,213,,,569,,569,,,16,,,,,,,,,,,,',
',,,,,,,,213,213,,,,,213,213,,,213,,,903,,,,906,18,,,,,,,19,,19,,,,,19',
',,,,,16,,16,,,291,,16,926,,,,,599,,,291,,,,19,,,,,,,17,17,,,,,16,944',
',,,,,,,41,,,,,,41,956,,,,,960,,,,,,,213,,,,,,213,,,,,,17,17,41,290,290',
',,17,,,18,,,,,,213,293,,,19,,,,643,,293,323,,646,,,,16,,336,,,358,,',
',,,,,17,,17,17,,,,,,,,,17,,,,,643,,,323,,,,18,,41,18,,,,,,,,41,,213',
',17,17,,,,,,,,,17,213,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,900,,17,,,,17',
'16,,,910,,,,730,,,,643,323,,,,,,,,,,,,,,,,17,,41,,,293,,,,,,,,,,,293',
',,19,,,19,768,,41,17,18,18,,,,16,,,16,,,,,,17,,,,776,17,,,17,17,,675',
'677,678,,,,,792,,,,,213,,,,,,,,,18,18,,,,426,826,18,,,,41,422,41,,,',
'290,41,,,,,,,,,,,,,,,,290,,,828,,,,,,,41,,18,,18,18,,,,,,,,,18,,,,,',
',,,19,19,,,,,358,,358,40,,,,16,16,40,,,18,18,,,,,,,,,18,,,,,,,,,,,,',
',40,289,289,,19,19,,,41,,,19,,,,,,16,16,,569,,18,,16,,18,,323,,912,',
',335,,,357,,,,,,,,,,,,,,19,,19,19,,18,,,,,,,19,16,,16,16,,,,40,,,,,16',
',925,,40,,18,,,,,,,,19,19,,,835,837,838,18,,,19,,18,16,16,18,18,,,,',
',41,16,,,,,,290,,,,,,862,863,,290,865,867,,869,,,,19,,,,19,,,,913,,',
',,16,,,,16,,,,,,,,,,,,40,,,,19,,,41,,,41,,,,,,,16,,,,,,40,,,,,,,19,',
',,,,,,,,,,,16,,19,,,,,19,,,19,19,,,,16,,,,,16,,,16,16,933,934,936,938',
',939,,,,,,,,,40,,40,,,,289,40,949,951,952,953,,,,,,,,,,,,289,290,,,',
',,,,,40,,290,,,,,,,,,,,41,41,,,,,,,,,,981,983,984,985,,357,,357,,,,',
'987,,,,,,,,,,,,,989,,,,,,,,,,41,41,,,,,,41,,,,,,,40,,,,,,,,,,,,,,,220',
',,,,,,,266,266,266,,,,,,,41,,41,41,310,311,312,,,,,,41,,,,,,,266,266',
',,,,,,,,,,,,,,,,,,41,41,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,289',
',,,,358,,41,,289,,41,,,,909,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,40',
',,40,,,,,,,,,,41,,,,,,,,,,,,,,,41,266,400,266,,41,420,425,41,41,,,,',
',,,,,,,,220,,,440,441,442,443,444,445,446,447,448,449,450,451,452,453',
'454,455,456,457,458,459,460,461,462,463,464,465,,,,,,266,,,,,,266,,',
'266,,,,,,289,266,,266,,266,,,,,,289,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,',
',,,514,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,40,,40,40,,,,,,,,,40,266,,,,,,,,,,,,,,,,,,,,,,,,,,40',
'40,,,,,,,,,40,,266,,420,625,400,,,,,,,,,,,,,,,,,,,,,,,,,,,,357,,40,',
',,40,,,,908,,,,266,,,266,,266,,,,,,,,,,,,,266,,,40,,,,,,,661,662,663',
',,,,,,,,266,,,266,,,,,40,,,,,,,,,,,,,,,40,,,,,40,,,40,40,,,,,,,266,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,732,,,266,266,737,739,,,',
',742,744,,,625,746,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,',
',,266,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,266,,,,,,,,',
',,,,,,,,,,,266,,830,,,,,,,,,,,,,,737,739,744,742,,833,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266',
'830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(2858, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,20,88,57,40,91,10,50,13,25,61,61,17,17,133,69,178,57,62,62,35,35',
'35,29,71,33,58,58,26,29,92,2,44,85,85,8,51,173,44,14,130,64,64,39,39',
'39,86,55,47,66,66,66,142,44,9,178,6,6,38,38,9,44,44,44,5,44,14,91,25',
'67,67,46,72,64,67,72,6,66,6,6,6,6,6,87,87,126,58,124,44,172,45,45,45',
'44,44,137,7,44,127,158,58,174,19,19,3,52,19,38,38,138,160,164,135,70',
'160,164,70,11,164,68,68,68,15,41,131,56,5,56,18,21,32,42,41,41,43,44',
'63,178,22,65,44,44,44,44,44,80,81,68,68,19,19,19,19,31,82,84,135,9,31',
'31,71,89,31,90,93,94,9,95,96,131,97,131,98,48,99,127,100,101,102,103',
'104,105,106,107,108,109,110,111,112,69,55,35,128,7,136,72,72,174,139',
'6,140,141,143,144,145,31,31,31,31,148,149,150,151,152,124,153,133,154',
'66,58,155,127,173,1,66,88,126,48,159,44,44,44,44,161,137,44,44,44,44',
'44,44,135,25,69,35,130,162,48,138,172,35,26,44,35,142,163,127,165,6',
'166,167,133,168,169,170,6,6,171,177,,,,,66,33,50,,,91,26,,,66,172,,44',
'51,69,38,38,,44,64,41,44,,47,,52,,14,47,31,31,31,31,25,52,8,64,12,44',
'86,44,45,22,22,133,44,46,22,22,,45,46,,,26,,131,,131,91,9,,,87,5,164',
',,,,68,44,,,92,64,,64,,68,,,38,131,,40,,44,44,,178,40,,25,38,,19,19',
',,,,,,,,33,,,,,6,,,61,,17,,5,,48,69,62,71,,,,69,6,6,58,,6,125,133,,10',
'10,20,,,,38,2,44,,69,,67,72,39,35,31,31,131,,39,,,6,,,,13,,26,9,48,48',
',33,,142,,,,58,52,,,69,,48,69,,,,,48,,6,6,44,,6,50,,,,6,6,12,,,50,,',
',48,39,,,39,69,,35,29,71,,,,,,6,12,69,,,,64,,10,,24,,,,85,64,24,,,,58',
',25,,44,,,,,,,24,58,44,,,,,,24,24,24,,24,24,24,9,,,44,69,125,35,,125',
',,,91,91,6,,12,,85,,24,12,,38,,24,24,68,91,24,24,,,,58,,133,,44,85,',
'44,,,,,,44,,,,,,88,61,26,17,,,44,33,,62,,,44,68,24,31,,58,,24,24,24',
'24,24,,50,,10,10,,,6,48,,,33,50,,6,,,44,44,6,,,69,44,44,69,,44,,,,48',
',6,57,64,,,,,125,,125,6,6,,64,31,,,,6,,31,,,,,,33,,,,,129,66,48,,6,',
'6,,,68,,,,69,,,,35,44,44,24,24,24,24,,6,24,24,24,24,24,24,91,,66,,,91',
'22,22,,58,,24,22,22,,129,22,6,129,,44,58,125,125,,,44,,27,19,,48,44',
'44,27,,,25,,44,6,48,,,24,,,,44,,24,,,24,,6,,,,6,,27,27,27,,,48,,,125',
'24,125,24,,33,,24,24,44,,44,44,,,,31,38,,,,44,,91,24,27,,,,,,91,,,24',
'125,,,,,30,12,,,12,,44,,44,44,24,24,,,,19,,,44,44,,,27,24,22,24,,64',
'19,,,27,28,,,,,64,28,,,,,,,23,,,,,,23,,,44,,,,44,,,91,,,,28,129,24,',
'129,,31,,,,,,,23,,,,,,31,,,44,,,,129,,,129,,129,,28,6,,,,,,,,,69,,35',
',,44,,24,27,,6,,,,12,12,33,,,,44,6,,,58,44,,28,44,44,58,27,30,,,,28',
',30,,23,,,44,,,,,,23,,,,,129,,,129,,129,,,24,,,,,12,,24,,24,129,,,,',
',24,,,,,,,,,24,,,27,,27,,,,27,27,,,,,,30,129,30,12,30,12,12,,,,27,,',
',,12,,,28,24,27,,24,,,28,,,24,,,23,,,,,,,,,24,28,12,12,,,24,,,27,,27',
',,23,,,,,,,,,,,,,,,,,,,,,24,24,,,,,24,24,,,24,,,12,,,,12,27,,,,,,,28',
',28,,,,,28,,,,,,23,,23,,,24,,23,12,,,,,30,,,24,,,,28,,,,,,,24,24,,,',
',23,12,,,,,,,,54,,,,,,54,12,,,,,12,,,,,,,24,,,,,,24,,,,,,24,24,54,54',
'54,,,24,,,27,,,,,,24,27,,,28,,,,30,,27,30,,30,,,,23,,54,,,54,,,,,,,',
'24,,24,24,,,,,,,,,24,,,,,30,,,30,,,,27,,54,27,,,,,,,,54,,24,,24,24,',
',,,,,,,24,24,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,24,,24,,,,24,23,,,24',
',,,30,,,,30,30,,,,,,,,,,,,,,,,24,,54,,,27,,,,,,,,,,,27,,,28,,,28,30',
',54,24,27,27,,,,23,,,23,,,,,,24,,,,30,24,,,24,24,,132,132,132,,,,,30',
',,,,24,,,,,,,,,27,27,,,,30,27,27,,,,54,28,54,,,,54,54,,,,,,,,,,,,,,',
',54,,,30,,,,,,,54,,27,,27,27,,,,,,,,,27,,,,,,,,,28,28,,,,,54,,54,53',
',,,23,23,53,,,27,27,,,,,,,,,27,,,,,,,,,,,,,,53,53,53,,28,28,,,54,,,28',
',,,,,23,23,,27,,27,,23,,27,,30,,27,,,53,,,53,,,,,,,,,,,,,,28,,28,28',
',27,,,,,,,28,23,,23,23,,,,53,,,,,23,,30,,53,,27,,,,,,,,28,28,,,132,132',
'132,27,,,28,,27,23,23,27,27,,,,,,54,23,,,,,,54,,,,,,132,132,,54,132',
'132,,132,,,,28,,,,28,,,,28,,,,,23,,,,23,,,,,,,,,,,,53,,,,28,,,54,,,54',
',,,,,,23,,,,,,53,,,,,,,28,,,,,,,,,,,,,23,,28,,,,,28,,,28,28,,,,23,,',
',,23,,,23,23,132,132,132,132,,132,,,,,,,,,53,,53,,,,53,53,132,132,132',
'132,,,,,,,,,,,,53,54,,,,,,,,,53,,54,,,,,,,,,,,54,54,,,,,,,,,,132,132',
'132,132,,53,,53,,,,,132,,,,,,,,,,,,,132,,,,,,,,,,54,54,,,,,,54,,,,,',
',53,,,,,,,,,,,,,,,34,,,,,,,,34,34,34,,,,,,,54,,54,54,34,34,34,,,,,,54',
',,,,,,34,34,,,,,,,,,,,,,,,,,,,54,54,,,,,,,,,54,,,,,,,,,,,,,,,,,,,,,',
'53,,,,,,,53,,,,,54,,54,,53,,54,,,,54,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,',
',,,,,,,,53,,,53,,,,,,,,,,54,,,,,,,,,,,,,,,54,34,34,34,,54,34,34,54,54',
',,,,,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,,,,,,34,,,,,,34,,,34,,,,,,53,34,,34,,34,',
',,,,53,,,,,,,,,,,53,53,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,',
',53,53,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,53,53,,,,,',
',,,53,34,,,,,,,,,,,,,,,,,,,,,,,,,,53,53,,,,,,,,,53,,34,,34,34,34,,,',
',,,,,,,,,,,,,,,,,,,,,,,,53,,53,,,,53,,,,53,,,,34,,,34,,34,,,,,,,,,,',
',,34,,,53,,,,,,,34,34,34,,,,,,,,,34,,,34,,,,,53,,,,,,,,,,,,,,,53,,,',
',53,,,53,53,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,',
',34,34,34,34,,,,,34,34,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,',
',,,,,,,,,,,,,34,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,',
',,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(2858, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   224,    30,   105,   nil,    60,    -2,    89,    31,    53,
  -307,   108,   276,  -507,  -625,  -650,   nil,     2,   117,    40,
  -204,    62,   116,   868,   505,  -192,  -372,   742,   855,  -176,
   765,    96,    15,   -21,  1912,   -10,   nil,   nil,  -144,    16,
  -249,  -342,  -339,  -629,    31,    60,    37,    14,   -36,   nil,
   -28,     0,  -198,  1533,  1189,  -518,  -217,   -67,    16,   nil,
   nil,     0,     8,  -255,     6,    81,    19,  -247,    89,   -13,
  -353,  -244,  -408,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,    87,    94,   nil,    94,  -294,  -643,  -470,  -330,    94,
  -406,     1,  -542,    94,  -190,   111,  -146,   106,  -520,   109,
  -519,  -385,  -703,   111,  -531,  -162,  -533,  -702,   115,  -386,
  -168,  -386,  -631,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -706,  -134,  -455,  -697,  -436,    55,
  -588,  -504,   908,  -311,   nil,  -516,  -565,  -664,  -650,  -127,
  -326,   140,  -273,   178,   -46,  -426,   nil,   nil,   -48,  -426,
   -47,  -425,  -712,  -342,  -448,  -556,   nil,   nil,    23,   150,
    30,   152,   164,  -113,  -250,   174,  -463,  -320,  -319,   179,
  -449,  -406,  -584,  -638,  -734,   nil,   nil,   -91,  -467 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   279,     7,   334,   280,
   nil,   nil,   516,   nil,   799,   nil,   278,   nil,   nil,   nil,
    14,    15,    21,   219,   309,   nil,   nil,   217,   218,   nil,
   272,    20,   nil,   432,    24,    25,    26,    27,   658,   nil,
   nil,   nil,   nil,   nil,   297,   403,    34,   nil,   nil,    36,
    39,    38,   nil,   214,   215,   567,   nil,   123,   411,   122,
   125,    75,    76,   nil,    48,   nil,   404,   nil,   405,   416,
   611,   480,   270,   255,    49,    50,    51,    52,    53,    54,
    55,   nil,   256,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   551,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   683,   540,   nil,   684,   nil,   530,
   nil,   532,   nil,   787,   628,   nil,   nil,   nil,   538,   nil,
   nil,   nil,   720,   nil,   nil,   nil,   415,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,
   nil,   nil,   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,
   nil,   531,   542,   543,   762,   546,   549,   nil,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  3, 201, :_reduce_287,
  1, 201, :_reduce_288,
  4, 201, :_reduce_289,
  3, 201, :_reduce_290,
  1, 201, :_reduce_291,
  5, 201, :_reduce_292,
  4, 201, :_reduce_293,
  3, 201, :_reduce_294,
  2, 201, :_reduce_295,
  1, 201, :_reduce_none,
  2, 201, :_reduce_297,
  2, 201, :_reduce_298,
  6, 201, :_reduce_299,
  6, 201, :_reduce_300,
  0, 234, :_reduce_301,
  0, 235, :_reduce_302,
  7, 201, :_reduce_303,
  0, 236, :_reduce_304,
  0, 237, :_reduce_305,
  7, 201, :_reduce_306,
  5, 201, :_reduce_307,
  4, 201, :_reduce_308,
  0, 238, :_reduce_309,
  0, 239, :_reduce_310,
  9, 201, :_reduce_311,
  0, 240, :_reduce_312,
  0, 241, :_reduce_313,
  7, 201, :_reduce_314,
  0, 242, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  9, 201, :_reduce_318,
  0, 245, :_reduce_319,
  0, 246, :_reduce_320,
  6, 201, :_reduce_321,
  0, 247, :_reduce_322,
  6, 201, :_reduce_323,
  0, 248, :_reduce_324,
  0, 249, :_reduce_325,
  9, 201, :_reduce_326,
  1, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 161, :_reduce_331,
  1, 250, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_349,
  1, 151, :_reduce_none,
  2, 151, :_reduce_351,
  1, 226, :_reduce_none,
  1, 226, :_reduce_353,
  1, 261, :_reduce_none,
  3, 261, :_reduce_355,
  1, 264, :_reduce_356,
  3, 264, :_reduce_357,
  1, 263, :_reduce_358,
  4, 263, :_reduce_359,
  6, 263, :_reduce_360,
  3, 263, :_reduce_361,
  5, 263, :_reduce_362,
  2, 263, :_reduce_363,
  4, 263, :_reduce_364,
  1, 263, :_reduce_365,
  3, 263, :_reduce_366,
  6, 265, :_reduce_367,
  8, 265, :_reduce_368,
  4, 265, :_reduce_369,
  6, 265, :_reduce_370,
  4, 265, :_reduce_371,
  2, 265, :_reduce_372,
  6, 265, :_reduce_373,
  2, 265, :_reduce_374,
  4, 265, :_reduce_375,
  6, 265, :_reduce_376,
  2, 265, :_reduce_377,
  4, 265, :_reduce_378,
  2, 265, :_reduce_379,
  4, 265, :_reduce_380,
  1, 265, :_reduce_381,
  1, 178, :_reduce_382,
  1, 178, :_reduce_none,
  3, 271, :_reduce_384,
  1, 271, :_reduce_385,
  4, 271, :_reduce_386,
  1, 272, :_reduce_none,
  2, 272, :_reduce_388,
  1, 273, :_reduce_389,
  3, 273, :_reduce_390,
  1, 274, :_reduce_391,
  1, 274, :_reduce_none,
  0, 278, :_reduce_393,
  3, 221, :_reduce_394,
  4, 276, :_reduce_395,
  1, 276, :_reduce_396,
  3, 277, :_reduce_397,
  3, 277, :_reduce_398,
  0, 281, :_reduce_399,
  0, 282, :_reduce_400,
  6, 280, :_reduce_401,
  2, 174, :_reduce_402,
  4, 174, :_reduce_403,
  4, 174, :_reduce_404,
  0, 284, :_reduce_405,
  3, 220, :_reduce_406,
  4, 220, :_reduce_407,
  4, 220, :_reduce_408,
  3, 220, :_reduce_409,
  3, 220, :_reduce_410,
  3, 220, :_reduce_411,
  2, 220, :_reduce_412,
  1, 220, :_reduce_413,
  4, 220, :_reduce_414,
  0, 285, :_reduce_415,
  0, 286, :_reduce_416,
  6, 219, :_reduce_417,
  0, 287, :_reduce_418,
  0, 288, :_reduce_419,
  6, 219, :_reduce_420,
  0, 290, :_reduce_421,
  6, 225, :_reduce_422,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  6, 150, :_reduce_425,
  0, 150, :_reduce_426,
  1, 291, :_reduce_427,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 292, :_reduce_430,
  1, 292, :_reduce_none,
  2, 152, :_reduce_432,
  1, 152, :_reduce_none,
  1, 211, :_reduce_434,
  1, 211, :_reduce_435,
  1, 211, :_reduce_none,
  1, 212, :_reduce_437,
  1, 294, :_reduce_none,
  2, 294, :_reduce_439,
  3, 295, :_reduce_440,
  1, 295, :_reduce_441,
  3, 213, :_reduce_442,
  3, 214, :_reduce_443,
  3, 215, :_reduce_444,
  3, 215, :_reduce_445,
  1, 299, :_reduce_446,
  3, 299, :_reduce_447,
  1, 300, :_reduce_none,
  2, 300, :_reduce_449,
  3, 216, :_reduce_450,
  3, 216, :_reduce_451,
  1, 302, :_reduce_452,
  3, 302, :_reduce_453,
  1, 296, :_reduce_454,
  2, 296, :_reduce_455,
  1, 297, :_reduce_456,
  2, 297, :_reduce_457,
  1, 298, :_reduce_458,
  2, 298, :_reduce_459,
  1, 301, :_reduce_460,
  0, 304, :_reduce_461,
  3, 301, :_reduce_462,
  0, 305, :_reduce_463,
  4, 301, :_reduce_464,
  1, 303, :_reduce_465,
  1, 303, :_reduce_466,
  1, 303, :_reduce_467,
  1, 303, :_reduce_none,
  2, 198, :_reduce_469,
  1, 198, :_reduce_470,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  3, 199, :_reduce_475,
  1, 293, :_reduce_none,
  1, 293, :_reduce_none,
  2, 293, :_reduce_478,
  2, 293, :_reduce_479,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_485,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 191, :_reduce_491,
  1, 217, :_reduce_492,
  1, 217, :_reduce_493,
  1, 160, :_reduce_494,
  1, 160, :_reduce_495,
  1, 164, :_reduce_496,
  1, 164, :_reduce_497,
  1, 227, :_reduce_498,
  0, 307, :_reduce_499,
  4, 227, :_reduce_500,
  2, 227, :_reduce_501,
  3, 229, :_reduce_502,
  2, 229, :_reduce_503,
  6, 279, :_reduce_504,
  8, 279, :_reduce_505,
  4, 279, :_reduce_506,
  6, 279, :_reduce_507,
  4, 279, :_reduce_508,
  6, 279, :_reduce_509,
  2, 279, :_reduce_510,
  4, 279, :_reduce_511,
  6, 279, :_reduce_512,
  2, 279, :_reduce_513,
  4, 279, :_reduce_514,
  2, 279, :_reduce_515,
  4, 279, :_reduce_516,
  1, 279, :_reduce_517,
  0, 279, :_reduce_518,
  1, 275, :_reduce_519,
  1, 275, :_reduce_520,
  1, 275, :_reduce_521,
  1, 275, :_reduce_522,
  1, 262, :_reduce_none,
  1, 262, :_reduce_524,
  1, 309, :_reduce_none,
  3, 309, :_reduce_526,
  1, 266, :_reduce_527,
  3, 266, :_reduce_528,
  3, 310, :_reduce_529,
  3, 311, :_reduce_530,
  1, 267, :_reduce_531,
  3, 267, :_reduce_532,
  1, 308, :_reduce_533,
  3, 308, :_reduce_534,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 268, :_reduce_537,
  1, 268, :_reduce_538,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  2, 270, :_reduce_541,
  2, 269, :_reduce_542,
  0, 269, :_reduce_543,
  1, 230, :_reduce_none,
  0, 314, :_reduce_545,
  4, 230, :_reduce_546,
  1, 218, :_reduce_547,
  2, 218, :_reduce_548,
  1, 205, :_reduce_none,
  3, 205, :_reduce_550,
  3, 315, :_reduce_551,
  2, 315, :_reduce_552,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_574,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_577,
  0, 143, :_reduce_578 ]

racc_reduce_n = 579

racc_shift_n = 990

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2][1..-1]) # TODO: self.args
                    
    result
end

def _reduce_252(val, _values, result)
                      result = s(:hash, *val[0].values)
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_294(val, _values, result)
                      raise "no3\non#{val.inspect}"
                    
    result
end

def _reduce_295(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_307(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_323(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_325(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_358(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_359(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_360(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_361(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_362(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_363(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_364(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_365(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_366(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_367(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_368(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_369(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_370(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_371(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
 result = 0 
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_394(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_400(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_401(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_402(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_415(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_417(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_418(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_420(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_421(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_426(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 433 omitted

def _reduce_434(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_435(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_444(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_454(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_455(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_462(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_464(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_465(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_466(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_467(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 471 omitted

# reduce 472 omitted

# reduce 473 omitted

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_479(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_486(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_487(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_488(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_491(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_492(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_493(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_494(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_496(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_497(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_498(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_499(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_501(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_518(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_519(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_527(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_528(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_529(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_530(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_538(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 539 omitted

# reduce 540 omitted

def _reduce_541(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_547(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_551(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:lit, label.to_sym), val[1])
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

def _reduce_574(val, _values, result)
 yyerrok 
    result
end

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
 yyerrok 
    result
end

def _reduce_578(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
