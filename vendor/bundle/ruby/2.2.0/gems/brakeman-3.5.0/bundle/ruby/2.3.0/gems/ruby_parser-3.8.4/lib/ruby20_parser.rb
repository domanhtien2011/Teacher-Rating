#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-291,579,-102,579,995,-101,269,-291,-291,-291,216,217,749,-291,-291',
'269,-291,800,718,660,558,557,556,729,559,700,660,605,567,-104,579,-105',
'-103,575,574,624,-291,-291,579,-291,-291,-291,-291,-291,579,216,217',
'220,-103,-100,999,-99,-85,659,-104,-106,219,216,217,109,659,575,574',
'-71,-102,-107,-101,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'-291,-291,-291,-291,729,729,-291,-291,-291,269,643,607,606,618,-291',
'220,268,-291,568,975,-597,623,-291,220,-291,268,-291,-291,-291,-291',
'-291,-291,-291,-596,-291,621,-291,-596,113,-102,113,748,-101,112,-102',
'112,113,-101,-600,-291,-291,112,-96,699,-291,-600,-600,-600,220,-96',
'113,-600,-600,-105,-600,112,-104,113,605,-103,220,-104,112,-600,-103',
'113,-94,-91,929,-90,112,113,-95,-97,-600,-600,112,-600,-600,-600,-600',
'-600,-93,-98,-92,-517,268,269,620,207,565,-95,-93,605,113,113,660,660',
'408,112,112,567,208,410,409,-600,-600,-600,-600,-600,-600,-600,-600',
'-600,-600,-600,-600,-600,-600,607,606,-600,-600,-600,817,644,585,877',
'761,-600,659,659,-600,-518,575,574,740,-600,-99,-600,741,-600,-600,-600',
'-600,-600,-600,-600,527,-600,-600,-600,-419,605,607,606,603,-594,-95',
'-93,783,522,523,-600,-600,-600,605,-94,568,-600,-600,-600,-600,209,268',
'-600,-600,-600,-103,-600,-101,718,215,558,557,556,-100,559,-600,-600',
'-600,-600,-428,-95,-93,540,-95,-93,542,-600,-600,-106,-600,-600,-600',
'-600,-600,-95,-93,-292,-506,-503,784,-102,607,606,-292,-506,-503,605',
'455,540,-594,759,539,-292,-506,607,606,608,-600,-600,-600,-600,-600',
'-600,-600,-600,-600,-600,-600,-600,-600,-600,-594,-428,-600,-600,-600',
'605,785,-600,-428,605,-600,-517,610,-600,-600,841,-600,-428,-600,259',
'-600,-104,-600,-600,-600,-600,-600,-600,-600,-107,-600,-600,-600,-511',
'113,-428,607,606,613,112,-511,769,-518,-600,-600,-600,-600,-600,-600',
'-503,-600,540,-600,-90,542,113,-503,-503,-503,-103,112,-503,-503,-503',
'-99,-503,607,606,625,240,607,606,83,-503,-514,-503,-503,-503,240,316',
'84,-514,-593,-92,-91,-503,-503,317,-503,-503,-503,-503,-503,-512,-101',
'-100,-600,-600,216,217,-512,237,113,-600,-600,239,238,112,-596,-596',
'237,220,-600,-600,239,238,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'-503,-503,-503,-503,-503,-600,-600,-503,-503,-503,-503,-503,-503,262',
'357,-503,381,-503,-503,-503,263,-503,-593,-503,384,-503,-503,-503,-503',
'-503,-503,-503,-503,-503,527,-503,638,-503,387,718,-510,558,557,556',
'-593,559,637,-510,216,217,-503,-503,-503,-503,-291,-503,214,-503,-513',
'216,217,-291,-291,-291,-503,-513,-291,-291,-291,561,-291,558,557,556',
'565,559,-97,714,-95,113,-291,-291,-291,390,112,567,921,-106,-93,-104',
'-291,-291,406,-291,-291,-291,-291,-291,-98,-102,845,817,718,-506,558',
'557,556,563,559,-107,-506,540,411,-509,542,454,572,571,575,574,-509',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'456,262,-291,-291,-291,714,786,-291,263,457,-291,219,-508,-291,-291',
'488,-291,568,-291,-508,-291,271,-291,-291,-291,-291,-291,-291,-291,498',
'-291,501,-291,503,718,213,558,557,556,113,559,-70,588,220,112,-291,-291',
'-291,-291,-506,-291,586,-291,216,217,113,-506,-506,-506,-105,112,-506',
'-506,-506,718,-506,558,557,556,800,559,213,714,-506,113,-506,-506,-506',
'531,112,567,717,845,817,512,-506,-506,453,-506,-506,-506,-506,-506,318',
'319,513,520,718,274,558,557,556,563,559,718,220,558,557,556,271,559',
'524,528,575,574,529,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506',
'-506,-506,-506,-506,240,240,-506,-506,-506,714,-506,-506,537,543,-506',
'544,714,-506,-506,503,-506,568,-506,240,-506,717,-506,-506,-506,-506',
'-506,-506,-506,585,-506,400,-506,237,589,254,255,239,238,235,236,590',
'612,616,619,-506,-506,-506,-506,622,-506,237,-506,629,-265,239,238,235',
'236,-506,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199',
'203,204,183,172,186,190,192,184,177,631,220,635,193,200,195,194,187',
'197,182,170,189,188,116,117,118,119,120,169,176,167,168,164,165,166',
'124,126,240,636,125,718,271,558,557,556,647,559,240,158,159,240,154',
'136,137,138,145,142,144,240,240,139,140,220,-338,213,160,161,146,147',
'237,-338,956,220,239,238,235,236,220,714,-338,745,-85,151,150,677,135',
'157,153,152,148,149,143,141,133,156,134,220,533,162,-283,688,-515,694',
'695,-516,220,-283,702,-515,705,718,-516,558,557,556,-283,559,-515,155',
'706,-516,708,710,163,174,185,175,198,171,191,181,180,201,202,196,179',
'178,173,199,203,204,183,172,186,190,192,184,177,714,712,721,193,200',
'195,366,365,367,364,170,189,188,116,117,118,119,120,169,176,167,168',
'361,362,363,359,126,97,96,360,718,99,558,557,556,722,559,723,158,159',
'725,154,136,137,138,145,142,144,585,732,139,140,762,213,-292,160,161',
'146,147,763,1006,-292,764,-266,373,770,488,488,714,1004,-292,220,151',
'150,788,135,157,153,152,148,149,143,141,133,156,134,213,213,162,-291',
'-283,-515,259,212,956,501,-291,-283,-515,503,688,-597,210,745,220,-291',
'-283,-515,155,271,271,688,240,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,240,817',
'220,193,200,195,194,187,197,182,170,189,188,116,117,118,119,120,169',
'176,167,168,164,165,166,124,126,123,839,125,220,953,240,558,557,556',
'817,559,158,159,849,154,136,137,138,145,142,144,254,255,139,140,220',
'-267,876,160,161,146,147,953,879,558,557,556,237,559,243,705,239,238',
'235,236,151,150,882,135,157,153,152,148,149,143,141,133,156,134,213',
'-516,162,91,-292,213,885,519,-516,887,889,-292,452,92,220,891,517,-516',
'892,688,-292,453,155,900,-265,904,906,163,174,185,175,198,171,191,181',
'180,201,202,196,179,178,173,199,203,204,183,172,186,190,192,184,177',
'907,220,705,193,200,195,194,187,197,182,170,189,188,116,117,118,119',
'120,169,176,167,168,164,165,166,124,126,910,912,125,868,869,240,914',
'870,107,108,916,158,159,916,154,136,137,138,145,142,144,254,255,139',
'140,220,922,924,160,161,146,147,926,220,936,937,220,237,940,243,-268',
'239,238,235,236,151,150,950,135,157,153,152,148,149,143,141,133,156',
'134,-291,957,162,91,958,960,961,-291,-291,977,213,979,-597,92,980,-291',
'-291,743,984,705,-597,989,155,991,-291,993,745,163,174,185,175,198,171',
'191,181,180,201,202,196,179,178,173,199,203,204,183,172,186,190,192',
'184,177,995,995,1002,193,200,195,194,187,197,182,170,189,188,1007,1008',
'916,916,916,169,176,167,168,164,165,166,124,126,1013,977,125,-597,-596',
'694,977,1036,1037,1038,1039,158,159,995,154,136,137,138,145,142,144',
'995,995,139,140,220,916,977,160,161,146,147,3,,,,,,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,91,,,,,,,,,,92,,,,,,,',
',155,,,,,163,174,185,175,198,171,191,181,180,201,202,196,179,178,173',
'199,203,204,183,172,186,190,192,184,177,,,,193,200,195,194,187,197,182',
'170,189,188,,,,,,169,176,167,168,164,165,166,124,126,,,125,,,,,,,,,158',
'159,,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,',
',,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,91',
',,,,,,,,,92,,,,,,,,,155,,,,,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,,,,193,200',
'195,194,187,197,182,170,189,188,,,,,,169,176,167,168,164,165,166,124',
'126,397,396,125,,398,,,,,,,158,159,,154,136,137,138,145,142,144,,,139',
'140,,,,160,161,146,147,,,,,,,,,,,,,,151,150,,135,157,153,152,148,149',
'143,141,133,156,134,,,162,,,,,,,,,,,,8,72,73,74,12,60,,,155,66,67,,',
'163,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,',
'648,11,48,10,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43',
',,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,258,,-242,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,648,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,',
'254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245',
'241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,8,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,632,11,48,10,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236',
'247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88',
'90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253',
',233,234,,,254,255,,43,,,294,,,61,62,,,63,,38,237,,243,47,239,238,235',
'236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81',
'88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252',
'253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,',
',,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92',
',258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38',
'237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89',
',,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62',
',,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85',
'86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240',
'244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36',
',,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43',
',,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23',
'242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241',
'23,242,,,,91,83,85,86,87,89,,,,84,92,220,258,,,,,65,,,81,88,90,292,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90',
'292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236',
'247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88',
'90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253',
',233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235',
'236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81',
'88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,,,252,253,',
',,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,-620,-620',
',,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,-620,-620',
',,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254',
'255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241',
'23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,',
'243,47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,,,,,,,,,,,,,,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,,,241,23,242,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,240,,,,,,,,,,,,,,,,254,255,,43',
',,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,,,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,',
'61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,',
'61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,',
'61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,294,',
',61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,294,',
',61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,',
'48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,240',
'244,249,250,251,246,248,256,,252,253,,,,,,254,255,,225,,,231,,,61,62',
',,63,,283,237,281,243,47,239,238,235,236,247,245,241,230,242,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,718,63,558,557,556,800,559,47,,,,,,,,23',
'567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60',
',575,574,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,232,,,,568,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47',
',,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,718,63,558,557',
'556,565,559,47,,,,,,,,230,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
'563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,568,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,718,63,558,557,556,565,559,47,,,,,,,,230,567,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,718,63,558,557,556,565,559,47',
',,,,,,,230,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90',
'72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,568,,,48,,,105,104,106,95,59,97,96,98,',
'99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,718',
'63,558,557,556,565,559,47,,,,,,,,230,567,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,568,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,718,63,558,557,556,800,559,47,,,,,,,,230,567,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575',
'574,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,718,63,558,557,556,800',
'559,47,,,,,,,,230,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81',
'88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,309,310,75,76,,,,',
',305,306,312,101,100,102,103,,,232,,,,568,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,718,63,558,557,556,800,559,47,,,,,,,,230,567,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,568,,',
'48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,',
',,,,,,,,,,,,225,,,231,,,61,62,,718,63,558,557,556,565,559,47,,,,,,,',
'230,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74',
',60,,575,574,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,220,,,,,,65,,286,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',,,313,,,,,,,,,,,,,,,,,,,,894,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,',
'48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,',
',,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,',
',105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,',
',,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,299,,,61,62,,,63,,298,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,231,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,315,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,',
'305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,231,,,61,62,,',
'63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,515,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,',
',,,,,,,,,,,,,,,,894,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,967',
',,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,672',
',,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,533,,61,62,,,63,,,,,,47',
',,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,220,,,,,,65,,,81,88,90,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,',
',105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,',
',,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,',
',,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,591,59,97,96,592,',
'99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,593,,,231,,,61,62,,,63,',
',,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,591,59,97,96,592,,99,107,108,',
'93,94,,,,313,,,,,,,,,,,,,,,,,,,,593,,,231,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,113,,,,,112,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,',
',,,,,,,,,,,,,,,,351,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,10,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,',
',,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310',
'75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,',
',63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,400,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,225,,,231,,,61,62,,,63,,672,,281,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,',
',,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,',
',,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62',
',,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281',
',47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,416,,,,47',
',,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
'285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,',
',,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,672,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,416,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,220',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96',
'98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,767,,,,47,,,,,,',
',230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,672,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,',
',,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,299,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,',
',,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,416,,,,47,,,,,,,,230,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283',
',,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,-284,91,83,85,86,87,89,-284,-284,-284,84,92,-284,-284',
'-284,,-284,,65,,,81,88,90,,,-284,-284,-284,,,,,,,,-284,-284,,-284,-284',
'-284,-284,-284,,,,,,,,,,,,,,,,,,,,,,,,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,,,-284,-284,-284,,,-284,,,-284',
',,-284,-284,,-284,,-284,,-284,,-284,-284,-284,-284,-284,-284,-284,,-284',
',-284,,,,,,,,,,,,,-284,-284,-284,-284,-601,-284,,-284,,,,-601,-601,-601',
',,-601,-601,-601,561,-601,558,557,556,565,559,,,,-601,-601,-601,-601',
',,567,,,,,-601,-601,,-601,-601,-601,-601,-601,,,,,,,,,,563,753,,,,,',
',,572,571,575,574,,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601',
'-601,-601,-601,-601,,,-601,-601,-601,,,-601,,,-601,,,-601,-601,,-601',
'568,-601,,-601,,-601,-601,-601,-601,-601,-601,-601,,-601,-601,-601,',
',,,,,,,,,,,-601,-601,-601,-601,-602,-601,,-601,,,,-602,-602,-602,,,-602',
'-602,-602,561,-602,558,557,556,565,559,,,,-602,-602,-602,-602,,,567',
',,,,-602,-602,,-602,-602,-602,-602,-602,,,,,,,,,,563,,,,,,,,,572,571',
'575,574,,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602',
'-602,-602,,,-602,-602,-602,,,-602,,,-602,,,-602,-602,,-602,568,-602',
',-602,,-602,-602,-602,-602,-602,-602,-602,,-602,-602,-602,,,,,,,,,,',
',,-602,-602,-602,-602,-427,-602,,-602,,,,-427,-427,-427,,,-427,-427',
'-427,561,-427,558,557,556,565,559,,,,-427,-427,-427,,,,567,,,,,-427',
'-427,,-427,-427,-427,-427,-427,,,,,,,,,,563,,,,,,,,,572,571,575,574',
',-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427',
',,-427,-427,-427,,,-427,,271,-427,,,-427,-427,,-427,568,-427,,-427,',
'-427,-427,-427,-427,-427,-427,-427,,-427,-427,-427,,,,,,,,,,,,-298,-427',
'-427,,-427,,-427,-298,-298,-298,,,-298,-298,-298,799,-298,558,557,556',
'800,559,,,,,-298,-298,,,,567,,,,,-298,-298,,-298,-298,-298,-298,-298',
',,,,,,,,,563,,,,,,,,,572,571,575,574,,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,,,-298,-298,-298,,,-298,,274',
'-298,,,-298,-298,,-298,568,-298,,-298,,-298,-298,-298,-298,-298,-298',
'-298,,-298,,-298,,,,,,,,,,,,-619,-298,-298,,-298,,-298,-619,-619,-619',
',,-619,-619,-619,799,-619,558,557,556,800,559,,,,-619,-619,-619,,,,567',
',,,,-619,-619,,-619,-619,-619,-619,-619,,,,,,,,,,563,,,,,,,,,572,571',
'575,574,,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619',
'-619,-619,,,-619,-619,-619,,,-619,,271,-619,,,-619,-619,,-619,568,-619',
',-619,,-619,-619,-619,-619,-619,-619,-619,,-619,-619,-619,,,,,,,,,,',
',-619,-619,-619,,-619,,-619,-619,-619,-619,,,-619,-619,-619,,-619,799',
',558,557,556,800,559,,-619,-619,,,,,,,567,,,-619,-619,,-619,-619,-619',
'-619,-619,,,561,,558,557,556,565,559,,,563,,,,,,,567,,572,571,575,574',
',,,,,,,,,,-619,,,,,,563,-619,,,,,271,-619,220,572,571,575,574,,,,568',
',652,436,,,653,,,,,,-619,-619,,158,159,,154,136,137,138,145,142,144',
',-619,139,140,568,,-619,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,486,429,,,487',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,735,429,,,736,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',737,436,,,738,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,1031,436,,,1032,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,1029,429,,,1030,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,561,162,558,557,556,565,559',
',,,,486,429,,,487,567,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,563,,,160,161,146,147,,,572,571,575,574,,,,,,,,151,150',
',135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,568,1001',
'436,,,1000,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139',
'140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148',
'149,143,141,133,156,134,,,162,,,,,,,,,,432,436,,,431,,,,,,155,,,158',
'159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,',
',,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,',
'162,,,,,,,,,,425,429,,,426,,,,,,155,,,158,159,163,154,136,137,138,145',
'142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157',
'153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,652,436,,,653,,,',
',,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161',
'146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133',
'156,134,,,162,,,,,,,,,,650,429,,,651,,,,,,155,,,158,159,163,154,136',
'137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151',
'150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,684',
'436,,,685,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140',
',,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149',
'143,141,133,156,134,,,162,,,,,,,,,,650,429,,,651,,,,,,155,,,158,159',
'163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271',
',,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,',
',,,,,,,853,436,,,854,,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153',
'152,148,149,143,141,133,156,134,,,162,,,,,,,,,,681,429,,,682,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',561,162,558,557,556,565,559,561,,558,557,556,565,559,,,567,,,,,155',
',567,,799,163,558,557,556,800,559,,,,,,,563,753,,567,,,,563,547,572',
'571,575,574,,,,572,571,575,574,,,,,,563,,,,,,,,,572,571,575,574,,,,',
',,,568,,,,,,,568,,,,,,,,,,,,,,,,,,568' ]
        racc_action_table = arr = ::Array.new(25632, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'431,925,1029,903,1046,1044,308,431,431,431,756,756,597,431,431,64,431',
'879,921,664,921,921,921,852,921,546,492,385,879,1030,341,738,1031,705',
'705,391,431,431,850,431,431,431,431,431,342,449,449,951,737,349,951',
'348,676,664,736,589,22,692,692,3,492,879,879,676,735,352,851,431,431',
'431,431,431,431,431,431,431,431,431,431,431,431,582,581,431,431,431',
'663,431,385,385,385,431,22,308,431,879,921,738,391,431,756,431,64,431',
'431,431,431,431,431,431,1031,431,388,431,737,925,1029,903,597,1044,925',
'1029,903,852,1044,432,431,431,852,431,546,431,432,432,432,449,738,597',
'432,432,431,432,597,1030,341,617,1031,692,1030,341,432,1031,850,737',
'349,850,348,850,342,736,589,432,432,342,432,432,432,432,432,735,352',
'851,223,663,29,388,13,702,682,681,375,582,581,484,493,123,582,581,702',
'15,123,123,432,432,432,432,432,432,432,432,432,432,432,432,432,432,617',
'617,432,432,432,982,432,982,787,617,432,484,493,432,224,702,702,593',
'432,223,432,593,432,432,432,432,432,432,432,454,432,432,432,29,614,375',
'375,375,592,682,681,650,313,313,652,432,432,377,432,702,432,652,652',
'652,16,29,652,652,652,432,652,787,717,19,717,717,717,224,717,652,652',
'652,652,812,682,681,331,682,681,331,652,652,454,652,652,652,652,652',
'682,681,520,592,359,651,650,614,614,520,592,359,382,226,330,592,614',
'330,520,592,377,377,377,652,652,652,652,652,652,652,652,652,652,652',
'652,652,652,592,812,652,652,652,393,652,652,812,379,652,41,379,652,652',
'717,652,812,652,25,652,651,652,652,652,652,652,652,652,226,652,652,652',
'364,860,812,382,382,382,860,364,633,42,684,853,652,652,652,652,95,652',
'335,652,41,335,5,95,95,95,652,5,95,95,95,41,95,393,393,393,460,379,379',
'80,95,363,95,95,95,461,40,80,363,591,633,42,95,95,43,95,95,95,95,95',
'362,633,42,684,853,750,750,362,460,934,684,853,460,460,934,684,853,461',
'48,684,853,461,461,95,95,95,95,95,95,95,95,95,95,95,95,95,95,684,853',
'95,95,95,591,95,95,369,72,95,87,591,95,95,369,95,591,95,88,95,591,95',
'95,95,95,95,95,95,317,95,426,95,89,839,367,839,839,839,591,839,425,367',
'326,326,95,95,95,95,653,95,18,95,361,340,340,653,653,653,95,361,653',
'653,653,708,653,708,708,708,708,708,317,839,426,754,653,653,653,90,754',
'708,839,317,425,426,653,653,121,653,653,653,653,653,18,425,1015,1015',
'922,360,922,922,922,708,922,18,360,697,205,366,697,225,708,708,708,708',
'366,653,653,653,653,653,653,653,653,653,653,653,653,653,653,227,27,653',
'653,653,922,653,653,27,228,653,232,365,653,653,264,653,708,653,365,653',
'267,653,653,653,653,653,653,653,278,653,279,653,282,563,350,563,563',
'563,749,563,293,350,295,749,653,653,653,653,98,653,350,653,20,20,345',
'98,98,98,653,345,98,98,98,1039,98,1039,1039,1039,1039,1039,320,563,98',
'289,98,98,98,320,289,1039,563,724,724,296,98,98,320,98,98,98,98,98,44',
'44,297,303,841,306,841,841,841,1039,841,714,307,714,714,714,312,714',
'314,318,1039,1039,319,98,98,98,98,98,98,98,98,98,98,98,98,98,98,322',
'479,98,98,98,841,98,98,328,332,98,333,714,98,98,336,98,1039,98,468,98',
'714,98,98,98,98,98,98,98,346,98,347,98,479,351,468,468,479,479,479,479',
'353,381,384,387,98,98,98,98,390,98,468,98,412,414,468,468,468,468,98',
'755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755',
'755,755,755,755,755,755,755,417,420,423,755,755,755,755,755,755,755',
'755,755,755,291,291,291,291,291,755,755,755,755,755,755,755,755,755',
'480,424,755,1013,433,1013,1013,1013,441,1013,462,755,755,463,755,755',
'755,755,755,755,755,464,465,755,755,494,49,955,755,755,755,755,480,49',
'955,495,480,480,480,480,510,1013,49,955,511,755,755,514,755,755,755',
'755,755,755,755,755,755,755,755,516,521,755,968,525,964,534,535,965',
'536,968,549,964,550,977,965,977,977,977,968,977,964,755,552,965,553',
'554,755,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,977,561,569,74,74,74,74,74,74,74,74,74,74,509,509,509,509',
'509,74,74,74,74,74,74,74,74,74,74,74,74,975,74,975,975,975,573,975,576',
'74,74,578,74,74,74,74,74,74,74,583,584,74,74,621,966,741,74,74,74,74',
'624,966,741,626,630,74,634,639,645,975,966,741,654,74,74,656,74,74,74',
'74,74,74,74,74,74,74,74,17,893,74,854,304,300,662,17,893,669,854,304',
'300,671,678,854,17,893,680,854,304,300,74,683,686,687,690,74,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,691,693',
'701,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,11,11,11,11,11,11,11,11',
'11,11,716,11,719,999,467,999,999,999,726,999,11,11,731,11,11,11,11,11',
'11,11,467,467,11,11,734,766,771,11,11,11,11,891,789,891,891,891,467',
'891,467,790,467,467,467,467,11,11,792,11,11,11,11,11,11,11,11,11,11',
'11,302,301,11,11,1007,222,793,302,301,794,796,1007,222,11,797,798,302',
'301,799,811,1007,222,11,815,818,819,823,11,628,628,628,628,628,628,628',
'628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628',
'824,825,826,628,628,628,628,628,628,628,628,628,628,675,675,675,675',
'675,628,628,628,628,628,628,628,628,628,830,831,628,757,757,466,833',
'757,757,757,834,628,628,836,628,628,628,628,628,628,628,466,466,628',
'628,838,840,843,628,628,628,628,846,856,861,862,863,466,872,466,873',
'466,466,466,466,628,628,890,628,628,628,628,628,628,628,628,628,628',
'628,685,894,628,628,895,897,898,685,1032,923,595,927,685,628,928,1032',
'685,595,933,941,1032,944,628,945,1032,946,595,628,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,947,949,959,12',
'12,12,12,12,12,12,12,12,12,967,970,971,972,973,12,12,12,12,12,12,12',
'12,12,974,976,12,1000,1001,1003,1014,1019,1020,1021,1022,12,12,1023',
'12,12,12,12,12,12,12,1024,1025,12,12,1028,1033,1034,12,12,12,12,1,,',
',,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,,,,,12,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,,,,407,407,407,407,407,407',
'407,407,407,407,,,,,,407,407,407,407,407,407,407,407,407,,,407,,,,,',
',,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407,407,407,407',
',,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407,407,407,,',
'407,407,,,,,,,,,,407,,,,,,,,,407,,,,,407,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91',
'91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91',
'91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,2,2,2,2,2,2,,,91,2,2,,,91,2',
',2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,444,2,2,2,2,2,2,2,2,2,2,2',
'2,,2,2,2,,2,2,,2,2,2,444,444,444,444,444,444,444,444,444,444,444,,444',
'444,,,444,444,,2,,,2,,,2,2,,,2,,2,444,,444,2,444,444,444,444,444,444',
'444,2,444,,,,2,2,2,2,2,2,,,,2,2,,444,,444,,,2,,,2,2,2,857,857,857,857',
'857,857,,,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,,857,857',
'857,857,857,857,857,,,857,,,,,655,857,857,,857,857,857,857,857,857,857',
'857,857,,857,857,857,,857,857,,857,857,857,655,655,655,655,655,655,655',
'655,655,655,655,,655,655,,,655,655,,857,,,857,,,857,857,,,857,,857,655',
',655,857,655,655,655,655,655,655,655,857,655,,,,857,857,857,857,857',
'857,,,,857,857,,655,,,,,857,,,857,857,857,406,406,406,406,406,406,,',
',406,406,,,,406,,406,406,406,406,406,406,406,,,,,,406,406,406,406,406',
'406,406,,,406,,,,,419,406,406,406,406,406,406,406,406,406,406,406,406',
',406,406,406,,406,406,,406,406,406,419,419,419,419,419,419,419,419,419',
'419,419,,419,419,,,419,419,,406,,,406,,,406,406,,,406,,406,419,,419',
'406,419,419,419,419,419,419,419,406,419,,,,406,406,406,406,406,406,',
',,406,406,,419,,,,,406,,,406,406,406,299,299,299,299,299,299,,,,299',
'299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299',
'299,,,299,,,,,,299,299,,299,299,299,299,299,299,299,299,299,,299,299',
'299,,299,299,,299,299,299,875,875,875,875,875,875,875,875,875,875,875',
',875,875,,,875,875,,299,,,299,,,299,299,,,299,,299,875,,875,299,875',
'875,875,875,875,875,875,299,875,,,,299,299,299,299,299,299,,,,299,299',
',875,,,,,299,,,299,299,299,847,847,847,847,847,847,,,,847,847,,,,847',
',847,847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847',
',,,,,847,847,,847,847,847,847,847,847,847,847,847,,847,847,847,,847',
'847,,847,847,847,532,532,532,532,532,532,532,532,532,532,532,,532,532',
',,532,532,,847,,,847,,,847,847,,,847,,847,532,,532,847,532,532,532,532',
'532,532,532,847,532,,,,847,847,847,847,847,847,,,,847,847,,532,,,,,847',
',,847,847,847,848,848,848,848,848,848,,,,848,848,,,,848,,848,848,848',
'848,848,848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,848,848',
',848,848,848,848,848,848,848,848,848,,848,848,848,,848,848,,848,848',
'848,276,276,276,276,276,276,276,276,276,276,276,,276,276,,,276,276,',
'848,,,848,,,848,848,,,848,,848,276,,276,848,276,276,276,276,276,276',
'276,848,276,,,,848,848,848,848,848,848,,,,848,848,,276,,,,,848,,,848',
'848,848,231,231,231,231,231,231,,,,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,231,231,,231,231',
'231,231,231,231,231,231,231,,231,231,231,,231,231,,231,231,231,778,778',
'778,778,778,778,778,778,778,778,778,,778,778,,,778,778,,231,,,231,,',
'231,231,,,231,,231,778,,778,231,778,778,778,778,778,778,778,231,778',
',,,231,231,231,231,231,231,,,,231,231,,778,,,,,231,,,231,231,231,699',
'699,699,699,699,699,,,,699,699,,,,699,,699,699,699,699,699,699,699,',
',,,,699,699,699,699,699,699,699,,,699,,,,,,699,699,,699,699,699,699',
'699,699,699,699,699,,699,699,699,,699,699,,699,699,699,775,775,775,775',
'775,775,775,775,775,775,775,,775,775,,,775,775,,699,,,699,,,699,699',
',,699,,699,775,,775,699,775,775,775,775,775,775,775,699,775,,,,699,699',
'699,699,699,699,,,,699,699,,775,,,,,699,,,699,699,699,580,580,580,580',
'580,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,,580,580',
'580,580,580,580,580,,,580,,,,,,580,580,,580,580,580,580,580,580,580',
'580,580,,580,580,580,,580,580,,580,580,580,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,580,,,580,,,580,580,,,580,,580,24,,24,580,24,24',
'24,24,24,24,24,580,24,,,,580,580,580,580,580,580,,,,580,580,,24,,,,',
'580,,,580,580,580,987,987,987,987,987,987,,,,987,987,,,,987,,987,987',
'987,987,987,987,987,,,,,,987,987,987,987,987,987,987,,,987,,,,,,987',
'987,,987,987,987,987,987,987,987,987,987,,987,987,987,,987,987,,987',
'987,987,878,878,878,878,878,878,878,878,878,878,878,,878,878,,,878,878',
',987,,,987,,,987,987,,,987,,987,878,,878,987,878,878,878,878,878,878',
'878,987,878,,,,987,987,987,987,987,987,,,,987,987,,878,,,,,987,,,987',
'987,987,751,751,751,751,751,751,,,,751,751,,,,751,,751,751,751,751,751',
'751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,751,751,,751,751',
'751,751,751,751,751,751,751,,751,751,751,,751,751,,751,751,751,689,689',
'689,689,689,689,689,689,689,689,689,,689,689,,,689,689,,751,,,751,,',
'751,751,,,751,,751,689,,689,751,689,689,689,689,689,689,689,751,689',
',,,751,751,751,751,751,751,,,,751,751,,689,,,,,751,,,751,751,751,752',
'752,752,752,752,752,,,,752,752,,,,752,,752,752,752,752,752,752,752,',
',,,,752,752,752,752,752,752,752,,,752,,,,,,752,752,,752,752,752,752',
'752,752,752,752,752,,752,752,752,,752,752,,752,752,752,780,780,780,780',
'780,780,780,780,780,780,780,,780,780,,,780,780,,752,,,752,,,752,752',
',,752,,752,780,,780,752,780,780,780,780,780,780,780,752,780,,,,752,752',
'752,752,752,752,,,,752,752,,780,,,,,752,,,752,752,752,577,577,577,577',
'577,577,,,,577,577,,,,577,,577,577,577,577,577,577,577,,,,,,577,577',
'577,577,577,577,577,,,577,,,,,,577,577,,577,577,577,577,577,577,577',
'577,577,,577,577,577,,577,577,,577,577,577,439,439,439,439,439,439,439',
'439,439,439,439,,439,439,,,439,439,,577,,,577,,,577,577,,,577,,577,439',
',439,577,439,439,439,439,439,439,439,577,439,,,,577,577,577,577,577',
'577,,,,577,577,,439,,,,,577,,,577,577,577,963,963,963,963,963,963,,',
',963,963,,,,963,,963,963,963,963,963,963,963,,,,,,963,963,963,963,963',
'963,963,,,963,,,,,,963,963,,963,963,963,963,963,963,963,963,963,,963',
'963,963,,963,963,,963,963,963,483,483,483,483,483,483,483,483,483,483',
'483,,483,483,,,483,483,,963,,,963,,,963,963,,,963,,963,483,,483,963',
'483,483,483,483,483,483,483,963,483,,,,963,963,963,963,963,963,,,,963',
'963,483,483,,,,,963,,,963,963,963,983,983,983,983,983,983,,,,983,983',
',,,983,,983,983,983,983,983,983,983,,,,,,983,983,983,983,983,983,983',
',,983,,,,,,983,983,,983,983,983,983,983,983,983,983,983,,983,983,983',
',983,983,,983,983,983,768,768,768,768,768,768,768,768,768,768,768,,768',
'768,,,768,768,,983,,,983,,,983,983,,,983,,983,768,,768,983,768,768,768',
'768,768,768,768,983,768,,,,983,983,983,983,983,983,,,,983,983,,768,',
',,,983,,,983,983,983,207,207,207,207,207,207,,,,207,207,,,,207,,207',
'207,207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,',
'207,207,,207,207,207,207,207,207,207,207,207,,207,207,207,,207,207,',
'207,207,207,782,782,782,782,782,782,782,782,782,782,782,,782,782,,,782',
'782,,207,,,207,,,207,207,,,207,,207,782,,782,207,782,782,782,782,782',
'782,782,207,782,,,,207,207,207,207,207,207,,,,207,207,,782,,,,,207,',
',207,207,207,978,978,978,978,978,978,,,,978,978,,,,978,,978,978,978',
'978,978,978,978,,,,,,978,978,978,978,978,978,978,,,978,,,,,,978,978',
',978,978,978,978,978,978,978,978,978,,978,978,978,,978,978,,978,978',
'978,773,773,773,773,773,773,773,773,773,773,773,,773,773,,,773,773,',
'978,,,978,,,978,978,,,978,,978,773,,773,978,773,773,773,773,773,773',
'773,978,773,,,,978,978,978,978,978,978,,,,978,978,,773,,,,,978,,,978',
'978,978,986,986,986,986,986,986,,,,986,986,,,,986,,986,986,986,986,986',
'986,986,,,,,,986,986,986,986,986,986,986,,,986,,,,,,986,986,,986,986',
'986,986,986,986,986,986,986,,986,986,986,,986,986,,986,986,986,481,481',
'481,481,481,481,481,,,481,481,,,,,,481,481,,986,,,986,,,986,986,,,986',
',986,481,,481,986,481,481,481,481,481,481,481,986,481,,,,986,986,986',
'986,986,986,,,,986,986,,,,,,,986,,,986,986,986,803,803,803,803,803,803',
',,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803',
'803,803,803,,,803,,,,,,803,803,,803,803,803,803,803,803,803,803,803',
',803,803,803,,803,803,,803,803,803,459,459,459,459,459,459,459,459,459',
'459,459,,459,459,,,459,459,,803,,,803,,,803,803,,,803,,803,459,,459',
'803,459,459,459,459,459,459,459,803,459,,,,803,803,803,803,803,803,',
',,803,803,,,,,,,803,,,803,803,803,807,807,807,807,807,807,,,,807,807',
',,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807',
',,807,,,,,,807,807,,807,807,807,807,807,807,807,807,807,,807,807,807',
',807,807,,807,807,807,458,458,458,458,458,458,458,458,458,458,458,,458',
'458,,,458,458,,807,,,807,,,807,807,,,807,,807,458,,458,807,458,458,458',
'458,458,458,458,807,458,,,,807,807,807,807,807,807,,,,807,807,,,,,,',
'807,,,807,807,807,808,808,808,808,808,808,,,,808,808,,,,808,,808,808',
'808,808,808,808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,,808',
'808,,808,808,808,808,808,808,808,808,808,,808,808,808,,808,808,,808',
'808,808,469,469,469,469,469,469,469,,,469,469,,,,,,469,469,,808,,,808',
',,808,808,,,808,,808,469,,469,808,469,469,469,469,469,469,469,808,469',
',,,808,808,808,808,808,808,,,,808,808,,,,,,,808,,,808,808,808,758,758',
'758,758,758,758,,,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,',
'758,758,758,758,758,758,758,,,758,,,,,,758,758,,758,758,758,758,758',
'758,758,758,758,,758,758,758,,758,758,,758,758,758,470,,,,,,,,,,,,,',
',,470,470,,758,,,758,,,758,758,,,758,,758,470,,470,758,470,470,470,470',
',,470,758,470,,,,758,758,758,758,758,758,,,,758,758,,,,,,,758,,,758',
'758,758,325,325,325,325,325,325,,,,325,325,,,,325,,325,325,325,325,325',
'325,325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,325,325,,325,325',
'325,325,325,325,325,325,325,,325,325,325,,325,325,,325,325,325,471,',
',,,,,,,,,,,,,,471,471,,325,,,325,,,325,325,,,325,,325,471,,471,325,471',
'471,471,471,,,471,325,471,,,,325,325,325,325,325,325,,,,325,325,,,,',
',,325,,,325,325,325,930,930,930,930,930,930,,,,930,930,,,,930,,930,930',
'930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,930',
'930,,930,930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930',
'930,930,472,,,,,,,,,,,,,,,,472,472,,930,,,930,,,930,930,,,930,,930,472',
',472,930,472,472,472,472,,,472,930,472,,,,930,930,930,930,930,930,,',
',930,930,,,,,,,930,,,930,930,930,817,817,817,817,817,817,,,,817,817',
',,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817,817',
',,817,,,,,,817,817,,817,817,817,817,817,817,817,817,817,,817,817,817',
',817,817,,817,817,817,473,,,,,,,,,,,,,,,,473,473,,817,,,817,,,817,817',
',,817,,817,473,,473,817,473,473,473,473,,,473,817,473,,,,817,817,817',
'817,817,817,,,,817,817,,,,,,,817,,,817,817,817,700,700,700,700,700,700',
',,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700',
'700,700,700,,,700,,,,,,700,700,,700,700,700,700,700,700,700,700,700',
',700,700,700,,700,700,,700,700,700,474,474,474,474,474,474,474,,,474',
'474,,,,,,474,474,,700,,,700,,,700,700,,,700,,700,474,,474,700,474,474',
'474,474,474,474,474,700,474,,,,700,700,700,700,700,700,,,,700,700,,',
',,,,700,,,700,700,700,900,900,900,900,900,900,,,,900,900,,,,900,,900',
'900,900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900,,,,,',
'900,900,,900,900,900,900,900,900,900,900,900,,900,900,900,,900,900,',
'900,900,900,475,475,475,475,475,475,475,,,475,475,,,,,,475,475,,900',
',,900,,,900,900,,,900,,900,475,,475,900,475,475,475,475,475,475,475',
'900,475,,,,900,900,900,900,900,900,,,,900,900,,,,,,,900,,,900,900,900',
'896,896,896,896,896,896,,,,896,896,,,,896,,896,896,896,896,896,896,896',
',,,,,896,896,896,896,896,896,896,,,896,,,,,,896,896,,896,896,896,896',
'896,896,896,896,896,,896,896,896,,896,896,,896,896,896,476,476,476,476',
'476,476,476,,,476,476,,,,,,476,476,,896,,,896,,,896,896,,,896,,896,476',
',476,896,476,476,476,476,476,476,476,896,476,,,,896,896,896,896,896',
'896,,,,896,896,,,,,,,896,,,896,896,896,36,36,36,36,36,36,,,,36,36,,',
',36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36',
',36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,477,477,477,477',
'477,477,477,,,477,477,,,,,,477,477,,36,,,36,,,36,36,,,36,,36,477,,477',
'36,477,477,477,477,477,477,477,36,477,,,,36,36,36,36,36,36,,,,36,36',
',,,,,,36,,,36,36,36,294,294,294,294,294,294,,,,294,294,,,,294,,294,294',
'294,294,294,294,294,,,,,,294,294,294,294,294,294,294,,,294,,,,,,294',
'294,,294,294,294,294,294,294,294,294,294,,294,294,294,,294,294,,294',
'294,294,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,294,,,294',
',,294,294,,,294,,294,478,,478,294,478,478,478,478,478,478,478,294,478',
',,,294,294,294,294,294,294,,,,294,294,,,,,,,294,,,294,294,294,33,33',
'33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33',
',,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33',
'482,482,482,482,482,482,482,482,,482,482,,,,,,482,482,,33,,,33,,,33',
'33,,,33,,33,482,33,482,33,482,482,482,482,482,482,482,33,482,,,,33,33',
'33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,739,739,739,,739,,,,739,739',
',,,739,,739,739,739,739,739,739,739,,,,,,739,739,739,739,739,739,739',
',,739,,,,,,,739,,,739,739,739,739,739,739,739,739,,739,739,739,,739',
'739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,887,739,887',
'887,887,887,887,739,,,,,,,,739,887,,,,739,739,739,739,739,739,,,,739',
'739,,,,,,,739,887,,739,739,739,745,745,745,,745,,887,887,745,745,,,',
'745,,745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,',
'745,,,,887,,,745,,,745,745,745,745,745,745,745,745,745,745,745,745,',
'745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,745',
',745,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745',
',745,745,745,745,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255',
'255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255',
'255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,',
',,,,,,,,,,255,,,255,,,255,255,,710,255,710,710,710,710,710,255,,,,,',
',,255,710,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,710,,255,255',
'255,767,767,767,,767,,710,710,767,767,,,,767,,767,767,767,767,767,767',
'767,,,,,,767,767,767,767,767,767,767,,,767,,,,710,,,767,,,767,767,767',
'767,767,767,767,767,,767,767,767,,767,767,,767,767,767,,,,,,,,,,,,,',
',,,,,,767,,,767,,,767,767,,912,767,912,912,912,912,912,767,,,,,,,,767',
'912,,,,767,767,767,767,767,767,,,,767,767,,,,,,,767,912,,767,767,767',
'769,769,769,,769,,912,912,769,769,,,,769,,769,769,769,769,769,769,769',
',,,,,769,769,769,769,769,769,769,,,769,,,,912,,,769,,,769,769,769,769',
'769,769,769,769,,769,769,769,,769,769,,769,769,769,,,,,,,,,,,,,,,,,',
',,769,,,769,,,769,769,,914,769,914,914,914,914,914,769,,,,,,,,769,914',
',,,769,769,769,769,769,769,,,,769,769,,,,,,,769,914,,769,769,769,256',
'256,256,,256,,914,914,256,256,,,,256,,256,256,256,256,256,256,256,,',
',,,256,256,256,256,256,256,256,,,256,,,,914,,,256,,,256,256,256,256',
'256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,',
',,256,,,256,,,256,256,,916,256,916,916,916,916,916,256,,,,,,,,256,916',
',,,256,256,256,256,256,256,,,,256,256,,,,,,,256,916,,256,256,256,783',
'783,783,,783,,916,916,783,783,,,,783,,783,783,783,783,783,783,783,,',
',,,783,783,783,783,783,783,783,,,783,,,,916,,,783,,,783,783,783,783',
'783,783,783,783,,783,783,783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,',
',,783,,,783,,,783,783,,991,783,991,991,991,991,991,783,,,,,,,,783,991',
',,,783,783,783,783,783,783,,,,783,783,,,,,,,783,991,,783,783,783,784',
'784,784,,784,,991,991,784,784,,,,784,,784,784,784,784,784,784,784,,',
',,,784,784,784,784,784,784,784,,,784,,,,991,,,784,,,784,784,784,784',
'784,784,784,784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,',
',,784,,,784,,,784,784,,993,784,993,993,993,993,993,784,,,,,,,,784,993',
',,,784,784,784,784,784,784,,,,784,784,,,,,,,784,993,,784,784,784,785',
'785,785,,785,,993,993,785,785,,,,785,,785,785,785,785,785,785,785,,',
',,,785,785,785,785,785,785,785,,,785,,,,993,,,785,,,785,785,785,785',
'785,785,785,785,,785,785,785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,',
',,785,,,785,,,785,785,,995,785,995,995,995,995,995,785,,,,,,,,785,995',
',,,785,785,785,785,785,785,,,,785,785,,,,,,,785,995,,785,785,785,786',
'786,786,,786,,995,995,786,786,,,,786,,786,786,786,786,786,786,786,,',
',,,786,786,786,786,786,786,786,,,786,,,,995,,,786,,,786,786,786,786',
'786,786,786,786,,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,',
',,786,,,786,,,786,786,,1008,786,1008,1008,1008,1008,1008,786,,,,,,,',
'786,1008,,,,786,786,786,786,786,786,,,,786,786,,,,,,,786,1008,,786,786',
'786,788,788,788,,788,,1008,1008,788,788,,,,788,,788,788,788,788,788',
'788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,1008,,,788,,,788,788',
'788,788,788,788,788,788,,788,788,788,,788,788,,788,788,788,,,,,,,,,',
',,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,788,,,,,788,788',
'788,788,788,788,,,,788,788,,,,,,,788,,,788,788,788,257,257,257,,257',
',,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257',
'257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257',
'257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257',
',,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257',
',,257,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,265,265,265,,265,,,,265',
'265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265',
'265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265,265,265',
',265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,',
'265,,265,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,',
',,265,,265,265,265,265,271,271,271,,271,,,,271,271,,,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,271,271,271,271,,271,271,,271,271,271,,',
',,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,271,,271,,271,,,,,,,,271',
',,,,271,271,271,271,271,271,,,,271,271,,,,,,,271,,271,271,271,271,274',
'274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274,274,,,,,,274',
'274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274,274,274',
'274,274,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274',
',,274,274,,,274,,274,,274,,274,,,,,,,,274,,,,,274,274,274,274,274,274',
',,,274,274,274,,,,,,274,,274,274,274,274,800,800,800,,800,,,,800,800',
',,,800,,800,800,800,800,800,800,800,,,,,,800,800,800,800,800,800,800',
',,800,,,,,,,800,,,800,800,800,800,800,800,800,800,,800,800,800,,800',
'800,,,,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,,800,,,,,,,,,,,,',
',,,,,,800,800,800,800,800,800,,,,800,800,,,,,,,800,,,800,800,800,32',
'32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32',
'32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32',
'32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,',
',32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,281,281,281,,281,',
',,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,',
',,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281',
',,281,281,281,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,',
',34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34',
'34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,',
'34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34',
'283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,',
',283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283',
'283,283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,',
'283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283',
',,,283,283,,,,,,,283,,,283,283,283,285,285,285,,285,,,,285,285,,,,285',
',285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285',
',,,,,,285,,,285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285',
'285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,',
',285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,,285,,,285,285,285',
'286,286,286,,286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,',
',286,286,286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286',
'286,286,,286,286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,',
'286,,,286,286,,,286,,,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286',
',,,286,286,,,,,,,286,,,286,286,286,292,292,292,292,292,,,,292,292,,',
',292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,',
',292,,,,,,292,292,,292,292,292,292,292,292,292,292,292,,292,292,292',
',292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,',
'292,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,,,,,,,292',
',,292,292,292,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,',
',37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37',
'37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,',
',,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,38,38,38,,38',
',,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38',
',,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,',
',,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,',
',38,38,,,,38,,,38,,,38,38,38,298,298,298,,298,,,,298,298,,,,298,,298',
'298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,',
',298,,,298,298,298,298,298,298,298,298,,298,298,298,,298,298,,,,298',
',,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,,,,,,,,,,,,,,,,,298,298',
'298,298,298,298,,,,298,298,,,,298,,,298,,,298,298,298,845,845,845,,845',
',,,845,845,,,,845,,845,845,845,845,845,845,845,,,,,,845,845,845,845',
'845,845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845,,845,845',
'845,,845,845,,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,,845',
',,,,,845,,,,,,,,845,,,,,845,845,845,845,845,845,,,,845,845,,,,,,,845',
',,845,845,845,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,',
',,,,,,858,,,858,,,858,858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858',
'858,858,858,,,,858,858,,,,,,,858,,,858,858,858,876,876,876,,876,,,,876',
'876,,,,876,,876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876',
'876,,,876,,,,,,,876,,,876,876,876,876,876,876,876,876,876,876,876,876',
',876,876,,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876,',
',,876,,876,,,,,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876',
',876,876,876,876,877,877,877,,877,,,,877,877,,,,877,,877,877,877,877',
'877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877,,,877,877',
'877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877,,,,,,,,,',
',,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,,,877,877',
'877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,892,892,892,,892',
',,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,,892,892,892,892',
'892,892,892,,,892,,,,,,,892,,,892,892,892,892,892,892,892,892,,892,892',
'892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,,892,,,',
',,,,,,,,,,,,,,,892,892,892,892,892,892,,,,892,892,,,,,,,892,,,892,892',
'892,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45',
'45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45',
',45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45',
',,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,904,904,904,,904',
',,,904,904,,,,904,,904,904,904,904,904,904,904,,,,,,904,904,904,904',
'904,904,904,,,904,,,,,,,904,,,904,904,904,904,904,904,904,904,,904,904',
'904,,904,904,,,,904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,,',
',,,,,,,,,,,,,,,904,904,904,904,904,904,,,,904,904,,,,,,,904,,,904,904',
'904,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315',
',,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315',
'315,315,315,,315,315,315,,315,315,,,,315,,,,,,,,,,,,,,,,,,,,315,,,315',
',,315,315,,,315,,,,,,,,,,,,,,,,,,,315,315,315,315,315,315,,,,315,315',
',,,,,,315,,,315,315,315,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46',
',,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46',
'929,929,929,,929,,,,929,929,,,,929,,929,929,929,929,929,929,929,,,,',
',929,929,929,929,929,929,929,,,929,,,,,,,929,,,929,929,929,929,929,929',
'929,929,,929,929,929,,929,929,,929,929,929,,,,,,,,,,,,,,,,,,,,929,,',
'929,,,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929,929,929,929,929,929',
',,,929,929,,,,,,,929,,,929,929,929,47,47,47,,47,,,,47,47,,,,47,,47,47',
'47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47',
'47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,',
'47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47',
',,47,47,47,324,324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324',
'324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324',
'324,324,324,324,,324,324,324,,324,324,,324,324,324,,,,,,,,,,,,,,,,,',
',,324,,,324,324,,324,324,,,324,,,,,,324,,,,,,,,324,,,,,324,324,324,324',
'324,324,,,,324,324,,,,,,,324,,,324,324,324,61,61,61,,61,,,,61,61,,,',
'61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61',
'61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61',
',,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61',
',,,,,61,,,61,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62',
',,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62',
'62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62',
',,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62',
'343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,',
',343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343',
'343,343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,',
'343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343',
',,,343,343,,,,,,,343,,,343,343,343,1004,1004,1004,,1004,,,,1004,1004',
',,,1004,,1004,1004,1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004',
'1004,1004,1004,,,1004,,,,,,,1004,,,1004,1004,1004,1004,1004,1004,1004',
'1004,1004,1004,1004,1004,,1004,1004,,1004,1004,1004,,,,,,,,,,,,,,,,',
',,,1004,,,1004,,,1004,1004,,,1004,,1004,,1004,,1004,,,,,,,,1004,,,,',
'1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,,,,1004,,1004,1004,1004',
'1004,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344,344',
',,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344,344,344',
'344,344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344',
',,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344',
',,,344,344,,,,,,,344,,,344,344,344,63,63,63,,63,,,,63,63,,,,63,,63,63',
'63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63',
'63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63',
',,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,',
'63,,63,63,63,63,66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,',
',,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66',
'66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,',
'66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66,67,67',
'67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67',
',,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,',
',,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67',
'67,67,67,,,,67,67,,,,,,,67,,,67,67,67,356,356,356,,356,,,,356,356,,',
',356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356,',
',356,,,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,,356,356',
',,,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,',
',,356,356,356,356,356,356,,,,356,356,,,,,,,356,,,356,356,356,358,358',
'358,,358,,,,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358',
'358,358,358,358,358,,,358,,,,,,,358,,,358,358,358,358,358,358,358,358',
',358,358,358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358',
',,358,,,,,,,,,,,,,,,,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358',
',,358,358,358,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,',
',70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70',
'70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70',
',,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,71',
'71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71',
'71,71,,,,71,71,,,,,,,71,,,71,71,71,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8',
'8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8',
',8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8',
'8,8,8,,,,8,8,,,,,,,8,,,8,8,8,416,416,416,,416,,,,416,416,,,,416,,416',
'416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416,,,416,,,,,',
',416,,,416,416,416,416,416,416,416,416,,416,416,416,,416,416,,416,416',
'416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,,,416',
',,,,416,416,416,416,416,416,,,,416,416,,,,,,,416,,,416,416,416,453,453',
'453,,453,,,,453,453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453',
'453,453,453,453,453,,,453,,,,,,,453,,,453,453,453,453,453,453,453,453',
'453,453,453,453,,453,453,,453,453,453,,,,,,,,,,,,,,,,,,,,453,,,453,',
',453,453,,,453,,453,,453,,453,,,,,,,,453,,,,,453,453,453,453,453,453',
',,,453,453,,,,,,,453,,453,453,453,453,455,455,455,,455,,,,455,455,,',
',455,,455,455,455,455,455,455,455,,,,,,455,455,455,455,455,455,455,',
',455,,,,,,,455,,,455,455,455,455,455,455,455,455,,455,455,455,,455,455',
',455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,,,,,455,',
',,,,,,455,,,,,455,455,455,455,455,455,,,,455,455,,,,,,,455,,,455,455',
'455,456,456,456,,456,,,,456,456,,,,456,,456,456,456,456,456,456,456',
',,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456,456,456,456',
'456,456,456,,456,456,456,,456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456',
',,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456,456,456,456,456,456',
',,,456,456,,,,,,,456,,,456,456,456,457,457,457,,457,,,,457,457,,,,457',
',457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457',
',,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,,457,457,,457',
'457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,',
',457,,,,,457,457,457,457,457,457,,,,457,457,,,,,,,457,,,457,457,457',
'111,111,111,111,111,,,,111,111,,,,111,,111,111,111,111,111,111,111,',
',,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111,111,111,111,111',
'111,111,111,111,111,,111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,',
',,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,111,,,,,111,111,111',
'111,111,111,,,,111,111,,,,,,111,111,,,111,111,111,116,116,116,,116,',
',,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116',
'116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116',
',116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,',
',,,,116,,,,,,,,116,,,,,116,116,116,116,116,116,,,,116,116,,,,,,,116',
',,116,116,116,117,117,117,,117,,,,117,117,,,,117,,117,117,117,117,117',
'117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117,117,117',
'117,117,117,117,117,,117,117,117,,117,117,,117,117,117,,,,,,,,,,,,,',
',,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,117,,,,,117,117,117',
'117,117,117,,,,117,117,,,,,,,117,,,117,117,117,118,118,118,,118,,,,118',
'118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118',
'118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118,',
'118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,',
',,,118,,,,,,,,118,,,,,118,118,118,118,118,118,,,,118,118,,,,,,,118,',
',118,118,118,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119',
'119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119',
'119,119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,',
',,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119',
'119,119,119,,,,119,119,,,,,,,119,,,119,119,119,120,120,120,120,120,',
',,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120',
'120,120,,,120,,,,,,120,120,,120,120,120,120,120,120,120,120,120,,120',
'120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120',
',,120,,120,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120,,,,120,120',
',,,,,,120,,,120,120,120,498,498,498,,498,,,,498,498,,,,498,,498,498',
'498,498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498',
',,498,498,498,498,498,498,498,498,498,498,498,498,,498,498,,498,498',
'498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,498,,498,,498,,,,',
',,,498,,,,,498,498,498,498,498,498,,,,498,498,,,,,,,498,,498,498,498',
'498,501,501,501,,501,,,,501,501,,,,501,,501,501,501,501,501,501,501',
',,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501',
'501,501,501,501,501,501,501,,501,501,,501,501,501,,,,,,,,,,,,,,,,,,',
',501,,,501,,,501,501,,,501,,,,501,,501,,,,,,,,501,,,,,501,501,501,501',
'501,501,,,,501,501,,,,,,,501,,501,501,501,501,503,503,503,,503,,,,503',
'503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503,503',
'503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,,503,503,503,',
'503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,',
',,,503,,,,,,,,503,,,,,503,503,503,503,503,503,,,,503,503,,,,,,,503,',
',503,503,503,508,508,508,508,508,,,,508,508,,,,508,,508,508,508,508',
'508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,508,508,,508',
'508,508,508,508,508,508,508,508,,508,508,508,,508,508,,508,508,508,',
',,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,508,,,,508,,,,,,,,508,',
',,,508,508,508,508,508,508,,,,508,508,,,,,,508,508,,,508,508,508,23',
'23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23',
'23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23',
'23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,515,515,515,,515,,,,515,515',
',,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515,515,515',
',,515,,,,,,,515,,,515,515,515,515,515,515,515,515,,515,515,515,,515',
'515,,,,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,,,,,,,,,,,,',
',,,,,,515,515,515,515,515,515,,,,515,515,,,,,,,515,,,515,515,515,517',
'517,517,,517,,,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517',
'517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517',
'517,517,517,517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517',
',,517,517,,,517,,517,,517,,517,,,,,,,,517,,,,,517,517,517,517,517,517',
',,,517,517,,,,,,,517,,517,517,517,517,208,208,208,,208,,,,208,208,,',
',208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,',
',208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208',
',208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208,,,,208',
',,,,,,,208,,,,,208,208,208,208,208,208,,,,208,208,,,,,,,208,,,208,208',
'208,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524',
',,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524',
'524,524,524,,524,524,524,,524,524,,,,524,,,,,,,,,,,,,,,,,,,,524,,,524',
',,524,524,,,524,,,,,,,,,,,,,,,,,,,524,524,524,524,524,524,,,,524,524',
',,,,,,524,,,524,524,524,209,209,209,,209,,,,209,209,,,,209,,209,209',
'209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209',
',,209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209,209,209',
',,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,',
',209,209,209,209,209,209,,,,209,209,,,,,,,209,,,209,209,209,527,527',
'527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527',
'527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527',
',527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527',
'527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527',
',,,,,,527,,,527,527,527,528,528,528,,528,,,,528,528,,,,528,,528,528',
'528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528',
',,528,528,528,528,528,528,528,528,,528,528,528,,528,528,,528,528,528',
',,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528,,,',
',528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528,528,529,529',
'529,,529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529',
'529,529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529',
',529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529',
'529,,,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529,529',
',,,,,,529,,,529,529,529,533,533,533,,533,,,,533,533,,,,533,,533,533',
'533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533',
',,533,533,533,533,533,533,533,533,,533,533,533,,533,533,,533,533,533',
',,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,533,,,',
',533,533,533,533,533,533,,,,533,533,,,,,,,533,,,533,533,533,210,210',
'210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210',
'210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210',
'210,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,',
',210,210,,,210,,210,,210,,210,,,,,,,,210,,,,,210,210,210,210,210,210',
',,,210,210,,,,,,,210,,210,210,210,210,539,539,539,,539,,,,539,539,,',
',539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,',
',539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539',
'539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,539,',
',,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539',
'539,539,539,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542,542',
'542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542,542',
'542,542,542,542,542,542,542,542,542,,542,542,,542,542,542,,,,,,,,,,',
',,,,,,,,,542,,,542,,,542,542,,,542,,,,,,542,,,,,,,,542,,,,,542,542,542',
'542,542,542,,,,542,542,,,,,,,542,,542,542,542,542,214,214,214,,214,',
',,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214',
',214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,',
',,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,,,,,,,214',
',,214,214,214,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215',
'215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215',
'215,215,215,215,215,,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,',
',,,,,,215,,,215,,,215,215,,,215,,215,,,,215,,,,,,,,215,,,,,215,215,215',
'215,215,215,,,,215,215,,,,,,,215,,,215,215,215,216,216,216,,216,,,,216',
'216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216',
'216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,',
'216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,',
',,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,',
',216,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,',
',,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217',
'217,217,217,,,,217,217,,,,,,,217,,,217,217,217,218,218,218,,218,,,,218',
'218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218',
'218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,',
'218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,',
',,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,',
',218,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219',
'219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219',
'219,219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,',
',,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219',
'219,219,219,,,,219,219,219,,,,,,219,,,219,219,219,565,565,565,,565,',
',,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565,565,565,565',
'565,565,,,565,,,,,,,565,,,565,565,565,565,565,565,565,565,,565,565,565',
',565,565,,565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565,565,,,565,',
',,,,565,,,,,,,,565,,,,,565,565,565,565,565,565,,,,565,565,,,,,,,565',
',,565,565,565,586,586,586,,586,,,,586,586,,,,586,,586,586,586,586,586',
'586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,,586,,,586,586,586',
'586,586,586,586,586,586,586,586,586,,586,586,,586,586,586,,,,,,,,,,',
',,,,,,,,,586,,,586,,,586,586,,,586,,586,,586,,586,,,,,,,,586,,,,,586',
'586,586,586,586,586,,,,586,586,,,,,,,586,,586,586,586,586,598,598,598',
',598,,,,598,598,,,,598,,598,598,598,598,598,598,598,,,,,,598,598,598',
'598,598,598,598,,,598,,,,,,,598,,,598,598,598,598,598,598,598,598,,598',
'598,598,,598,598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598',
',,598,,,,,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,,,',
',,,598,,,598,598,598,602,602,602,,602,,,,602,602,,,,602,,602,602,602',
'602,602,602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602',
'602,602,602,602,602,602,602,,602,602,602,,602,602,,602,602,602,,,,,',
',,,,,,,,,,,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602',
'602,602,602,602,602,,,,602,602,,,,,,,602,,,602,602,602,230,230,230,',
'230,,,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230',
'230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230',
'230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230',
',,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,,,',
',,,230,,,230,230,230,631,631,631,,631,,,,631,631,,,,631,,631,631,631',
'631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631,,,631',
'631,631,631,631,631,631,631,,631,631,631,,631,631,,631,631,631,,,,,',
',,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631,,,,631,,,,,,,,631,,,,,631',
'631,631,631,631,631,,,,631,631,,,,,,,631,,,631,631,631,632,632,632,',
'632,,,,632,632,,,,632,,632,632,632,632,632,632,632,,,,,,632,632,632',
'632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632,632,632,,632',
'632,632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632',
',,632,,,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,,,632,632,,,',
',,,632,,,632,632,632,233,233,233,,233,,,,233,233,,,,233,,233,233,233',
'233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233',
'233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,',
',,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233',
'233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233,233,635,635,635,',
'635,,,,635,635,,,,635,,635,635,635,635,635,635,635,,,,,,635,635,635',
'635,635,635,635,,,635,,,,,,,635,,,635,635,635,635,635,635,635,635,635',
'635,635,635,,635,635,,635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635',
'635,,,635,,635,,635,,635,,,,,,,,635,,,,,635,635,635,635,635,635,,,,635',
'635,,,,,,,635,,635,635,635,635,636,636,636,,636,,,,636,636,,,,636,,636',
'636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,',
',636,,,636,636,636,636,636,636,636,636,636,636,636,636,,636,636,,636',
'636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,636,,636,,,',
',,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,636,636,636',
'636,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637',
',,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637',
'637,637,637,,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637',
',,637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637',
',,,637,637,,,,,,,637,,,637,637,637,638,638,638,,638,,,,638,638,,,,638',
',638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638,638,,,638',
',,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,,638,638,,638',
'638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,',
',638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,,,638,638,638',
'234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,',
',234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234',
'234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,',
'234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234',
',,,234,234,,,,,,,234,,,234,234,234,643,643,643,,643,,,,643,643,,,,643',
',643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643',
',,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643,,643,643,,643',
'643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,643,,,,,,',
',643,,,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,,,643,643,643',
'644,644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,',
',644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644',
'644,644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,',
'644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644',
',,,644,644,,,,,,,644,,,644,644,644,235,235,235,,235,,,,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235',
'235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,',
',235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235',
'647,647,647,,647,,,,647,647,,,,647,,647,647,647,647,647,647,647,,,,',
',647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647,647,647,647',
'647,647,,647,647,647,,647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647,,',
'647,,,647,647,,,647,,,,,,647,,,,,,,,647,,,,,647,647,647,647,647,647',
',,,647,647,,,,,,,647,,,647,647,647,648,648,648,,648,,,,648,648,,,,648',
',648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648',
',,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,,648,648,,648',
'648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,',
',648,,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648,648',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,237,237,237,,237,,,,237,237,,,,237',
',237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237',
',,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237,,237',
'237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,',
',237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237,237',
'238,238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,',
',238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238',
'238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,',
'238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238',
',,,238,238,,,,,,,238,,,238,238,238,239,239,239,,239,,,,239,239,,,,239',
',239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239',
',,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239',
'239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,',
',239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239',
'240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,',
',240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240',
'240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,',
'240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,672,672,672,,672,,,,672,672,,,,672',
',672,672,672,672,672,672,672,,,,,,672,672,672,672,672,672,672,,,672',
',,,,,,672,,,672,672,672,672,672,672,672,672,,672,672,672,,672,672,,672',
'672,672,,,,,,,,,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,',
',672,,,,,672,672,672,672,672,672,,,,672,672,,,,,,,672,,,672,672,672',
'677,677,677,,677,,,,677,677,,,,677,,677,677,677,677,677,677,677,,,,',
',677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677,677,677',
'677,677,,677,677,677,,677,677,,,,677,,,,,,,,,,,,,,,,,,,,677,,,677,,',
'677,677,,,677,,,,,,,,,,,,,,,,,,,677,677,677,677,677,677,,,,677,677,',
',,,,,677,,,677,677,677,241,241,241,,241,,,,241,241,,,,241,,241,241,241',
'241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241',
'241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,',
',,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241',
'241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,242,242,242,',
'242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,243,243,243,,243,,,,243,243,,,,243,,243,243,243',
'243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243',
'243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,',
',,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243',
'243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,244,244,244,',
'244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244',
'244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244',
'244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244',
',,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,',
',,,244,,,244,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,',
',,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245',
'245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,688,688,688,',
'688,,,,688,688,,,,688,,688,688,688,688,688,688,688,,,,,,688,688,688',
'688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688,688,688,688,,688',
'688,688,,688,688,,,,688,,,,,,,,,,,,,,,,,,,,688,,,688,,,688,688,,,688',
',,,,,,,,,,,,,,,,,,688,688,688,688,688,688,,,,688,688,,,,,,,688,,,688',
'688,688,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246',
'246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246',
'246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,',
',,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246',
'246,246,,,,246,246,,,,,,,246,,,246,246,246,247,247,247,,247,,,,247,247',
',,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247',
',,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247',
'247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247',
',,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247',
'247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,694,694,694,,694,,,,694,694,,,,694',
',694,694,694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694',
',,,,,,694,,,694,694,694,694,694,694,694,694,,694,694,694,,694,694,,694',
'694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,694,,,,694,,,',
',,,,694,,,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694',
'249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,',
',249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249',
'249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,',
'249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,712,712,712,,712,,,,712,712,,,,712',
',712,712,712,712,712,712,712,,,,,,712,712,712,712,712,712,712,,,712',
',,,,,,712,,,712,712,712,712,712,712,712,712,,712,712,712,,712,712,,712',
'712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,,,,,712,,,,,,',
',712,,,,,712,712,712,712,712,712,,,,712,712,,,,,,,712,,,712,712,712',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,251,251,251,,251,,,,251,251,,,,251',
',251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251',
',,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251',
'251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,',
',251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251',
'252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,',
',252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252',
'252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,',
'252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,253,253,253,,253,,,,253,253,,,,253',
',253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253',
',,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253',
'253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,',
',253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253',
'733,733,733,,733,,,,733,733,,,,733,,733,733,733,733,733,733,733,,,,',
',733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733',
'733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,',
'733,,,733,733,,,733,,733,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733',
',,,733,733,,,,,,,733,,,733,733,733,254,254,254,,254,,,,254,254,,,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',254,,,,59,254,254,254,254,254,254,59,59,59,254,254,59,59,59,,59,,254',
',,254,254,254,,,59,59,59,,,,,,,,59,59,,59,59,59,59,59,,,,,,,,,,,,,,',
',,,,,,,,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,',
',59,,,59,59,,59,,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59',
'59,59,59,436,59,,59,,,,436,436,436,,,436,436,436,600,436,600,600,600',
'600,600,,,,436,436,436,436,,,600,,,,,436,436,,436,436,436,436,436,,',
',,,,,,,600,600,,,,,,,,600,600,600,600,,436,436,436,436,436,436,436,436',
'436,436,436,436,436,436,,,436,436,436,,,436,,,436,,,436,436,,436,600',
'436,,436,,436,436,436,436,436,436,436,,436,436,436,,,,,,,,,,,,,436,436',
'436,436,437,436,,436,,,,437,437,437,,,437,437,437,706,437,706,706,706',
'706,706,,,,437,437,437,437,,,706,,,,,437,437,,437,437,437,437,437,,',
',,,,,,,706,,,,,,,,,706,706,706,706,,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,,,437,437,437,,,437,,,437,,,437,437,,437,706',
'437,,437,,437,437,437,437,437,437,437,,437,437,437,,,,,,,,,,,,,437,437',
'437,437,30,437,,437,,,,30,30,30,,,30,30,30,547,30,547,547,547,547,547',
',,,30,30,30,,,,547,,,,,30,30,,30,30,30,30,30,,,,,,,,,,547,,,,,,,,,547',
'547,547,547,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,',
'30,,30,30,,,30,30,,30,547,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,',
',,,,,,,,31,30,30,,30,,30,31,31,31,,,31,31,31,882,31,882,882,882,882',
'882,,,,,31,31,,,,882,,,,,31,31,,31,31,31,31,31,,,,,,,,,,882,,,,,,,,',
'882,882,882,882,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,882,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,427,31,31,,31,,31,427,427,427,,,427,427,427,885,427,885,885',
'885,885,885,,,,427,427,427,,,,885,,,,,427,427,,427,427,427,427,427,',
',,,,,,,,885,,,,,,,,,885,885,885,885,,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,,,427,427,427,,,427,,427,427,,,427,427,,427',
'885,427,,427,,427,427,427,427,427,427,427,,427,427,427,,,,,,,,,,,,485',
'427,427,,427,,427,485,485,485,,,485,485,485,,485,659,,659,659,659,659',
'659,,485,485,,,,,,,659,,,485,485,,485,485,485,485,485,,,910,,910,910',
'910,910,910,,,659,,,,,,,910,,659,659,659,659,,,,,,,,,,,485,,,,,,910',
'485,,,,,485,485,659,910,910,910,910,,,,659,,452,452,,,452,,,,,,485,485',
',452,452,,452,452,452,452,452,452,452,,485,452,452,910,,485,452,452',
'452,452,,,,,,452,,,,,,,,452,452,,452,452,452,452,452,452,452,452,452',
'452,452,,,452,,,,,,,,,,744,744,,,744,,,,,,452,,,744,744,452,744,744',
'744,744,744,744,744,,,744,744,,,,744,744,744,744,,,,,,744,,,,,,,,744',
'744,,744,744,744,744,744,744,744,744,744,744,744,,,744,,,,,,,,,,587',
'587,,,587,,,,,,744,,,587,587,744,587,587,587,587,587,587,587,,,587,587',
',,,587,587,587,587,,,,,,587,,,,,,,,587,587,,587,587,587,587,587,587',
'587,587,587,587,587,,,587,,,,,,,,,,588,588,,,588,,,,,,587,,,588,588',
'587,588,588,588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,588',
',,,,,,,588,588,,588,588,588,588,588,588,588,588,588,588,588,,,588,,',
',,,,,,,1006,1006,,,1006,,,,,,588,,,1006,1006,588,1006,1006,1006,1006',
'1006,1006,1006,,,1006,1006,,,,1006,1006,1006,1006,,,,,,1006,,,,,,,,1006',
'1006,,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,,,1006',
',,,,,,,,,1005,1005,,,1005,,,,,,1006,,,1005,1005,1006,1005,1005,1005',
'1005,1005,1005,1005,,,1005,1005,,,,1005,1005,1005,1005,,,,,,1005,,,',
',,,,1005,1005,,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005',
',753,1005,753,753,753,753,753,,,,,261,261,,,261,753,,,,,1005,,,261,261',
'1005,261,261,261,261,261,261,261,,,261,261,753,,,261,261,261,261,,,753',
'753,753,753,,,,,,,,261,261,,261,261,261,261,261,261,261,261,261,261',
'261,,,261,,,,,,,,,753,956,956,,,956,,,,,,261,,,956,956,261,956,956,956',
'956,956,956,956,,,956,956,,,,956,956,956,956,,,,,,956,,,,,,,,956,956',
',956,956,956,956,956,956,956,956,956,956,956,,,956,,,,,,,,,,212,212',
',,212,,,,,,956,,,212,212,956,212,212,212,212,212,212,212,,,212,212,',
',,212,212,212,212,,,,,,212,,,,,,,,212,212,,212,212,212,212,212,212,212',
'212,212,212,212,,,212,,,,,,,,,,211,211,,,211,,,,,,212,,,211,211,212',
'211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211,,',
',,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,,,211,,,,',
',,,,,531,531,,,531,,,,,,211,,,531,531,211,531,531,531,531,531,531,531',
',,531,531,,,,531,531,531,531,,,,,,531,,,,,,,,531,531,,531,531,531,531',
'531,531,531,531,531,531,531,,,531,,,,,,,,,,530,530,,,530,,,,,,531,,',
'530,530,531,530,530,530,530,530,530,530,,,530,530,,,,530,530,530,530',
',,,,,530,,,,,,,,530,530,,530,530,530,530,530,530,530,530,530,530,530',
',,530,,,,,,,,,,519,519,,,519,,,,,,530,,,519,519,530,519,519,519,519',
'519,519,519,,,519,519,,,,519,519,519,519,,,,,,519,,,,,,,,519,519,,519',
'519,519,519,519,519,519,519,519,519,519,,,519,,,,,,,,,,451,451,,,451',
',,,,,519,,,451,451,519,451,451,451,451,451,451,451,,,451,451,,,,451',
'451,451,451,,,,,,451,,,,,,,,451,451,,451,451,451,451,451,451,451,451',
'451,451,451,,,451,,,,,,,,,,743,743,,,743,,,,,,451,,,743,743,451,743',
'743,743,743,743,743,743,,,743,743,,,,743,743,743,743,,,,,,743,,,,,,',
',743,743,,743,743,743,743,743,743,743,743,743,743,743,,,743,,,,,,,,',
',518,518,,,518,,,,,,743,,,518,518,743,518,518,518,518,518,518,518,,',
'518,518,,,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518',
'518,518,518,518,518,518,518,,939,518,939,939,939,939,939,339,,339,339',
'339,339,339,,,939,,,,,518,,339,,989,518,989,989,989,989,989,,,,,,,939',
'939,,989,,,,339,339,939,939,939,939,,,,339,339,339,339,,,,,,989,,,,',
',,,,989,989,989,989,,,,,,,,939,,,,,,,339,,,,,,,,,,,,,,,,,,989' ]
        racc_action_check = arr = ::Array.new(25632, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1416,  1732,    59,   nil,   260,   nil,   nil, 12913,  1055,
   nil,  1055,  1331,    64,   nil,    49,   173,   951,   425,   129,
   608,   nil,   -34, 15089,  2828,   323,   nil,   514,   nil,   149,
 23889, 24014,  8289,  5841,  8561,   nil,  5568,  9241,  9377,   nil,
   281,   255,   286,   363,   623, 10329, 10737, 11009,   316,   780,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23499,
   nil, 11281, 11417, 11961,   -10,   nil, 12097, 12233,   nil,   nil,
 12641, 12777,   387,   nil,   917,   nil,   nil,   nil,   nil,   nil,
   287,   nil,   nil,   nil,   nil,   nil,   nil,   342,   350,   364,
   409,  1607,   nil,   nil,   nil,   380,   nil,   nil,   640,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13729,   nil,   nil,   nil,   nil, 13865, 14001, 14137, 14273,
 14409,   436,   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   439,   nil,  3787, 15497, 15769,
 16449, 24972, 24899,   nil, 16857, 16993, 17129, 17265, 17401, 17537,
   nil,   nil,  1094,    85,   133,   516,   220,   451,   513,   nil,
 18217,  2554,   512, 18625, 19305, 19713, 20121, 20257, 20393, 20529,
 20665, 21073, 21209, 21345, 21481, 21617, 21889, 22025, 22161, 22433,
 22705, 22841, 22977, 23113, 23385,  6249,  6657,  7473,  7609,   nil,
   nil, 24753,   nil,   nil,   509,  7745,   nil,   522,   nil,   nil,
   nil,  7881,   nil,   nil,  8017,   nil,  2417,   nil,   491,   493,
   nil,  8425,   536,  8697,   nil,  8833,  8969,   nil,   nil,   539,
   nil,   779,  9105,   492,  5705,   508,   584,   557,  9513,  2143,
   956,  1090,  1089,   632,   955,   nil,   599,   570,   -19,   nil,
   nil,   nil,   610,   187,   573, 10601,   nil,   403,   636,   639,
   584,   nil,   654,   nil, 11145,  4746,   468,   nil,   638,   nil,
   182,   156,   635,   619,   nil,   256,   648,   nil,   nil, 25479,
   479,    18,    32, 11553, 11825,   520,   734,   621,    27,    25,
   548,   700,    41,   738,   nil,   nil, 12369,   nil, 12505,   220,
   481,   436,   346,   327,   286,   525,   491,   418,   nil,   391,
   nil,   nil,   nil,   nil,   nil,   120,   nil,   193,   nil,   280,
   nil,   640,   246,   nil,   641,   -33,   nil,   642,    52,   nil,
   647,   -25,   nil,   276,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2006,  1469,   nil,   nil,
   nil,   nil,   661,   nil,   646,   nil, 13049,   676,   nil,  2006,
   680,   nil,   nil,   678,   704,   415,   405, 24139,   nil,   nil,
   nil,     0,   125,   746,   nil,   nil, 23629, 23759,   nil,  3376,
   nil,   700,   nil,   nil,  1732,   nil,   nil,   nil,   nil,     9,
   nil, 25264, 24315, 13185,   148, 13321, 13457, 13593,  4335,  4198,
   333,   342,   775,   778,   786,   787,  1184,  1046,   673,  4472,
  4609,  4746,  4883,  5020,  5157,  5294,  5431,  5568,  5705,   655,
   765,  4061,  5841,  3513,   108, 24264,   nil,   nil,   nil,   nil,
   nil,   nil,   -49,   109,   731,   741,   nil,   nil, 14545,   nil,
   nil, 14681,   nil, 14817,   nil,   nil,   nil,   nil, 14953,   917,
   746,   747,   nil,   nil,   750, 15225,   765, 15361, 25410, 25191,
   218,   802,   nil,   nil, 15633,   766,   nil, 15905, 16041, 16177,
 25118, 25045,  2280, 16313,   890,   889,   774,   nil,   nil, 16585,
   nil,   nil, 16721,   nil,   nil,   nil,    -3, 23853,   nil,   773,
   775,   nil,   785,   787,   788,   nil,   nil,   nil,   nil,   nil,
   nil,   804,   nil,   574,   nil, 17673,   nil,   nil,   nil,   894,
   nil,   nil,   nil,   927,   nil,   nil,   929,  3376,   971,   nil,
  2828,    56,    55,   975,   983,   nil, 17809, 24461, 24534,    31,
   nil,   388,   219,   172,   nil,  1237,   nil,    11, 17945,   nil,
 23593,   nil, 18081,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   180,   nil,   nil,    85,   nil,   nil,
   nil,   865,   nil,   nil,   872,   nil,   892,   nil,  1193,   nil,
   877, 18353, 18489,   285,   913, 18761, 18897, 19033, 19169,   912,
   nil,   nil,   nil, 19441, 19577,   913,   nil, 19849, 19985,   nil,
   160,   212,   250,   510,   888,  1869,   889,   nil,   nil, 24230,
   nil,   nil,  1008,    61,   -56,   nil,   nil,   nil,   nil,   909,
   nil,   954, 20801,   nil,   nil,  1193,   -77, 20937,   914,   nil,
   921,   155,   154,   962,   349,  1227,   963,   925, 21753,  3102,
   988,  1014,    21,  1068, 22297,   nil,   nil,   441,   nil,  2691,
  5157,   957,   121,   nil,   nil,   -67, 23723,   nil,   474,   nil,
  6293,   nil, 22569,   nil,   644,   nil,   980,   217,   nil,   985,
   nil,   nil,   nil,   nil,   660,   nil,  1103,   nil,   nil,   nil,
   nil,  1112,   nil, 23249,  1007,    40,    30,    24,     7,  5977,
   nil,   919,   nil, 25337, 24388,  6113,   nil,   nil,   nil,   504,
   393,  3102,  3239, 24742,   409,   779,   -26,  1196,  4609,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1005,  6385,  3650,  6521,
   nil,  1006,   nil,  3924,   nil,  2691,   nil,   nil,  2554,   nil,
  3239,   nil,  3787,  6793,  6929,  7065,  7201,   127,  7337,  1012,
  1019,   nil,  1026,  1044,  1047,   nil,  1068,  1055,  1051,  1045,
  8153,   nil,   nil,  4198,   nil,   nil,   nil,  4335,  4472,   nil,
   nil,  1057,   254,   nil,   nil,  1182,   nil,  5020,  1062,  1104,
   nil,   nil,   nil,  1080,  1210,  1094,  1092,   nil,   nil,   nil,
  1117,  1118,   nil,  1123,  1127,   nil,  1130,   nil,  1145,   444,
  1143,   637,   nil,  1264,   nil,  9649,  1269,  2280,  2417,   nil,
    26,    42,    -3,   350,   954,   nil,  1153,  1869,  9785,   nil,
   239,  1271,  1272,  1156,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1171,  1157,   nil,  2143,  9921, 10057,  2965,   -39,
   nil,   nil, 23978,   nil,   nil, 24103,   nil,  6021,   nil,   nil,
  1184,  1089, 10193,   952,  1251,  1300,  5431,  1197,  1302,   nil,
  5294,   nil,   nil,    -9, 10465,   nil,   nil,   nil,   nil,   nil,
 24259,   nil,  6429,   nil,  6565,   nil,  6701,   nil,   nil,   nil,
   nil,   -33,   507,  1185,   nil,   -11,   nil,  1307,  1310, 10873,
  4883,   nil,   nil,  1314,   307,   nil,   nil,   nil,   nil, 25472,
   nil,  1195,   nil,   nil,  1197,  1199,  1201,  1228,   nil,  1229,
   nil,   -79,   nil,   nil,   nil,   781, 24826,   nil,   nil,  1246,
   nil,   nil,   nil,  3513,   818,   821,   918,  1315,   816,   nil,
  1242,  1243,  1244,  1245,  1255,   922,  1256,   854,  3924,   nil,
   nil,   nil,   197,  3650,   nil,   nil,  4061,  2965,   nil, 25497,
   nil,  6837,   nil,  6973,   nil,  7109,   nil,   nil,   nil,  1061,
  1297,  1298,   nil,  1382, 11689, 24680, 24607,  1093,  7245,   nil,
   nil,   nil,   nil,   784,  1261,   543,   nil,   nil,   nil,  1382,
  1383,  1384,  1265,  1268,  1276,  1277,   nil,   nil,  1283,   -10,
    17,    20,  1235,  1281,  1282,   nil,   nil,   nil,   nil,   604,
   nil,   nil,   nil,   nil,    -7,   nil,  -125,   nil ]

racc_action_default = [
    -1,  -620,  -619,  -620,    -2,  -606,    -4,    -5,  -620,    -8,
    -9,  -620,  -620,  -620,   -29,  -620,  -620,  -620,  -283,  -620,
   -41,   -44,  -608,  -620,   -49,   -51,   -52,   -53,   -58,  -260,
  -260,  -260,  -295,  -334,  -335,   -70,  -619,   -74,   -82,   -84,
  -620,  -515,  -516,  -620,  -620,  -620,  -620,  -620,  -608,  -241,
  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -281,  -282,  -595,
  -285,  -608,  -619,  -619,  -303,  -406,  -620,  -620,  -308,  -311,
  -606,  -620,  -319,  -326,  -620,  -336,  -337,  -448,  -449,  -450,
  -451,  -452,  -453,  -619,  -456,  -619,  -619,  -619,  -619,  -619,
  -619,  -619,  -493,  -499,  -500,  -593,  -504,  -505,  -594,  -507,
  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -519,  -520,  1048,
    -3,  -607,  -615,  -616,  -617,    -7,  -620,  -620,  -620,  -620,
  -620,  -620,   -17,  -620,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,   -22,  -122,  -619,  -620,  -620,
  -619,  -620,  -620,  -605,  -620,  -620,  -620,  -620,  -620,  -608,
  -609,   -48,  -620,  -515,  -516,  -620,  -283,  -620,  -620,  -233,
  -620,  -619,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -412,
  -415,  -620,  -603,  -604,   -59,  -620,  -302,  -620,  -429,  -432,
   -65,  -619,  -426,   -66,  -608,   -67,  -242,  -255,  -619,  -619,
  -259,  -620,  -265,  -620,  -588,  -620,  -620,   -68,   -69,  -606,
   -13,   -14,  -620,   -72,  -619,  -608,  -620,   -75,   -78,  -619,
   -90,   -91,  -620,  -620,   -98,  -295,  -298,  -608,  -419,  -334,
  -335,  -338,  -427,  -620,   -80,  -620,   -86,  -292,  -501,  -502,
  -620,  -218,  -219,  -234,  -620,  -619,  -288,  -287,  -620,  -243,
  -612,  -612,  -620,  -620,  -586,  -612,  -620,  -304,  -305,  -547,
   -50,  -620,  -620,  -620,  -620,  -606,  -620,  -607,  -515,  -516,
  -620,  -620,  -283,  -620,  -359,  -360,  -620,  -322,  -620,  -113,
  -114,  -156,  -157,  -158,  -174,  -179,  -186,  -189,  -329,  -620,
  -515,  -516,  -583,  -584,  -454,  -620,  -477,  -620,  -479,  -620,
  -481,  -620,  -620,  -461,  -620,  -620,  -467,  -620,  -620,  -473,
  -620,  -620,  -475,  -620,  -492,  -494,  -495,  -496,  -497,    -6,
  -618,   -23,   -24,   -25,   -26,   -27,  -619,  -620,   -19,   -20,
   -21,  -123,  -620,   -30,   -39,   -40,  -620,  -620,   -31,  -199,
  -608,  -250,  -251,  -619,  -619,  -596,  -597,  -260,  -424,  -598,
  -599,  -597,  -596,  -260,  -423,  -425,  -598,  -599,   -37,  -207,
   -38,  -620,   -42,   -43,  -197,  -265,   -45,   -46,   -47,  -608,
  -301,  -620,  -620,  -619,  -292,  -620,  -620,  -620,  -208,  -209,
  -210,  -211,  -212,  -213,  -214,  -215,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -235,
  -236,  -237,  -238,  -608,  -619,  -260,  -596,  -597,   -55,   -60,
  -261,  -420,  -619,  -619,  -608,  -608,  -297,  -256,  -620,  -264,
  -257,  -620,  -262,  -620,  -266,  -591,  -592,   -12,  -607,   -16,
  -608,   -71,  -290,   -87,   -76,  -620,  -608,  -619,  -620,  -620,
   -97,  -620,  -501,  -502,  -620,   -83,   -88,  -620,  -620,  -620,
  -620,  -620,  -239,  -620,  -440,  -620,  -608,  -610,  -244,  -614,
  -613,  -246,  -614,  -293,  -294,  -587,  -620,  -547,  -409,  -582,
  -582,  -530,  -532,  -532,  -532,  -546,  -548,  -549,  -550,  -551,
  -552,  -553,  -554,  -620,  -556,  -620,  -562,  -564,  -565,  -567,
  -572,  -574,  -575,  -577,  -578,  -579,  -620,  -619,  -350,  -351,
  -619,  -620,  -620,  -620,  -620,  -435,  -619,  -620,  -620,  -292,
  -316,  -108,  -109,  -620,  -111,  -620,  -283,  -620,  -620,  -327,
  -547,  -331,  -620,  -455,  -478,  -483,  -484,  -486,  -457,  -480,
  -458,  -482,  -459,  -460,  -620,  -463,  -465,  -620,  -466,  -469,
  -470,  -620,  -471,  -472,  -620,  -498,  -620,   -18,  -620,   -28,
  -273,  -620,  -620,  -428,  -620,  -252,  -254,  -620,  -620,   -61,
  -248,  -249,  -421,  -620,  -620,   -63,  -422,  -620,  -620,  -300,
  -596,  -597,  -596,  -597,  -608,  -197,  -620,  -395,  -396,  -608,
  -398,  -413,   -54,  -416,  -619,  -430,  -433,  -247,  -296,  -619,
  -263,  -267,  -620,  -589,  -590,   -15,   -73,  -620,   -79,   -85,
  -608,  -596,  -597,  -619,   -94,   -96,  -620,   -81,  -620,  -206,
  -216,  -217,  -608,  -619,  -619,  -286,  -289,  -612,  -407,  -619,
  -619,  -608,  -620,  -528,  -529,  -620,  -620,  -539,  -620,  -542,
  -620,  -544,  -620,  -361,  -620,  -363,  -365,  -372,  -553,  -608,
  -558,  -566,  -576,  -580,  -619,  -352,  -619,  -309,  -353,  -354,
  -312,  -620,  -315,  -620,  -608,  -596,  -597,  -600,  -291,  -620,
  -108,  -109,  -110,  -620,  -620,  -619,  -320,  -521,  -522,  -620,
  -323,  -619,  -619,  -547,  -620,  -620,  -608,  -620,  -619,  -462,
  -464,  -468,  -474,  -476,   -10,  -124,  -271,  -620,  -200,  -620,
  -611,  -619,   -33,  -202,   -34,  -203,   -62,   -35,  -205,   -36,
  -204,   -64,  -198,  -620,  -620,  -620,  -620,  -428,  -620,  -582,
  -582,  -377,  -619,  -619,  -619,  -394,  -620,  -608,  -400,  -553,
  -620,  -560,  -570,  -619,  -418,  -417,   -56,  -619,  -619,  -258,
  -268,   -77,   -92,   -89,  -299,  -619,  -357,  -619,  -441,  -619,
  -442,  -443,  -245,  -620,  -620,  -608,  -582,  -563,  -581,  -531,
  -532,  -532,  -557,  -532,  -532,  -573,  -532,  -568,  -608,  -620,
  -370,  -620,  -555,  -620,  -355,  -620,  -620,  -619,  -619,  -314,
  -620,  -428,  -620,  -108,  -109,  -112,  -608,  -619,  -620,  -524,
  -620,  -620,  -620,  -608,  -526,  -332,  -585,  -485,  -488,  -489,
  -490,  -491,  -620,  -272,   -32,  -201,  -253,  -620,  -240,  -620,
  -375,  -376,  -385,  -379,  -387,  -620,  -390,  -620,  -392,  -397,
  -620,  -620,  -620,  -559,  -620,  -620,  -619,  -620,  -620,   -11,
  -619,  -447,  -358,  -620,  -620,  -445,  -410,  -411,  -408,  -527,
  -620,  -535,  -620,  -537,  -620,  -540,  -620,  -543,  -545,  -362,
  -364,  -368,  -620,  -373,  -306,  -620,  -307,  -620,  -620,  -620,
  -619,  -317,  -428,  -620,  -620,  -324,  -328,  -330,  -525,  -547,
  -487,  -582,  -561,  -378,  -619,  -619,  -619,  -619,  -571,  -619,
  -399,  -608,  -402,  -404,  -405,  -569,  -620,  -292,  -414,  -620,
  -431,  -434,  -446,  -619,   -99,  -100,  -620,  -620,  -107,  -444,
  -532,  -532,  -532,  -532,  -366,  -620,  -371,  -620,  -619,  -310,
  -313,  -267,  -619,  -619,  -321,  -523,  -619,  -619,  -374,  -620,
  -382,  -620,  -384,  -620,  -388,  -620,  -391,  -393,  -401,  -620,
  -291,  -600,   -57,  -440,  -619,  -620,  -620,  -106,  -620,  -533,
  -536,  -538,  -541,  -620,  -369,  -619,  -436,  -437,  -438,  -620,
  -620,  -620,  -619,  -619,  -619,  -619,  -403,  -439,  -608,  -596,
  -597,  -600,  -105,  -532,  -367,  -356,  -318,  -325,  -333,  -620,
  -380,  -383,  -386,  -389,  -428,  -534,  -619,  -381 ]

clist = [
'6,218,277,277,277,211,260,693,368,326,29,535,584,272,340,340,29,337',
'340,127,127,415,555,130,130,395,443,324,440,420,327,29,132,132,297,752',
'633,114,548,9,29,29,29,4,29,9,122,206,703,704,577,580,264,270,273,500',
'673,296,525,261,329,334,221,843,340,340,340,340,670,29,314,670,110,489',
'29,29,815,983,29,311,311,376,127,378,380,383,386,389,392,378,494,341',
'342,920,111,345,793,673,948,127,538,541,114,835,796,545,275,287,288',
'846,707,709,711,311,727,730,742,719,832,29,427,433,356,293,29,29,29',
'29,29,952,713,661,295,278,278,278,794,346,857,665,666,401,402,403,404',
'597,825,599,9,954,377,279,279,279,598,860,393,405,115,923,986,358,751',
'330,446,447,448,449,614,600,485,617,755,939,372,795,663,332,628,797',
'277,331,335,831,896,833,664,951,450,546,698,673,339,1,428,407,484,803',
'492,807,500,493,948,808,1016,670,670,733,421,819,451,903,374,375,379',
'29,29,29,29,382,437,355,29,29,29,29,29,29,412,385,555,920,388,391,867',
'277,757,1026,758,29,976,277,890,496,277,394,701,413,418,731,491,858',
'296,438,442,604,205,954,678,611,899,399,615,830,511,615,855,687,838',
'421,787,121,654,29,827,942,499,499,602,29,353,713,29,555,840,2,521,746',
'880,881,518,340,340,1014,832,272,812,338,792,333,29,369,29,325,536,835',
'343,29,530,417,847,806,526,344,848,296,417,739,,944,296,114,,,,909,',
',832,509,514,1034,,29,,,680,,587,490,311,,,,,,,834,495,836,851,29,29',
',1035,,507,311,,945,427,433,946,,,1017,278,,581,582,,,,,987,278,,114',
'508,,,293,,,279,931,293,970,911,913,510,915,917,279,918,516,,,311,634',
'311,601,,,6,734,713,832,713,,641,,583,,29,127,646,,649,130,811,499,499',
'277,,640,,683,132,,,673,,,428,,555,861,862,683,988,,627,9,,809,670,626',
'776,,639,421,863,,781,,645,,443,,437,29,656,667,668,,1022,822,641,,',
',932,,,,1027,,,676,,692,657,640,,679,,277,974,713,657,657,,,760,,683',
'760,,,,428,,,,696,,820,662,,,,526,428,,421,29,,,,,526,,,947,29,949,437',
'1009,1010,1011,1012,,,,,,,,437,,29,713,933,713,675,750,809,,971,756',
'972,,973,,,277,311,,930,,,,,856,,311,,,,428,,,,,,,,,,713,,,,421,29,',
',29,,,1045,,,29,,437,,724,,,726,,,,,29,,,,29,,963,728,728,,805,669,',
',,,555,,,,336,,1023,747,1024,,1025,634,978,,127,,798,,130,,,804,1044',
'29,29,1033,1018,132,,29,29,683,,29,,,697,634,,814,657,765,,,641,499',
',646,,,1020,1021,526,,772,774,1046,,798,640,777,779,,813,442,340,842',
'865,,816,821,,,,790,,,,,,,,,,,29,29,791,,,,634,,277,,,,311,823,824,816',
',816,866,,428,,,311,,,,,,,,,826,,,,421,,,,29,,,,437,828,29,771,828,',
',,29,29,,,127,852,,29,,,499,,414,,,,,798,29,445,872,,859,,,,,864,,,',
'883,883,883,340,908,417,,,,,,,,,,,340,919,874,,,29,,901,,29,29,905,',
',,,,1028,895,29,,,897,898,,,938,,850,634,,,902,,,17,311,,502,,504,17',
'505,506,,,,29,42,29,29,,,,42,,222,,,29,29,,927,928,925,222,222,222,',
'17,302,302,,,,,,934,728,,,,42,301,301,,935,,,,,,,,222,,,,29,222,222',
',29,222,350,,,,683,,941,959,,790,,962,790,349,790,,371,,,828,998,,791',
',311,791,,791,29,884,886,888,883,883,883,883,311,883,,,17,982,,,1005',
'222,222,222,222,17,,,,42,437,,985,,,,,29,42,,277,,,,,630,816,,,,1003',
',29,,428,,,29,,,29,29,,,,1015,,,421,,1019,,,634,,,,,29,816,437,,,,19',
',883,883,883,883,19,,790,,790,,790,,790,,,,,,,791,,791,,791,883,791',
'17,222,222,222,,,19,222,222,222,222,222,222,42,,671,,,336,,674,,,,17',
',,,,,790,,,,,,,42,,,,354,,791,,990,992,994,996,,997,,,,,,671,,222,336',
',,,,222,,,222,,,,,,,,,,,,,,19,720,,,17,,17,,,19,302,17,,,,,,42,,42,',
',,301,42,,,302,,,,,,,,,,17,,,301,,1040,1041,1042,1043,,,,,42,,,,,222',
'222,,,,,,,,,,1047,766,595,,595,671,336,,,,,,,,,371,,371,,,,,,,,,,,,',
'19,,,,,,,,441,,,,810,,,,,,,,,,17,,19,,,,,,,,,,818,42,,,,,,,,18,,,,,',
'18,,,837,,,,16,,,,,,16,,,,,,,222,,,,445,,,,18,304,304,,,,,,19,,19,,',
'16,,19,,,,,,,,,,,,,,,873,,,,,352,,,,,,19,,,,,,17,,,,,,,302,,222,,,,42',
',,302,,,,301,,,,,222,,,18,301,,,,,,,,18,,,,16,,,,,,,,,16,,,,,,,,,,,',
',,,,,,,17,,,17,,,19,,,222,,,,42,,,42,,,,,222,,336,,222,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,18,,,,,222,222,,,,,222,222,16,,222,,,,,,981,,,18,,,',
',,,,,,,,,16,,,,,,,,302,,,,,,,,19,,,302,,301,,,,,,,,,17,17,301,,,,,,',
',,,,42,42,,,,18,,18,,,,304,18,,,,,,16,,16,,,,,16,,222,304,,,,,222,,',
',,18,17,17,,19,,,19,17,,,,,16,42,42,,,,222,,42,,,,,,,,,,596,,596,,,',
',,,,,,,,,,,,,893,,,17,,,,17,17,,,,,371,,,42,17,,,42,42,,,441,,,,,,42',
'18,,,,,,,,,,,,,16,222,,17,17,,,,,,,,,17,222,,42,42,,,,,,,,,42,,,,,,19',
'19,,,,,,,,,,,,,,,955,,,,17,,,,17,,,,966,371,,,,42,,,,42,,,,965,,,,,',
',,,,,19,19,17,,,18,,19,,,,,304,,,42,,,16,,,304,,,,,,,,,,,,,,17,,,,,',
',,,,,,,42,,17,,19,,,17,19,19,17,17,,,,42,,,19,,42,,,42,42,,18,,222,18',
',,,,41,,,,,16,41,,16,,,,,,19,19,,,,,,,,,19,,,,,,,,,,41,300,300,,,,,',
',,,,,,,,,,,,,,,,,,,,,19,,,,19,,348,,969,370,,,,,,,,,,,,,,,,,,,,304,',
',,,19,,,,,,304,,,,,,41,,,,,18,18,,,41,,,,,,,,,16,16,,19,,,,,,,,,,,,',
',,19,,,,,19,,,19,19,,,,,,,,,,,,18,18,,,,,871,18,,,,,,16,16,,,,,,16,',
',,,,,,,,,,,,,,,,,41,,,,,,,,,,596,,,18,,,,18,18,,,,,,41,,16,18,,,16,16',
',,,,,,,,16,,,,,,,,,,,,,,,,,18,18,,,,,,,,,18,,,16,16,,,,,,,,,16,,,,,41',
',41,,,,300,41,,,,,,,,,,596,,,,18,,300,,18,,,,968,,,,41,16,,,,16,,,,',
',,,,,,,,,,,,18,,,,,,,,,370,,370,,16,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,',
',,16,,18,,,,,18,229,,18,18,,41,,16,,276,276,276,16,,,16,16,,,,,,321',
'322,323,,,,,,,,,,,,,,,276,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,300,,,,,,,,,300,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,41,,,,,,276,419,276,,,,439',
'444,,,,,,,,,,,,,,,229,,,458,459,460,461,462,463,464,465,466,467,468',
'469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,,,,,,,276',
',,,,,276,,,276,,,,,,,276,,276,,276,276,,,,,,,,,,,,,300,,,,,,,,,,,300',
',,,,,,,,,,41,41,,532,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',41,41,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,370,,,41',
',,,41,41,,,,,,,,,41,,,,,,,,,,,,,,276,,439,655,419,,,,,,,,,,,,41,41,',
',,,,,,,41,,,,,,,,,,,,,,,,,,,276,,,276,,276,,,,,,,,,,,370,,,276,41,,',
',41,,,,964,689,690,691,,,,,,,,,,276,,,276,,,,,,,,,,41,,,,,,,,,,,,,276',
',,,,,,,,,,,,,,,,,,,41,276,,,,,,,,,,,,,,41,,,,,41,,,41,41,,,,,,,,,,,',
',,,,,,,,,,276,768,,,276,276,773,775,,,,,778,780,,,655,782,,,,,,,,,,',
',,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,276,,,,,',
',,,,,,,,,,,,,,,276,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,276,,875,,,,',
',,,,,,,,,773,775,780,778,,878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,875,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3230, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,36,36,36,27,152,13,60,32,44,10,94,72,32,32,44,88,32,61,61,30,182',
'64,64,60,20,34,30,25,51,44,65,65,53,98,26,97,151,9,44,44,44,2,44,9,17',
'17,136,136,91,91,41,41,41,74,195,12,55,39,6,6,22,92,32,32,32,32,75,44',
'54,75,5,42,44,44,14,107,44,67,67,6,61,6,6,6,6,6,6,6,25,19,19,129,8,19',
'141,195,191,61,70,70,97,190,144,70,48,48,48,14,184,184,184,67,93,93',
'58,131,186,44,40,40,108,49,44,44,44,44,44,146,130,43,50,69,69,69,142',
'5,109,43,43,19,19,19,19,59,144,59,9,147,169,71,71,71,110,111,169,9,7',
'132,112,113,114,69,32,32,32,32,172,115,40,172,116,117,86,133,73,68,66',
'139,36,71,71,142,46,142,45,145,51,148,149,195,150,1,72,33,153,154,157',
'158,74,159,191,160,161,75,75,162,6,163,27,164,167,168,170,44,44,44,44',
'171,61,21,44,44,44,44,44,44,12,174,182,129,175,176,177,36,178,146,179',
'44,132,36,144,51,36,180,151,22,22,94,72,181,12,22,22,173,18,147,55,173',
'15,7,173,185,51,173,58,55,131,6,26,11,25,44,187,188,6,6,194,44,95,130',
'44,182,130,3,34,96,136,136,27,32,32,132,186,72,26,90,140,87,44,99,44',
'100,101,190,102,44,27,69,103,43,53,104,105,12,69,106,,141,12,97,,,,136',
',,186,9,54,132,,44,,,25,,27,48,67,,,,,,,140,48,140,26,44,44,,92,,5,67',
',142,40,40,142,,,14,69,,19,19,,,,,98,69,,97,8,,,49,,,71,93,49,142,184',
'184,50,184,184,71,184,50,,,67,34,67,39,,,6,25,130,186,130,,72,,5,,44',
'61,72,,51,64,55,6,6,36,,6,,40,65,,,195,,,72,,182,10,10,40,136,,17,9',
',74,75,2,42,,41,6,151,,42,,41,,20,,61,44,34,51,51,,142,70,72,,,,26,',
',,13,,,51,,32,6,6,,51,,36,130,130,6,6,,,173,,40,173,,,,72,,,,51,,30',
'41,,,,53,72,,6,44,,,,,53,,,140,44,140,61,184,184,184,184,,,,,,,,61,',
'44,130,10,130,9,32,74,,140,32,140,,140,,,36,67,,91,,,,,25,,67,,,,72',
',,,,,,,,,130,,,,6,44,,,44,,,184,,,44,,61,,12,,,12,,,,,44,,,,44,,91,97',
'97,,88,71,,,,,182,,,,31,,140,97,140,,140,34,91,,61,,34,,64,,,152,26',
'44,44,140,94,65,,44,44,40,,44,,,71,34,,51,6,17,,,72,6,,72,,,10,10,53',
',22,22,140,,34,6,22,22,,53,22,32,51,60,,6,6,,,,135,,,,,,,,,,,44,44,137',
',,,34,,36,,,,67,12,12,6,,6,51,,72,,,67,,,,,,,,,135,,,,6,,,,44,,,,61',
'137,44,71,137,,,,44,44,,,61,19,,44,,,6,,31,,,,,34,44,31,12,,97,,,,,97',
',,,6,6,6,32,51,69,,,,,,,,,,,32,51,22,,,44,,6,,44,44,6,,,,,,25,12,44',
',,12,12,,,51,,69,34,,,12,,,24,67,,31,,31,24,31,31,,,,44,57,44,44,,,',
'57,,24,,,44,44,,12,12,19,24,24,24,,24,24,24,,,,,,19,97,,,,57,57,57,',
'97,,,,,,,,24,,,,44,24,24,,44,24,24,,,,40,,135,12,,135,,12,135,57,135',
',57,,,137,34,,137,,67,137,,137,44,138,138,138,6,6,6,6,67,6,,,24,12,',
',27,24,24,24,24,24,,,,57,61,,97,,,,,44,57,,36,,,,,31,6,,,,12,,44,,72',
',,44,,,44,44,,,,12,,,6,,12,,,34,,,,,44,6,61,,,,29,,6,6,6,6,29,,135,',
'135,,135,,135,,,,,,,137,,137,,137,6,137,24,24,24,24,,,29,24,24,24,24',
'24,24,57,,31,,,31,,31,,,,24,,,,,,135,,,,,,,57,,,,29,,137,,138,138,138',
'138,,138,,,,,,31,,24,31,,,,,24,,,24,,,,,,,,,,,,,,29,31,,,24,,24,,,29',
'24,24,,,,,,57,,57,,,,57,57,,,24,,,,,,,,,,24,,,57,,138,138,138,138,,',
',,57,,,,,24,24,,,,,,,,,,138,31,24,,24,31,31,,,,,,,,,57,,57,,,,,,,,,',
',,,29,,,,,,,,29,,,,31,,,,,,,,,,24,,29,,,,,,,,,,31,57,,,,,,,,28,,,,,',
'28,,,31,,,,23,,,,,,23,,,,,,,24,,,,31,,,,28,28,28,,,,,,29,,29,,,23,,29',
',,,,,,,,,,,,,,31,,,,,28,,,,,,29,,,,,,24,,,,,,,24,,24,,,,57,,,24,,,,57',
',,,,24,,,28,57,,,,,,,,28,,,,23,,,,,,,,,23,,,,,,,,,,,,,,,,,,,24,,,24',
',,29,,,24,,,,57,,,57,,,,,24,,31,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28',
',,,,24,24,,,,,24,24,23,,24,,,,,,31,,,28,,,,,,,,,,,,,23,,,,,,,,24,,,',
',,,,29,,,24,,57,,,,,,,,,24,24,57,,,,,,,,,,,57,57,,,,28,,28,,,,28,28',
',,,,,23,,23,,,,,23,,24,28,,,,,24,,,,,28,24,24,,29,,,29,24,,,,,23,57',
'57,,,,24,,57,,,,,,,,,,28,,28,,,,,,,,,,,,,,,,,24,,,24,,,,24,24,,,,,57',
',,57,24,,,57,57,,,29,,,,,,57,28,,,,,,,,,,,,,23,24,,24,24,,,,,,,,,24',
'24,,57,57,,,,,,,,,57,,,,,,29,29,,,,,,,,,,,,,,,24,,,,24,,,,24,,,,24,57',
',,,57,,,,57,,,,57,,,,,,,,,,,29,29,24,,,28,,29,,,,,28,,,57,,,23,,,28',
',,,,,,,,,,,,,24,,,,,,,,,,,,,57,,24,,29,,,24,29,29,24,24,,,,57,,,29,',
'57,,,57,57,,28,,24,28,,,,,56,,,,,23,56,,23,,,,,,29,29,,,,,,,,,29,,,',
',,,,,,56,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,29,,56,,29,56,,,,,,,',
',,,,,,,,,,,,28,,,,,29,,,,,,28,,,,,,56,,,,,28,28,,,56,,,,,,,,,23,23,',
'29,,,,,,,,,,,,,,,29,,,,,29,,,29,29,,,,,,,,,,,,28,28,,,,,28,28,,,,,,23',
'23,,,,,,23,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,28,,,28,,,,28,28,,,,,,56,,23',
'28,,,23,23,,,,,,,,,23,,,,,,,,,,,,,,,,,28,28,,,,,,,,,28,,,23,23,,,,,',
',,,23,,,,,56,,56,,,,56,56,,,,,,,,,,28,,,,28,,56,,28,,,,28,,,,56,23,',
',,23,,,,,,,,,,,,,,,,,28,,,,,,,,,56,,56,,23,,,,,,,,,,,,,,,,,,,,28,,,',
',,,,,,,,,23,,28,,,,,28,35,,28,28,,56,,23,,35,35,35,23,,,23,23,,,,,,35',
'35,35,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,56,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,56,,,,,,35,35,35,,,,35,35,,,,,,',
',,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,,,,,,,35,,,,,,35,,,35,,,,,,,35,,35,,35,35,,,,,',
',,,,,,,56,,,,,,,,,,,56,,,,,,,,,,,56,56,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,56,56,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,35,,,,,,56,,,56,,,,56,56,,,,,,,,,56,,,,,,,,,,,,,,35,,35,35,35,,',
',,,,,,,,,56,56,,,,,,,,,56,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,,,,,,,,56',
',,35,56,,,,56,,,,56,35,35,35,,,,,,,,,,35,,,35,,,,,,,,,,56,,,,,,,,,,',
',,35,,,,,,,,,,,,,,,,,,,,56,35,,,,,,,,,,,,,,56,,,,,56,,,56,56,,,,,,,',
',,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,',
',,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35',
'35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3230, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   193,    41,   285,   nil,    67,    -2,   150,    89,    37,
  -314,   261,    21,  -527,  -617,  -555,   nil,    35,   244,    25,
  -189,   150,    39,  1277,   839,  -181,  -384,   -12,  1264,  1016,
  -187,   563,   -52,    73,   -21,  2225,   -30,   nil,   nil,    32,
   -91,    23,  -191,  -353,     8,  -302,  -622,   nil,    74,    87,
    96,   -31,   nil,    -3,    32,  -257,  1847,   852,  -477,  -211,
   -66,     8,   nil,   nil,    12,    21,  -233,    42,   115,   101,
  -230,   119,   -17,  -309,  -224,  -430,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   100,   236,   -47,   nil,
   232,  -291,  -661,  -467,  -334,   209,  -310,    32,  -565,   227,
   243,   -22,   238,  -417,   244,  -416,  -273,  -854,    50,  -608,
  -203,  -595,  -775,    88,  -437,  -199,  -429,  -692,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -746,
  -433,  -446,  -682,  -484,   nil,    37,  -501,    50,   147,  -480,
  -361,  -563,  -523,   nil,  -555,  -704,  -762,  -742,  -150,  -356,
   127,  -301,   -19,   -63,  -464,   nil,   nil,   -70,  -466,   -68,
  -463,  -778,  -378,  -485,  -608,   nil,   nil,   132,   130,    65,
   128,   132,  -214,  -120,   141,   143,   143,  -523,  -370,  -369,
   154,  -497,  -317,   nil,  -442,  -443,  -588,  -428,  -604,   nil,
  -605,  -787,   nil,   nil,   -95,  -445 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   290,     7,   347,   291,
   nil,   nil,   534,   nil,   844,   nil,   289,   nil,   nil,   nil,
    14,    15,    21,   228,   320,   nil,   nil,   744,   226,   227,
   nil,   282,    20,   nil,   328,    24,    25,    26,    27,   nil,
   686,   nil,   nil,   nil,   308,   nil,   nil,    28,   422,    35,
   nil,   nil,    37,    40,    39,   nil,   223,   224,   594,   nil,
   129,   430,   128,   131,    78,    79,   nil,    49,   nil,   423,
   nil,   424,   435,   642,   497,   280,   265,   nil,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   266,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,
   562,   nil,   716,   943,   789,   550,   nil,   551,   nil,   nil,
   552,   nil,   554,   658,   nil,   nil,   nil,   560,   nil,   nil,
   nil,   754,   nil,   nil,   nil,   434,   267,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   609,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   829,   549,   nil,   553,   564,   566,   801,   569,
   570,   802,   573,   576,   nil,   284 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  5, 149, :_reduce_10,
  4, 152, :_reduce_11,
  2, 154, :_reduce_12,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_15,
  2, 158, :_reduce_16,
  0, 175, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  3, 151, :_reduce_40,
  1, 151, :_reduce_none,
  3, 162, :_reduce_42,
  3, 162, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  3, 174, :_reduce_46,
  3, 174, :_reduce_47,
  2, 174, :_reduce_48,
  1, 174, :_reduce_none,
  1, 161, :_reduce_50,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 179, :_reduce_none,
  4, 179, :_reduce_54,
  0, 187, :_reduce_55,
  0, 188, :_reduce_56,
  6, 184, :_reduce_57,
  1, 186, :_reduce_58,
  2, 178, :_reduce_59,
  3, 178, :_reduce_60,
  4, 178, :_reduce_61,
  5, 178, :_reduce_62,
  4, 178, :_reduce_63,
  5, 178, :_reduce_64,
  2, 178, :_reduce_65,
  2, 178, :_reduce_66,
  2, 178, :_reduce_67,
  2, 178, :_reduce_68,
  2, 178, :_reduce_69,
  1, 163, :_reduce_none,
  3, 163, :_reduce_71,
  1, 192, :_reduce_none,
  3, 192, :_reduce_73,
  1, 191, :_reduce_74,
  2, 191, :_reduce_75,
  3, 191, :_reduce_76,
  5, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  2, 191, :_reduce_80,
  4, 191, :_reduce_81,
  1, 191, :_reduce_82,
  3, 191, :_reduce_83,
  1, 195, :_reduce_none,
  3, 195, :_reduce_85,
  2, 194, :_reduce_86,
  3, 194, :_reduce_87,
  1, 197, :_reduce_88,
  3, 197, :_reduce_89,
  1, 196, :_reduce_90,
  1, 196, :_reduce_91,
  4, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  3, 196, :_reduce_95,
  3, 196, :_reduce_96,
  2, 196, :_reduce_97,
  1, 196, :_reduce_98,
  1, 171, :_reduce_99,
  1, 171, :_reduce_100,
  4, 171, :_reduce_101,
  3, 171, :_reduce_102,
  3, 171, :_reduce_103,
  3, 171, :_reduce_104,
  3, 171, :_reduce_105,
  2, 171, :_reduce_106,
  1, 171, :_reduce_107,
  1, 200, :_reduce_108,
  1, 200, :_reduce_none,
  2, 201, :_reduce_110,
  1, 201, :_reduce_111,
  3, 201, :_reduce_112,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_116,
  1, 202, :_reduce_117,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 159, :_reduce_120,
  1, 159, :_reduce_none,
  1, 160, :_reduce_122,
  0, 208, :_reduce_123,
  4, 160, :_reduce_124,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 177, :_reduce_197,
  5, 177, :_reduce_198,
  3, 177, :_reduce_199,
  5, 177, :_reduce_200,
  6, 177, :_reduce_201,
  5, 177, :_reduce_202,
  5, 177, :_reduce_203,
  5, 177, :_reduce_204,
  5, 177, :_reduce_205,
  4, 177, :_reduce_206,
  3, 177, :_reduce_207,
  3, 177, :_reduce_208,
  3, 177, :_reduce_209,
  3, 177, :_reduce_210,
  3, 177, :_reduce_211,
  3, 177, :_reduce_212,
  3, 177, :_reduce_213,
  3, 177, :_reduce_214,
  3, 177, :_reduce_215,
  4, 177, :_reduce_216,
  4, 177, :_reduce_217,
  2, 177, :_reduce_218,
  2, 177, :_reduce_219,
  3, 177, :_reduce_220,
  3, 177, :_reduce_221,
  3, 177, :_reduce_222,
  3, 177, :_reduce_223,
  3, 177, :_reduce_224,
  3, 177, :_reduce_225,
  3, 177, :_reduce_226,
  3, 177, :_reduce_227,
  3, 177, :_reduce_228,
  3, 177, :_reduce_229,
  3, 177, :_reduce_230,
  3, 177, :_reduce_231,
  3, 177, :_reduce_232,
  2, 177, :_reduce_233,
  2, 177, :_reduce_234,
  3, 177, :_reduce_235,
  3, 177, :_reduce_236,
  3, 177, :_reduce_237,
  3, 177, :_reduce_238,
  3, 177, :_reduce_239,
  6, 177, :_reduce_240,
  1, 177, :_reduce_none,
  1, 173, :_reduce_242,
  1, 210, :_reduce_none,
  2, 210, :_reduce_244,
  4, 210, :_reduce_245,
  2, 210, :_reduce_246,
  3, 214, :_reduce_247,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 167, :_reduce_250,
  1, 167, :_reduce_251,
  2, 167, :_reduce_252,
  4, 167, :_reduce_253,
  2, 167, :_reduce_254,
  1, 190, :_reduce_255,
  2, 190, :_reduce_256,
  2, 190, :_reduce_257,
  4, 190, :_reduce_258,
  1, 190, :_reduce_259,
  0, 218, :_reduce_260,
  2, 183, :_reduce_261,
  2, 217, :_reduce_262,
  2, 216, :_reduce_263,
  1, 216, :_reduce_none,
  1, 211, :_reduce_265,
  2, 211, :_reduce_266,
  3, 211, :_reduce_267,
  4, 211, :_reduce_268,
  1, 219, :_reduce_269,
  1, 219, :_reduce_270,
  3, 172, :_reduce_271,
  4, 172, :_reduce_272,
  2, 172, :_reduce_273,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_284,
  0, 242, :_reduce_285,
  4, 209, :_reduce_286,
  2, 209, :_reduce_287,
  0, 243, :_reduce_288,
  4, 209, :_reduce_289,
  3, 209, :_reduce_290,
  3, 209, :_reduce_291,
  2, 209, :_reduce_292,
  3, 209, :_reduce_293,
  3, 209, :_reduce_294,
  1, 209, :_reduce_295,
  4, 209, :_reduce_296,
  3, 209, :_reduce_297,
  1, 209, :_reduce_298,
  5, 209, :_reduce_299,
  4, 209, :_reduce_300,
  3, 209, :_reduce_301,
  2, 209, :_reduce_302,
  1, 209, :_reduce_none,
  2, 209, :_reduce_304,
  2, 209, :_reduce_305,
  6, 209, :_reduce_306,
  6, 209, :_reduce_307,
  0, 244, :_reduce_308,
  0, 245, :_reduce_309,
  7, 209, :_reduce_310,
  0, 246, :_reduce_311,
  0, 247, :_reduce_312,
  7, 209, :_reduce_313,
  5, 209, :_reduce_314,
  4, 209, :_reduce_315,
  0, 248, :_reduce_316,
  0, 249, :_reduce_317,
  9, 209, :_reduce_318,
  0, 250, :_reduce_319,
  0, 251, :_reduce_320,
  7, 209, :_reduce_321,
  0, 252, :_reduce_322,
  0, 253, :_reduce_323,
  0, 254, :_reduce_324,
  9, 209, :_reduce_325,
  0, 255, :_reduce_326,
  0, 256, :_reduce_327,
  6, 209, :_reduce_328,
  0, 257, :_reduce_329,
  6, 209, :_reduce_330,
  0, 258, :_reduce_331,
  0, 259, :_reduce_332,
  9, 209, :_reduce_333,
  1, 209, :_reduce_334,
  1, 209, :_reduce_335,
  1, 209, :_reduce_336,
  1, 209, :_reduce_337,
  1, 166, :_reduce_338,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 234, :_reduce_none,
  5, 234, :_reduce_356,
  1, 156, :_reduce_none,
  2, 156, :_reduce_358,
  1, 237, :_reduce_none,
  1, 237, :_reduce_360,
  1, 271, :_reduce_none,
  3, 271, :_reduce_362,
  1, 274, :_reduce_363,
  3, 274, :_reduce_364,
  1, 273, :_reduce_365,
  4, 273, :_reduce_366,
  6, 273, :_reduce_367,
  3, 273, :_reduce_368,
  5, 273, :_reduce_369,
  2, 273, :_reduce_370,
  4, 273, :_reduce_371,
  1, 273, :_reduce_372,
  3, 273, :_reduce_373,
  4, 275, :_reduce_374,
  2, 275, :_reduce_375,
  2, 275, :_reduce_376,
  1, 275, :_reduce_377,
  2, 280, :_reduce_378,
  1, 280, :_reduce_none,
  6, 281, :_reduce_380,
  8, 281, :_reduce_381,
  4, 281, :_reduce_382,
  6, 281, :_reduce_383,
  4, 281, :_reduce_384,
  2, 281, :_reduce_385,
  6, 281, :_reduce_386,
  2, 281, :_reduce_387,
  4, 281, :_reduce_388,
  6, 281, :_reduce_389,
  2, 281, :_reduce_390,
  4, 281, :_reduce_391,
  2, 281, :_reduce_392,
  4, 281, :_reduce_393,
  1, 281, :_reduce_394,
  1, 185, :_reduce_395,
  1, 185, :_reduce_none,
  3, 285, :_reduce_397,
  1, 285, :_reduce_398,
  4, 285, :_reduce_399,
  1, 286, :_reduce_none,
  4, 286, :_reduce_401,
  1, 287, :_reduce_402,
  3, 287, :_reduce_403,
  1, 288, :_reduce_404,
  1, 288, :_reduce_none,
  0, 292, :_reduce_406,
  3, 232, :_reduce_407,
  4, 290, :_reduce_408,
  1, 290, :_reduce_409,
  3, 291, :_reduce_410,
  3, 291, :_reduce_411,
  0, 295, :_reduce_412,
  0, 296, :_reduce_413,
  6, 294, :_reduce_414,
  2, 180, :_reduce_415,
  4, 180, :_reduce_416,
  5, 180, :_reduce_417,
  5, 180, :_reduce_418,
  0, 298, :_reduce_419,
  3, 231, :_reduce_420,
  4, 231, :_reduce_421,
  4, 231, :_reduce_422,
  3, 231, :_reduce_423,
  3, 231, :_reduce_424,
  3, 231, :_reduce_425,
  2, 231, :_reduce_426,
  1, 231, :_reduce_427,
  4, 231, :_reduce_428,
  0, 299, :_reduce_429,
  0, 300, :_reduce_430,
  6, 230, :_reduce_431,
  0, 301, :_reduce_432,
  0, 302, :_reduce_433,
  6, 230, :_reduce_434,
  0, 304, :_reduce_435,
  6, 236, :_reduce_436,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  6, 155, :_reduce_439,
  0, 155, :_reduce_440,
  1, 305, :_reduce_441,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  2, 306, :_reduce_444,
  1, 306, :_reduce_none,
  2, 157, :_reduce_446,
  1, 157, :_reduce_none,
  1, 220, :_reduce_448,
  1, 220, :_reduce_449,
  1, 220, :_reduce_none,
  1, 221, :_reduce_451,
  1, 308, :_reduce_452,
  1, 308, :_reduce_none,
  2, 308, :_reduce_454,
  3, 309, :_reduce_455,
  1, 309, :_reduce_456,
  3, 222, :_reduce_457,
  3, 223, :_reduce_458,
  3, 224, :_reduce_459,
  3, 224, :_reduce_460,
  1, 313, :_reduce_461,
  3, 313, :_reduce_462,
  1, 314, :_reduce_none,
  2, 314, :_reduce_464,
  3, 226, :_reduce_465,
  3, 226, :_reduce_466,
  1, 316, :_reduce_467,
  3, 316, :_reduce_468,
  3, 225, :_reduce_469,
  3, 225, :_reduce_470,
  3, 227, :_reduce_471,
  3, 227, :_reduce_472,
  1, 317, :_reduce_473,
  3, 317, :_reduce_474,
  1, 318, :_reduce_475,
  3, 318, :_reduce_476,
  1, 310, :_reduce_477,
  2, 310, :_reduce_478,
  1, 311, :_reduce_479,
  2, 311, :_reduce_480,
  1, 312, :_reduce_481,
  2, 312, :_reduce_482,
  1, 315, :_reduce_483,
  0, 320, :_reduce_484,
  3, 315, :_reduce_485,
  0, 321, :_reduce_486,
  4, 315, :_reduce_487,
  1, 319, :_reduce_488,
  1, 319, :_reduce_489,
  1, 319, :_reduce_490,
  1, 319, :_reduce_none,
  2, 206, :_reduce_492,
  1, 206, :_reduce_493,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  3, 207, :_reduce_498,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  2, 307, :_reduce_501,
  2, 307, :_reduce_502,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 199, :_reduce_508,
  1, 199, :_reduce_509,
  1, 199, :_reduce_510,
  1, 199, :_reduce_511,
  1, 199, :_reduce_512,
  1, 199, :_reduce_513,
  1, 199, :_reduce_514,
  1, 228, :_reduce_515,
  1, 228, :_reduce_516,
  1, 165, :_reduce_517,
  1, 165, :_reduce_518,
  1, 170, :_reduce_519,
  1, 170, :_reduce_520,
  1, 238, :_reduce_521,
  0, 323, :_reduce_522,
  4, 238, :_reduce_523,
  2, 238, :_reduce_524,
  3, 240, :_reduce_525,
  2, 240, :_reduce_526,
  4, 324, :_reduce_527,
  2, 324, :_reduce_528,
  2, 324, :_reduce_529,
  1, 324, :_reduce_none,
  2, 326, :_reduce_531,
  0, 326, :_reduce_532,
  6, 293, :_reduce_533,
  8, 293, :_reduce_534,
  4, 293, :_reduce_535,
  6, 293, :_reduce_536,
  4, 293, :_reduce_537,
  6, 293, :_reduce_538,
  2, 293, :_reduce_539,
  4, 293, :_reduce_540,
  6, 293, :_reduce_541,
  2, 293, :_reduce_542,
  4, 293, :_reduce_543,
  2, 293, :_reduce_544,
  4, 293, :_reduce_545,
  1, 293, :_reduce_546,
  0, 293, :_reduce_547,
  1, 289, :_reduce_548,
  1, 289, :_reduce_549,
  1, 289, :_reduce_550,
  1, 289, :_reduce_551,
  1, 272, :_reduce_none,
  1, 272, :_reduce_553,
  1, 328, :_reduce_none,
  3, 328, :_reduce_555,
  1, 282, :_reduce_556,
  3, 282, :_reduce_557,
  2, 329, :_reduce_558,
  2, 330, :_reduce_559,
  1, 276, :_reduce_none,
  3, 276, :_reduce_561,
  1, 325, :_reduce_none,
  3, 325, :_reduce_563,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  2, 277, :_reduce_566,
  1, 277, :_reduce_567,
  3, 332, :_reduce_568,
  3, 333, :_reduce_569,
  1, 283, :_reduce_570,
  3, 283, :_reduce_571,
  1, 327, :_reduce_572,
  3, 327, :_reduce_573,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  2, 284, :_reduce_576,
  1, 284, :_reduce_577,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 279, :_reduce_580,
  2, 278, :_reduce_581,
  0, 278, :_reduce_582,
  1, 241, :_reduce_none,
  0, 336, :_reduce_584,
  4, 241, :_reduce_585,
  1, 229, :_reduce_586,
  2, 229, :_reduce_587,
  1, 213, :_reduce_none,
  3, 213, :_reduce_589,
  3, 337, :_reduce_590,
  2, 337, :_reduce_591,
  2, 337, :_reduce_592,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 297, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 169, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 176, :_reduce_none,
  1, 176, :_reduce_none,
  2, 193, :_reduce_none,
  2, 168, :_reduce_none,
  0, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 239, :_reduce_615,
  1, 239, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_618,
  0, 148, :_reduce_619 ]

racc_reduce_n = 620

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "mrhs_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

def _reduce_284(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_286(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_288(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_289(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_301(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_330(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_332(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_365(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_371(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_373(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
 result = 0 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 405 omitted

def _reduce_406(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_407(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_414(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_434(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_484(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_485(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_487(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_488(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_502(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_558(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_567(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_568(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_569(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_577(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_581(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = nil
                    
    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_586(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

def _reduce_615(val, _values, result)
 yyerrok 
    result
end

# reduce 616 omitted

# reduce 617 omitted

def _reduce_618(val, _values, result)
 yyerrok 
    result
end

def _reduce_619(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
