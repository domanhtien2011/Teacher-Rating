#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-602,580,625,-101,-103,-100,271,-602,-602,-602,748,271,221,-602,-602',
'271,-602,116,83,661,218,219,115,-104,242,-602,84,271,739,580,580,580',
'740,-517,622,783,-602,-602,995,-602,-602,-602,-602,-602,580,-516,-84',
'112,222,700,-106,-101,-105,660,-99,-102,239,209,-102,-70,241,240,237',
'238,-98,624,-100,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602',
'-602,-602,-602,728,728,-602,-602,-602,-103,645,-99,-599,-103,-602,-416',
'270,-602,218,219,621,270,-602,-98,-602,270,-602,-602,-602,-602,-602',
'-602,-602,222,-602,-602,-602,270,116,747,-101,-103,-100,115,-598,-101',
'-103,-100,-288,-602,-602,-95,-93,210,-602,-288,-288,-288,116,-598,-288',
'-288,-288,115,-288,-102,116,116,116,929,211,115,115,115,-288,-288,-288',
'699,-97,-92,-96,116,-90,-93,-288,-288,115,-288,-288,-288,-288,-288,-89',
'-92,-91,-102,728,116,-94,217,-102,606,115,528,116,116,606,661,222,115',
'115,261,218,219,-94,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,782,661,-288,-288,-288,222,785,-288,999,768,-288',
'318,660,-288,-288,-595,-288,319,-288,661,-288,457,-288,-288,-288,-288',
'-288,-288,-288,-105,-288,-92,-288,608,607,660,-94,606,608,607,619,222',
'760,-596,-602,-288,-288,-288,-288,-288,-288,-91,-288,660,358,-101,-288',
'-288,-288,94,95,-104,-288,-288,-100,-288,-92,116,-502,-92,-512,-94,115',
'222,-94,-502,-106,-512,540,382,-595,542,-92,606,-502,-288,-288,-94,-288',
'-288,-288,-288,-288,94,95,409,-505,-602,608,607,411,410,-595,-505,-602',
'242,877,758,-596,-598,-425,540,-505,-602,542,385,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-596,-602,-288,-288',
'-288,388,644,239,96,97,-288,241,240,-288,608,607,604,816,-288,586,-288',
'-517,-288,-288,-288,-288,-288,-288,-288,-507,-288,-100,-288,-425,116',
'391,-507,407,-602,115,-425,242,96,97,-602,-288,-288,-516,-95,-425,-288',
'-602,-602,-602,116,565,-602,-602,-602,115,-602,-104,540,-90,565,542',
'568,-425,412,-602,-602,-602,-602,239,116,568,-99,241,240,115,-602,-602',
'456,-602,-602,-602,-602,-602,-508,-89,561,-602,558,557,556,-508,559',
'458,-602,576,575,116,-98,-598,606,116,115,-602,576,575,115,-602,-602',
'-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,459',
'-602,-602,-602,221,784,-602,569,490,-602,273,606,-602,-602,611,-602',
'569,-602,500,-602,503,-602,-602,-602,-602,-602,-602,-602,505,-602,-602',
'-602,561,606,558,557,556,565,559,608,607,626,975,606,-602,-602,-602',
'-602,568,-602,-505,-602,845,816,-69,528,216,-505,-505,-505,-102,639',
'-505,-505,-505,561,-505,558,557,556,563,559,608,607,-505,222,-505,-505',
'-505,573,572,576,575,218,219,540,-505,-505,539,-505,-505,-505,-505,-505',
'608,607,614,-96,-97,514,264,-502,264,-94,608,607,609,265,-502,265,-105',
'-106,845,816,515,569,-103,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-505,-505,-505,638,-280,-505,-505,-505,522,-505,-505,-280',
'276,-505,222,841,-505,-505,273,-505,-280,-505,525,-505,529,-505,-505',
'-505,-505,-505,-505,-505,242,-505,537,-505,561,-509,558,557,556,565',
'559,543,-509,-92,576,575,-505,-505,-505,-505,568,-505,-502,-505,218',
'219,-101,218,219,-502,-502,-502,-505,544,-502,-502,-502,-511,-502,505',
'-289,586,563,547,-511,401,-502,-289,-502,-502,-502,573,572,576,575,590',
'-289,591,-502,-502,-513,-502,-502,-502,-502,-502,953,-513,558,557,556',
'-510,559,561,-505,558,557,556,-510,559,561,-505,558,557,556,613,559',
'569,617,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,620,242,-502,-502,-502,-514,-502,-502,714,623,-502,630,-514',
'-502,-502,714,-502,717,-502,-262,-502,-514,-502,-502,-502,-502,-502',
'-502,-502,632,-502,222,-502,239,636,-515,637,241,240,237,238,273,-515',
'218,219,-502,-502,-502,-502,648,-502,-515,-502,294,72,73,74,12,60,242',
'242,-502,66,67,242,242,222,70,222,68,69,71,33,34,75,76,119,120,121,122',
'123,32,31,30,104,103,105,106,868,869,22,222,870,110,111,649,11,48,-84',
'13,108,107,109,98,59,100,99,101,678,102,110,111,222,94,95,533,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,-288,235,236,215,689',
'256,257,-288,43,694,521,36,-599,695,61,62,-288,222,63,519,38,239,702',
'245,47,241,240,237,238,249,247,243,23,244,705,706,-288,91,83,85,86,87',
'89,-288,708,710,84,92,-599,260,712,-239,-288,720,65,721,722,81,88,90',
'724,586,96,97,294,72,73,74,12,60,731,761,-289,66,67,762,763,-263,70',
'-289,68,69,71,33,34,75,76,769,-289,490,490,222,32,31,30,104,103,105',
'106,787,261,22,503,505,689,222,649,11,48,273,13,108,107,109,98,59,100',
'99,101,273,102,110,111,689,94,95,242,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,215,235,236,-280,816,256,257,454,43,222,-280,36',
'839,222,61,62,455,816,63,-280,38,239,849,245,47,241,240,237,238,249',
'247,243,23,244,222,-264,215,91,83,85,86,87,89,956,215,876,84,92,879',
'260,705,214,744,882,65,885,887,81,88,90,212,889,96,97,294,72,73,74,12',
'60,222,891,215,66,67,892,689,900,70,531,68,69,71,33,34,75,76,-262,455',
'904,906,907,32,31,30,104,103,105,106,222,705,22,910,912,914,916,633',
'11,48,916,13,108,107,109,98,59,100,99,101,222,102,110,111,922,94,95',
'924,45,46,44,242,246,251,252,253,248,250,258,259,254,255,215,235,236',
'-514,926,256,257,956,43,222,-514,36,936,937,61,62,744,222,63,-514,38',
'239,940,245,47,241,240,237,238,249,247,243,23,244,-265,950,-515,91,83',
'85,86,87,89,-515,215,957,84,92,958,260,960,1006,-515,961,65,977,979',
'81,88,90,1004,980,96,97,294,72,73,74,12,60,984,705,-335,66,67,989,991',
'993,70,-335,68,69,71,33,34,75,76,995,-335,995,1002,1007,32,31,30,104',
'103,105,106,1008,953,22,558,557,556,916,559,11,48,916,13,108,107,109',
'98,59,100,99,101,916,102,110,111,1013,94,95,977,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,215,235,236,-289,-599,256,257,742,43',
'-598,-289,36,694,977,61,62,744,1036,63,-289,38,239,1037,245,47,241,240',
'237,238,249,247,243,23,244,1038,1039,-288,91,83,85,86,87,89,-288,215',
'995,84,92,-599,260,995,589,-288,995,65,222,916,81,88,90,587,977,96,97',
'294,72,73,74,12,60,3,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121',
'122,123,32,31,30,104,103,105,106,,,22,119,120,121,122,123,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222,260,,,,,65,,,81',
'88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,296,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,561,22,558,557,556,,559,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,561,,558,557,556,,559,561,714',
'558,557,556,,559,,,,921,,43,,,36,242,,61,62,,,63,,38,,,,47,,,714,256',
'257,,,23,,714,,717,91,83,85,86,87,89,,239,,84,92,241,240,237,238,,,65',
',,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,561,22,558,557,556,,559,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,',
'561,,558,557,556,714,559,,,,,,,256,257,,43,,,296,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,,714,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',561,,558,557,556,65,559,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,714,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256,257,,43,,,296',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,,,254,255,,,,,,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-622,-622,-622,-622,248,250,,,-622',
'-622,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-622,-622,-622,-622,248,250',
',,-622,-622,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,-622,-622,,,256,257,,43,,,36,,,61,62,,',
'63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-622,-622,-622,-622,248,250',
',,-622,-622,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259',
'254,255,,-622,-622,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,',
'227,,,233,,,61,62,,,63,,285,239,283,245,47,241,240,237,238,,,,232,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,',
',239,,245,47,241,240,237,238,,,,232,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,',
',,,,,,,,,,,,,,,,,894,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,222,,,,,,65,,288,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,300,,,,,,,',
',,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,317,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,517,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,894,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,967,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'673,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,533,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
'222,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,592,59,100,99,593,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,594,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,592,59,100,99,593,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,594,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,352,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,673,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,401,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,',
',,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,417,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,673,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,',
',,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,417,,,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,766,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,673,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,',
',,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305',
',,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,417,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-281,,96,97,,,,-281,-281,-281',
',,-281,-281,-281,561,-281,558,557,556,565,559,,,,,-281,-281,-281,,,568',
',,,,-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,563,,,,,,,,,573,572',
'576,575,,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,,,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,569,-281',
',-281,,-281,-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281',
'-281,-281,-281,-604,-281,,-281,,,,-604,-604,-604,,,-604,-604,-604,561',
'-604,558,557,556,565,559,,,,-604,-604,-604,-604,,,568,,,,,-604,-604',
',-604,-604,-604,-604,-604,,,,,,,,,,563,,,,,,,,,,,576,575,,-604,-604',
'-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,,,-604,-604',
'-604,,,-604,,,-604,,,-604,-604,,-604,569,-604,,-604,,-604,-604,-604',
'-604,-604,-604,-604,,-604,-604,-604,,,,,,,,,,,,,-604,-604,-604,-604',
'-603,-604,,-604,,,,-603,-603,-603,,,-603,-603,-603,561,-603,558,557',
'556,565,559,,,,-603,-603,-603,-603,,,568,,,,,-603,-603,,-603,-603,-603',
'-603,-603,,,,,,,,,,563,,,,,,,,,,,576,575,,-603,-603,-603,-603,-603,-603',
'-603,-603,-603,-603,-603,-603,-603,-603,,,-603,-603,-603,,,-603,,,-603',
',,-603,-603,,-603,569,-603,,-603,,-603,-603,-603,-603,-603,-603,-603',
',-603,-603,-603,,,,,,,,,,,,,-603,-603,-603,-603,,-603,,-603,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,367,366,368,365',
'172,191,190,,,,,,171,178,169,170,362,363,364,360,129,100,99,361,,102',
',,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,374,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,398,397,128,,399,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,-621,,,,,,92,-621,-621,-621,,,-621,-621,-621,158,-621,,,,,,,,,-621',
'-621,,,,,,,,,,-621,-621,,-621,-621,-621,-621,-621,,,561,,558,557,556',
'565,559,,,,,,,,,,568,,,,,-295,,,,,,,-295,-295,-295,,-621,-295,-295,-295',
',-295,563,-621,,,,,273,-621,,-295,-295,576,575,,,,,,,-295,-295,,-295',
'-295,-295,-295,-295,,-621,-621,,,,,,,,,,,,,-621,,,569,,-621,,,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295',
'-295,,,-295,,276,-295,,,-295,-295,,-295,,-295,,-295,,-295,-295,-295',
'-295,-295,-295,-295,,-295,,-295,,,,,,,,,,,,-621,-295,-295,,-295,,-295',
'-621,-621,-621,,,-621,-621,-621,561,-621,558,557,556,565,559,,,,-621',
'-621,-621,,,,568,,,,,-621,-621,,-621,-621,-621,-621,-621,,,,,,,,,,563',
',,,,,,,,,,576,575,,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,,,-621,-621,-621,,,-621,,273,-621,,,-621,-621,,-621',
'569,-621,,-621,,-621,-621,-621,-621,-621,-621,-621,,-621,-621,-621,',
',,,,,,,,,,-424,-621,-621,,-621,,-621,-424,-424,-424,,,-424,-424,-424',
'561,-424,558,557,556,565,559,,,,-424,-424,-424,,,,568,,,,,-424,-424',
',-424,-424,-424,-424,-424,,,,,,,,,,563,752,,,,,,,,573,572,576,575,,-424',
'-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,,,-424',
'-424,-424,,,-424,,273,-424,,,-424,-424,,-424,569,-424,,-424,,-424,-424',
'-424,-424,-424,-424,-424,,-424,-424,-424,,,,,,736,438,,,737,,,-424,-424',
',-424,,-424,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,1001,438,,,1000,,,,,,',
',,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',561,165,558,557,556,565,559,,,,,,,,,,568,,,,,158,,,,561,,558,557,556',
'565,559,,,,,,,563,682,431,568,,683,,,,573,572,576,575,,161,162,,157',
'139,140,141,148,145,147,,563,142,143,,,,163,164,149,150,,576,575,,,273',
',,,,569,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,561',
'165,558,557,556,565,559,569,,651,431,,,652,,,568,,,,,158,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,563,163,164,149,150,,,,,,273,576',
'575,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165',
',,,,653,438,,,654,,569,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,1031,438,,,1032,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,561,165',
'558,557,556,565,559,,,,,,,,,,568,,,,,158,,,,,,,,,561,,558,557,556,565',
'559,,563,434,438,,,433,,,568,573,572,576,575,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,563,163,164,149,150,,,222,,,273,576,575,,,569',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,561,165,558',
'557,556,565,559,,,,,,569,,,,568,,,,561,158,558,557,556,565,559,,,,,',
',,,,568,,563,,,,,,,,,573,572,576,575,,,,,,,,563,752,427,431,,,428,,',
'573,572,576,575,,,161,162,,157,139,140,141,148,145,147,569,,142,143',
',,,163,164,149,150,,,,,,273,,,,569,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,561,165,558,557,556,565,559,,,,,,,,,,568,,,,,158',
',,,,,,,,561,,558,557,556,565,559,,563,853,438,,,854,,,568,573,572,576',
'575,,161,162,,157,139,140,141,148,145,147,,,142,143,,,563,163,164,149',
'150,,,,,,273,576,575,,,569,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,488,431,,,489,,569,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,653,438,,,654',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,651,431,,,652,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,561,165,558,557,556,565,559',
',,,,,,,,,568,,,,,158,,,,561,,558,557,556,565,559,,,,,,,563,685,438,568',
',686,,,,573,572,576,575,,161,162,,157,139,140,141,148,145,147,,563,142',
'143,,,,163,164,149,150,,576,575,,,273,,,,,569,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,561,165,558,557,556,565,559,569,561',
',558,557,556,565,559,,568,,,,,158,,561,568,558,557,556,565,559,,,,,',
',,,563,568,,,,,,,563,573,572,576,575,,,,,573,572,576,575,,,563,,,,,',
',,,,,576,575,,,,,,,,,,569,,,,,,,,569,,,734,431,,,735,,,,,,,,569,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,1029,431,,,1030,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26190, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'434,343,392,1029,1030,1044,310,434,434,434,598,64,22,434,434,664,434',
'748,80,495,692,692,748,737,482,434,80,29,594,850,342,903,594,226,389',
'652,434,434,1046,434,434,434,434,434,925,225,677,3,22,546,353,734,590',
'495,350,736,482,13,1031,677,482,482,482,482,349,392,851,434,434,434',
'434,434,434,434,434,434,434,434,434,434,434,582,852,434,434,434,735',
'434,226,737,652,434,29,310,434,755,755,389,64,434,225,434,664,434,434',
'434,434,434,434,434,692,434,434,434,29,343,598,1029,1030,1044,343,736',
'1029,1030,1044,654,434,434,737,434,15,434,654,654,654,598,1031,654,654',
'654,598,654,434,850,342,903,850,16,850,342,903,654,654,654,546,353,734',
'590,925,350,736,654,654,925,654,654,654,654,654,349,682,851,1031,583',
'5,683,19,1031,618,5,456,582,852,386,486,755,582,852,25,451,451,735,654',
'654,654,654,654,654,654,654,654,654,654,654,654,654,651,665,654,654',
'654,951,654,654,951,634,654,40,486,654,654,592,654,43,654,494,654,228',
'654,654,654,654,654,654,654,456,654,682,654,618,618,665,683,615,386',
'386,386,48,618,593,853,654,654,654,654,433,654,634,654,494,72,651,433',
'433,433,315,315,654,433,433,634,433,682,583,592,682,362,683,583,451',
'683,592,228,362,697,87,592,697,682,376,592,433,433,683,433,433,433,433',
'433,44,44,126,593,853,615,615,126,126,592,593,853,462,786,615,593,853',
'811,336,593,853,336,88,433,433,433,433,433,433,433,433,433,433,433,433',
'433,433,593,853,433,433,433,89,433,462,315,315,433,462,462,433,376,376',
'376,982,433,982,433,42,433,433,433,433,433,433,433,366,433,786,433,811',
'346,90,366,124,685,346,811,463,44,44,653,433,433,41,433,811,433,653',
'653,653,291,702,653,653,653,291,653,433,332,42,879,332,702,811,207,653',
'653,653,653,463,860,879,42,463,463,860,653,653,227,653,653,653,653,653',
'367,41,921,685,921,921,921,367,921,229,685,702,702,753,41,685,394,934',
'753,685,879,879,934,653,653,653,653,653,653,653,653,653,653,653,653',
'653,653,685,230,653,653,653,234,653,653,702,266,653,269,380,653,653',
'380,653,879,653,280,653,281,653,653,653,653,653,653,653,284,653,653',
'653,752,383,752,752,752,752,752,394,394,394,921,378,653,653,653,653',
'752,653,101,653,1015,1015,295,319,18,101,101,101,653,428,101,101,101',
'717,101,717,717,717,752,717,380,380,101,297,101,101,101,752,752,752',
'752,327,327,331,101,101,331,101,101,101,101,101,383,383,383,319,18,298',
'27,360,370,428,378,378,378,27,360,370,319,18,723,723,299,752,428,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,427,968,101,101',
'101,305,101,101,968,308,101,309,717,101,101,314,101,968,101,316,101',
'320,101,101,101,101,101,101,101,323,101,329,101,340,368,340,340,340',
'340,340,333,368,427,705,705,101,101,101,101,340,101,98,101,749,749,427',
'341,341,98,98,98,101,334,98,98,98,363,98,337,522,347,340,340,363,348',
'98,522,98,98,98,340,340,340,340,352,522,354,98,98,364,98,98,98,98,98',
'891,364,891,891,891,365,891,563,361,563,563,563,365,563,1013,361,1013',
'1013,1013,382,1013,340,385,98,98,98,98,98,98,98,98,98,98,98,98,98,98',
'388,481,98,98,98,302,98,98,563,391,98,413,302,98,98,1013,98,563,98,416',
'98,302,98,98,98,98,98,98,98,418,98,422,98,481,425,303,426,481,481,481',
'481,435,303,20,20,98,98,98,98,443,98,303,98,699,699,699,699,699,699',
'464,465,98,699,699,466,467,496,699,497,699,699,699,699,699,699,699,511',
'511,511,511,511,699,699,699,699,699,699,699,756,756,699,512,756,756',
'756,446,699,699,513,699,699,699,699,699,699,699,699,699,516,699,699',
'699,518,699,699,523,699,699,699,446,446,446,446,446,446,446,446,446',
'446,446,686,446,446,304,526,446,446,686,699,534,304,699,686,535,699',
'699,686,536,699,304,699,446,549,446,699,446,446,446,446,446,446,446',
'699,446,550,552,854,699,699,699,699,699,699,854,553,554,699,699,854',
'446,562,446,854,570,699,574,577,699,699,699,579,584,699,699,802,802',
'802,802,802,802,585,622,740,802,802,625,627,631,802,740,802,802,802',
'802,802,802,802,635,740,640,646,655,802,802,802,802,802,802,802,657',
'663,802,670,672,679,681,656,802,802,684,802,802,802,802,802,802,802',
'802,802,687,802,802,802,688,802,802,691,802,802,802,656,656,656,656',
'656,656,656,656,656,656,656,224,656,656,306,693,656,656,224,802,701',
'306,802,716,718,802,802,224,725,802,306,802,656,730,656,802,656,656',
'656,656,656,656,656,802,656,733,765,893,802,802,802,802,802,802,893',
'17,770,802,802,788,656,789,17,893,791,802,792,793,802,802,802,17,795',
'802,802,806,806,806,806,806,806,796,797,321,806,806,798,810,814,806',
'321,806,806,806,806,806,806,806,817,321,818,822,823,806,806,806,806',
'806,806,806,824,825,806,829,830,832,833,421,806,806,835,806,806,806',
'806,806,806,806,806,806,838,806,806,806,840,806,806,843,806,806,806',
'421,421,421,421,421,421,421,421,421,421,421,955,421,421,964,846,421',
'421,955,806,856,964,806,861,862,806,806,955,863,806,964,806,421,872',
'421,806,421,421,421,421,421,421,421,806,421,873,890,965,806,806,806',
'806,806,806,965,966,894,806,806,895,421,897,966,965,898,806,923,927',
'806,806,806,966,928,806,806,807,807,807,807,807,807,933,941,49,807,807',
'944,945,946,807,49,807,807,807,807,807,807,807,947,49,949,959,967,807',
'807,807,807,807,807,807,970,999,807,999,999,999,971,999,807,807,972',
'807,807,807,807,807,807,807,807,807,973,807,807,807,974,807,807,976',
'807,807,807,532,532,532,532,532,532,532,532,532,532,532,596,532,532',
'1007,1000,532,532,596,807,1001,1007,807,1003,1014,807,807,596,1019,807',
'1007,807,532,1020,532,807,532,532,532,532,532,532,532,807,532,1021,1022',
'1032,807,807,807,807,807,807,1032,351,1023,807,807,1032,532,1024,351',
'1032,1025,807,1028,1033,807,807,807,351,1034,807,807,578,578,578,578',
'578,578,1,,,578,578,,,,578,,578,578,578,578,578,578,578,293,293,293',
'293,293,578,578,578,578,578,578,578,,,578,9,9,9,9,9,578,578,,578,578',
'578,578,578,578,578,578,578,,578,578,578,,578,578,,578,578,578,767,767',
'767,767,767,767,767,767,767,767,767,,767,767,,,767,767,,578,,,578,,',
'578,578,,,578,,578,767,,767,578,767,767,767,767,767,767,767,578,767',
',,,578,578,578,578,578,578,,,,578,578,,767,,,,,578,,,578,578,578,,,578',
'578,896,896,896,896,896,896,,,,896,896,,,,896,,896,896,896,896,896,896',
'896,676,676,676,676,676,896,896,896,896,896,896,896,,,896,,,,,,896,896',
',896,896,896,896,896,896,896,896,896,,896,896,896,,896,896,,896,896',
'896,485,485,485,485,485,485,485,485,485,485,485,,485,485,,,485,485,',
'896,,,896,,,896,896,,,896,,896,485,,485,896,485,485,485,485,485,485',
'485,896,485,,,,896,896,896,896,896,896,,,,896,896,485,485,,,,,896,,',
'896,896,896,,,896,896,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2',
'2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,772',
'772,772,772,772,772,772,772,772,772,772,,772,772,,,772,772,,2,,,2,,',
'2,2,,,2,,2,772,,772,2,772,772,772,772,772,772,772,2,772,,,,2,2,2,2,2',
'2,,,,2,2,,772,,,,,2,,,2,2,2,,,2,2,816,816,816,816,816,816,,,,816,816',
',,,816,,816,816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816',
',,816,,,,,,816,816,,816,816,816,816,816,816,816,816,816,,816,816,816',
',816,816,,816,816,816,779,779,779,779,779,779,779,779,779,779,779,,779',
'779,,,779,779,,816,,,816,,,816,816,,,816,,816,779,,779,816,779,779,779',
'779,779,779,779,816,779,,,,816,816,816,816,816,816,,,,816,816,,779,',
',,,816,,,816,816,816,,,816,816,209,209,209,209,209,209,,,,209,209,,',
',209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,',
',209,,,,,,209,209,,209,209,209,209,209,209,209,209,209,,209,209,209',
',209,209,,209,209,209,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24',
',209,,,209,,,209,209,,,209,,209,24,,24,209,24,24,24,24,24,24,24,209',
'24,,,,209,209,209,209,209,209,,,,209,209,,24,,,,,209,,,209,209,209,',
',209,209,700,700,700,700,700,700,,,,700,700,,,,700,,700,700,700,700',
'700,700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,700,700,,700',
'700,700,700,700,700,700,700,700,,700,700,700,,700,700,,700,700,700,781',
'781,781,781,781,781,781,781,781,781,781,,781,781,,,781,781,,700,,,700',
',,700,700,,,700,,700,781,,781,700,781,781,781,781,781,781,781,700,781',
',,,700,700,700,700,700,700,,,,700,700,,781,,,,,700,,,700,700,700,,,700',
'700,407,407,407,407,407,407,,,,407,407,,,,407,,407,407,407,407,407,407',
'407,,,,,,407,407,407,407,407,407,407,,,407,,,,,,407,407,407,407,407',
'407,407,407,407,407,407,407,,407,407,407,,407,407,,407,407,407,441,441',
'441,441,441,441,441,441,441,441,441,,441,441,,,441,441,,407,,,407,,',
'407,407,,,407,,407,441,,441,407,441,441,441,441,441,441,441,407,441',
',,,407,407,407,407,407,407,,,,407,407,,441,,,,,407,,,407,407,407,,,407',
'407,987,987,987,987,987,987,,,,987,987,,,,987,,987,987,987,987,987,987',
'987,,,,,,987,987,987,987,987,987,987,,,987,,,,,,987,987,,987,987,987',
'987,987,987,987,987,987,,987,987,987,,987,987,,987,987,987,690,690,690',
'690,690,690,690,690,690,690,690,,690,690,,,690,690,,987,,,987,,,987',
'987,,,987,,987,690,,690,987,690,690,690,690,690,690,690,987,690,,,,987',
'987,987,987,987,987,,,,987,987,,690,,,,,987,,,987,987,987,,,987,987',
'986,986,986,986,986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986',
',,,,,986,986,986,986,986,986,986,,,986,,,,,,986,986,,986,986,986,986',
'986,986,986,986,986,,986,986,986,,986,986,,986,986,986,875,875,875,875',
'875,875,875,875,875,875,875,,875,875,,,875,875,,986,,,986,,,986,986',
',,986,,986,875,,875,986,875,875,875,875,875,875,875,986,875,,,,986,986',
'986,986,986,986,,,,986,986,,875,,,,,986,,,986,986,986,,,986,986,983',
'983,983,983,983,983,,,,983,983,,,,983,,983,983,983,983,983,983,983,',
',,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983,983,983,983',
'983,983,983,983,983,,983,983,983,,983,983,,983,983,983,774,774,774,774',
'774,774,774,774,774,774,774,,774,774,,,774,774,,983,,,983,,,983,983',
',,983,,983,774,,774,983,774,774,774,774,774,774,774,983,774,,,,983,983',
'983,983,983,983,,,,983,983,,774,,,,,983,,,983,983,983,,,983,983,978',
'978,978,978,978,978,,,,978,978,,,,978,,978,978,978,978,978,978,978,',
',,,,978,978,978,978,978,978,978,,,978,,,,,,978,978,,978,978,978,978',
'978,978,978,978,978,,978,978,978,,978,978,,978,978,978,878,878,878,878',
'878,878,878,878,878,878,878,,878,878,,,878,878,,978,,,978,,,978,978',
',,978,,978,878,,878,978,878,878,878,878,878,878,878,978,878,,,,978,978',
'978,978,978,978,,,,978,978,,878,,,,,978,,,978,978,978,,,978,978,301',
'301,301,301,301,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,',
',,,,301,301,301,301,301,301,301,,,301,,,,,,301,301,,301,301,301,301',
'301,301,301,301,301,,301,301,301,,301,301,,301,301,301,777,777,777,777',
'777,777,777,777,777,777,777,,777,777,,,777,777,,301,,,301,,,301,301',
',,301,,301,777,,777,301,777,777,777,777,777,777,777,301,777,,,,301,301',
'301,301,301,301,,,,301,301,,777,,,,,301,,,301,301,301,,,301,301,857',
'857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857,857,857,857,',
',,,,857,857,857,857,857,857,857,,,857,,,,,,857,857,,857,857,857,857',
'857,857,857,857,857,,857,857,857,,857,857,,857,857,857,278,278,278,278',
'278,278,278,278,278,278,278,,278,278,,,278,278,,857,,,857,,,857,857',
',,857,,857,278,,278,857,278,278,278,278,278,278,278,857,278,,,,857,857',
'857,857,857,857,,,,857,857,,278,,,,,857,,,857,857,857,,,857,857,233',
'233,233,233,233,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,',
',,,,233,233,233,233,233,233,233,,839,233,839,839,839,,839,233,233,,233',
'233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233,714',
',714,714,714,,714,977,839,977,977,977,,977,,,,839,,233,,,233,470,,233',
'233,,,233,,233,,,,233,,,714,470,470,,,233,,977,,714,233,233,233,233',
'233,233,,470,,233,233,470,470,470,470,,,233,,,233,233,233,,,233,233',
'36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36',
'36,36,36,36,,841,36,841,841,841,,841,36,36,,36,36,36,36,36,36,36,36',
'36,,36,36,36,,36,36,,36,36,36,473,,,922,,922,922,922,841,922,,,,,,,473',
'473,,36,,,36,,,36,36,,,36,,36,473,,473,36,473,473,473,473,,922,473,36',
'473,,,,36,36,36,36,36,36,,,,36,36,,975,,975,975,975,36,975,,36,36,36',
',,36,36,296,296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296',
'296,296,975,,,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,,296',
'296,296,296,296,296,296,296,296,,296,296,296,,296,296,,296,296,296,484',
'484,484,484,484,484,484,484,,484,484,,,,,,484,484,,296,,,296,,,296,296',
',,296,,296,484,,484,296,484,484,484,484,484,484,484,296,484,,,,296,296',
'296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296,,,296,296,848,848',
'848,848,848,848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,',
'848,848,848,848,848,848,848,,,848,,,,,,848,848,,848,848,848,848,848',
'848,848,848,848,,848,848,848,,848,848,,848,848,848,483,483,483,483,483',
'483,483,,,483,483,,,,,,483,483,,848,,,848,,,848,848,,,848,,848,483,',
'483,848,483,483,483,483,483,483,483,848,483,,,,848,848,848,848,848,848',
',,,848,848,,,,,,,848,,,848,848,848,,,848,848,581,581,581,581,581,581',
',,,581,581,,,,581,,581,581,581,581,581,581,581,,,,,,581,581,581,581',
'581,581,581,,,581,,,,,,581,581,,581,581,581,581,581,581,581,581,581',
',581,581,581,,581,581,,581,581,581,480,480,480,480,480,480,480,,,480',
'480,,,,,,480,480,,581,,,581,,,581,581,,,581,,581,480,,480,581,480,480',
'480,480,480,480,480,581,480,,,,581,581,581,581,581,581,,,,581,581,,',
',,,,581,,,581,581,581,,,581,581,847,847,847,847,847,847,,,,847,847,',
',,847,,847,847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847',
',,847,,,,,,847,847,,847,847,847,847,847,847,847,847,847,,847,847,847',
',847,847,,847,847,847,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,847,,,847,,,847,847,,,847,,847,479,,479,847,479,479,479,479,479',
'479,479,847,479,,,,847,847,847,847,847,847,,,,847,847,,,,,,,847,,,847',
'847,847,,,847,847,750,750,750,750,750,750,,,,750,750,,,,750,,750,750',
'750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,750',
'750,,750,750,750,750,750,750,750,750,750,,750,750,750,,750,750,,750',
'750,750,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,750,,,750',
',,750,750,,,750,,750,478,,478,750,478,478,478,478,478,478,478,750,478',
',,,750,750,750,750,750,750,,,,750,750,,,,,,,750,,,750,750,750,,,750',
'750,751,751,751,751,751,751,,,,751,751,,,,751,,751,751,751,751,751,751',
'751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,751,751,,751,751,751',
'751,751,751,751,751,751,,751,751,751,,751,751,,751,751,751,477,477,477',
'477,477,477,477,,,477,477,,,,,,477,477,,751,,,751,,,751,751,,,751,,751',
'477,,477,751,477,477,477,477,477,477,477,751,477,,,,751,751,751,751',
'751,751,,,,751,751,,,,,,,751,,,751,751,751,,,751,751,326,326,326,326',
'326,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326',
'326,326,326,326,326,,,326,,,,,,326,326,,326,326,326,326,326,326,326',
'326,326,,326,326,326,,326,326,,326,326,326,476,476,476,476,476,476,476',
',,476,476,,,,,,476,476,,326,,,326,,,326,326,,,326,,326,476,,476,326',
'476,476,476,476,476,476,476,326,476,,,,326,326,326,326,326,326,,,,326',
'326,,,,,,,326,,,326,326,326,,,326,326,930,930,930,930,930,930,,,,930',
'930,,,,930,,930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930',
'930,,,930,,,,,,930,930,,930,930,930,930,930,930,930,930,930,,930,930',
'930,,930,930,,930,930,930,475,,,,,,,,,,,,,,,,475,475,,930,,,930,,,930',
'930,,,930,,930,475,,475,930,475,475,475,475,,,475,930,475,,,,930,930',
'930,930,930,930,,,,930,930,,,,,,,930,,,930,930,930,,,930,930,757,757',
'757,757,757,757,,,,757,757,,,,757,,757,757,757,757,757,757,757,,,,,',
'757,757,757,757,757,757,757,,,757,,,,,,757,757,,757,757,757,757,757',
'757,757,757,757,,757,757,757,,757,757,,757,757,757,474,,,,,,,,,,,,,',
',,474,474,,757,,,757,,,757,757,,,757,,757,474,,474,757,474,474,474,474',
',,474,757,474,,,,757,757,757,757,757,757,,,,757,757,,,,,,,757,,,757',
'757,757,,,757,757,900,900,900,900,900,900,,,,900,900,,,,900,,900,900',
'900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,900',
'900,,900,900,900,900,900,900,900,900,900,,900,900,900,,900,900,,900',
'900,900,460,460,460,460,460,460,460,460,460,460,460,,460,460,,,460,460',
',900,,,900,,,900,900,,,900,,900,460,,460,900,460,460,460,460,460,460',
'460,900,460,,,,900,900,900,900,900,900,,,,900,900,,,,,,,900,,,900,900',
'900,,,900,900,963,963,963,963,963,963,,,,963,963,,,,963,,963,963,963',
'963,963,963,963,,,,,,963,963,963,963,963,963,963,,,963,,,,,,963,963',
',963,963,963,963,963,963,963,963,963,,963,963,963,,963,963,,963,963',
'963,472,,,,,,,,,,,,,,,,472,472,,963,,,963,,,963,963,,,963,,963,472,',
'472,963,472,472,472,472,,,472,963,472,,,,963,963,963,963,963,963,,,',
'963,963,,,,,,,963,,,963,963,963,,,963,963,220,220,220,,220,,,,220,220',
',,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220',
',,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220',
'220,,220,220,220,471,471,471,471,471,471,471,,,471,471,,,,,,471,471',
',220,,,220,,,220,220,,,220,,,471,,471,220,471,471,471,471,471,471,471',
'220,471,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220',
',,220,220,738,738,738,,738,,,,738,738,,,,738,,738,738,738,738,738,738',
'738,,,,,,738,738,738,738,738,738,738,,,738,,,,,,,738,,,738,738,738,738',
'738,738,738,738,,738,738,738,,738,738,,738,738,738,461,461,461,461,461',
'461,461,461,461,461,461,,461,461,,,461,461,,738,,,738,,,738,738,,,738',
',,461,,461,738,461,461,461,461,461,461,461,738,461,,,,738,738,738,738',
'738,738,,,,738,738,,,,,,,738,,,738,738,738,,,738,738,744,744,744,,744',
',,,744,744,,,,744,,744,744,744,744,744,744,744,,,,,,744,744,744,744',
'744,744,744,,,744,,,,,,,744,,,744,744,744,744,744,744,744,744,744,744',
'744,744,,744,744,,744,744,744,468,,,,,,,,,,,,,,,,468,468,,744,,,744',
',,744,744,,,744,,744,468,744,468,744,468,468,468,468,,,,744,,,,,744',
'744,744,744,744,744,,,,744,744,,,,,,,744,,744,744,744,744,,,744,744',
'255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,',
',255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255',
'255,255,,255,255,255,,255,255,,255,255,255,469,,,,,,,,,,,,,,,,469,469',
',255,,,255,,,255,255,,,255,,,469,,469,255,469,469,469,469,,,,255,,,',
',255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255',
'766,766,766,,766,,,,766,766,,,,766,,766,766,766,766,766,766,766,,,,',
',766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766',
'766,766,,766,766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,',
'766,,,766,766,,,766,,,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766',
',,,766,766,,,,,,,766,,,766,766,766,,,766,766,768,768,768,,768,,,,768',
'768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768',
'768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,',
'768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,',
',,,768,,,,,,,,768,,,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,',
',768,768,768,,,768,768,256,256,256,,256,,,,256,256,,,,256,,256,256,256',
'256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256',
'256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,',
',,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256',
'256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,782',
'782,782,,782,,,,782,782,,,,782,,782,782,782,782,782,782,782,,,,,,782',
'782,782,782,782,782,782,,,782,,,,,,,782,,,782,782,782,782,782,782,782',
'782,,782,782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782',
',,782,782,,,782,,,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782',
'782,,,,,,,782,,,782,782,782,,,782,782,783,783,783,,783,,,,783,783,,',
',783,,783,783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,',
',783,,,,,,,783,,,783,783,783,783,783,783,783,783,,783,783,783,,783,783',
',783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,783,',
',,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783',
'783,,,783,783,784,784,784,,784,,,,784,784,,,,784,,784,784,784,784,784',
'784,784,,,,,,784,784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784',
'784,784,784,784,784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,',
',,,,,,784,,,784,,,784,784,,,784,,,,,,784,,,,,,,,784,,,,,784,784,784',
'784,784,784,,,,784,784,,,,,,,784,,,784,784,784,,,784,784,785,785,785',
',785,,,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785',
'785,785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785',
'785,785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785',
',,785,,,,,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,',
',,,785,,,785,785,785,,,785,785,787,787,787,,787,,,,787,787,,,,787,,787',
'787,787,787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,',
',787,,,787,787,787,787,787,787,787,787,,787,787,787,,787,787,,787,787',
'787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,,,787,,,,,,,,787',
',,,,787,787,787,787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787',
'787,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,,260,260,267,267,267,,267,,,,267,267,,',
',267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,',
',267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267,267,,267',
'267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,267,',
'267,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267',
',267,267,267,267,,,267,267,273,273,273,,273,,,,273,273,,,,273,,273,273',
'273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273',
',,273,273,273,273,273,273,273,273,273,273,273,273,,273,273,,273,273',
'273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,,',
',,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273,,273,273,273',
'273,,,273,273,799,799,799,,799,,,,799,799,,,,799,,799,799,799,799,799',
'799,799,,,,,,799,799,799,799,799,799,799,,,799,,,,,,,799,,,799,799,799',
'799,799,799,799,799,,799,799,799,,799,799,,,,799,,,,,,,,,,,,,,,,,,,',
'799,,,799,,,799,799,,,799,,,,,,,,,,,,,,,,,,,799,799,799,799,799,799',
',,,799,799,,,,,,,799,,,799,799,799,,,799,799,276,276,276,,276,,,,276',
'276,,,,276,,276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276',
'276,,,276,,,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276',
',276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,',
'276,,276,,276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,276',
',,,,,276,,276,276,276,276,,,276,276,32,32,32,,32,,,,32,32,,,,32,,32',
'32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32',
'32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,',
'32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32',
',,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33',
'33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33',
'33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33',
'33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33',
',33,33,33,33,,,33,33,283,283,283,,283,,,,283,283,,,,283,,283,283,283',
'283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283',
'283,283,283,283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,',
',,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283',
'283,283,283,283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,285,285,285',
',285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285',
'285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285',
'285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285',
',,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,',
',,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287,287,,,,287,,287',
'287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,',
',287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287,,287,287',
'287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,287',
',,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,,,287,287,287,,,287',
'287,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288,288,288',
',,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288,288,288',
'288,288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288',
',,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288,288,288,288',
',,,288,288,,,,,,,288,,,288,288,288,,,288,288,294,294,294,294,294,,,',
'294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294,294',
'294,294,,,294,,,,,,294,294,,294,294,294,294,294,294,294,294,294,,294',
'294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294',
',,294,,294,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294',
',,,,,,294,,,294,294,294,,,294,294,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,845,845',
'845,,845,,,,845,845,,,,845,,845,845,845,845,845,845,845,,,,,,845,845',
'845,845,845,845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845',
',845,845,845,,845,845,,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845',
'845,,,845,,,,,,845,,,,,,,,845,,,,,845,845,845,845,845,845,,,,845,845',
',,,,,,845,,,845,845,845,,,845,845,300,300,300,,300,,,,300,300,,,,300',
',300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300',
',,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300,,300,300,,',
',300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,,,,,,,,,,,,,',
'300,300,300,300,300,300,,,,300,300,,,,300,,,300,,,300,300,300,,,300',
'300,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858,858,858',
',,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858,858,858',
'858,858,858,,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858',
',,858,,,858,858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858,858,858,858',
',,,858,858,,,,,,,858,,,858,858,858,,,858,858,876,876,876,,876,,,,876',
'876,,,,876,,876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876',
'876,,,876,,,,,,,876,,,876,876,876,876,876,876,876,876,876,876,876,876',
',876,876,,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876,',
',,876,,876,,,,,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876',
',876,876,876,876,,,876,876,877,877,877,,877,,,,877,877,,,,877,,877,877',
'877,877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877',
',,877,877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877',
',,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,',
',877,877,877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,,,877,877',
'892,892,892,,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,',
',892,892,892,892,892,892,892,,,892,,,,,,,892,,,892,892,892,892,892,892',
'892,892,,892,892,892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,,892,,,892,,',
'892,892,,,892,,,,,,,,,,,,,,,,,,,892,892,892,892,892,892,,,,892,892,',
',,,,,892,,,892,892,892,,,892,892,904,904,904,,904,,,,904,904,,,,904',
',904,904,904,904,904,904,904,,,,,,904,904,904,904,904,904,904,,,904',
',,,,,,904,,,904,904,904,904,904,904,904,904,,904,904,904,,904,904,,',
',904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,,,,,,,,,,,,,,,,,',
'904,904,904,904,904,904,,,,904,904,,,,,,,904,,,904,904,904,,,904,904',
'45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45',
'45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45',
'45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45',
'45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,317,317,317,,317',
',,,317,317,,,,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317',
'317,317,317,,,317,,,,,,,317,,,317,317,317,317,317,317,317,317,,317,317',
'317,,317,317,,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,',
',,,,,,,,,,,,,,,317,317,317,317,317,317,,,,317,317,,,,,,,317,,,317,317',
'317,,,317,317,929,929,929,,929,,,,929,929,,,,929,,929,929,929,929,929',
'929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,,929,,,929,929,929',
'929,929,929,929,929,,929,929,929,,929,929,,929,929,929,,,,,,,,,,,,,',
',,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929,929,929',
'929,929,929,,,,929,929,,,,,,,929,,,929,929,929,,,929,929,46,46,46,,46',
',,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46',
',,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,',
',,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46',
'46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,',
'47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47',
'47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47',
',,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,',
',,,,,47,,,47,47,47,,,47,47,325,325,325,,325,,,,325,325,,,,325,,325,325',
'325,325,325,325,325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,,325',
',,325,325,325,325,325,325,325,325,,325,325,325,,325,325,,325,325,325',
',,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325,,,325,,,,,,325,,,,,,,,325',
',,,,325,325,325,325,325,325,,,,325,325,,,,,,,325,,,325,325,325,,,325',
'325,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61',
'61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61',
',61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61',
',,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,,61,61,1004,1004',
'1004,,1004,,,,1004,1004,,,,1004,,1004,1004,1004,1004,1004,1004,1004',
',,,,,1004,1004,1004,1004,1004,1004,1004,,,1004,,,,,,,1004,,,1004,1004',
'1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,,1004,1004,,1004,1004',
'1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004,,1004,,1004,',
'1004,,,,,,,,1004,,,,,1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,',
',,1004,,1004,1004,1004,1004,,,1004,1004,344,344,344,,344,,,,344,344',
',,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344,344',
',,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,,344',
'344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344',
',,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344',
'344,,,344,344,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345',
'345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345',
'345,345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,',
',,,,,,345,,,345,,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345',
'345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,62,62,62,,62',
',,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62',
',,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,',
',,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62',
'62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,63,63,63,,63,,,,63,63',
',,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63',
',,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,',
',,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,',
',,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66,,,,66,66,,,,66,,66',
'66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66',
'66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66',
',,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,',
'66,,,66,66,66,,,66,66,357,357,357,,357,,,,357,357,,,,357,,357,357,357',
'357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357',
'357,357,357,357,357,357,357,,357,357,357,,357,357,,,,357,,,,,,,,,,,',
',,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,357,357,357,357',
'357,357,,,,357,357,,,,,,,357,,,357,357,357,,,357,357,359,359,359,,359',
',,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359',
'359,359,359,,,359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359',
'359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,,',
',,,,,,,,,,,,,,,359,359,359,359,359,359,,,,359,359,,,,,,,359,,,359,359',
'359,,,359,359,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,',
',67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67',
'67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67',
'70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70',
'70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70',
'70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70',
'70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71',
',,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71',
',,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,',
',,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71',
',,,71,71,,,,,,,71,,,71,71,71,,,71,71,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8',
'8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8',
'8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,417,417,417,,417,,,,417,417,,,',
'417,,417,417,417,417,417,417,417,,,,,,417,417,417,417,417,417,417,,',
'417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417,417,417,,417,417',
',417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,,,,,417,',
',,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,,,,,,,417,,,417,417',
'417,,,417,417,455,455,455,,455,,,,455,455,,,,455,,455,455,455,455,455',
'455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455',
'455,455,455,455,455,455,455,455,455,,455,455,,455,455,455,,,,,,,,,,',
',,,,,,,,,455,,,455,,,455,455,,,455,,455,,455,,455,,,,,,,,455,,,,,455',
'455,455,455,455,455,,,,455,455,,,,,,,455,,455,455,455,455,,,455,455',
'457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457,457,,,,',
',457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457',
'457,457,,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,',
'457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457,457,457,457,457,457',
',,,457,457,,,,,,,457,,,457,457,457,,,457,457,458,458,458,,458,,,,458',
'458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458,458,458,458,458',
'458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458,,458,458,458,',
'458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,',
',,,458,,,,,,,,458,,,,,458,458,458,458,458,458,,,,458,458,,,,,,,458,',
',458,458,458,,,458,458,459,459,459,,459,,,,459,459,,,,459,,459,459,459',
'459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459,,,459',
'459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459,,,,,',
',,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,,,459',
'459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459,114',
'114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,',
'114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,',
',,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114',
'114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,',
',,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120',
'120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,',
',120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120',
',,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120',
'120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121',
',,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121',
',,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,',
',122,122,122,,,122,122,500,500,500,,500,,,,500,500,,,,500,,500,500,500',
'500,500,500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500',
'500,500,500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,,',
',,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,500,,500,,500,,,,,,,,500',
',,,,500,500,500,500,500,500,,,,500,500,,,,,,,500,,500,500,500,500,,',
'500,500,503,503,503,,503,,,,503,503,,,,503,,503,503,503,503,503,503',
'503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503,503',
'503,503,503,503,503,503,503,503,,503,503,,503,503,503,,,,,,,,,,,,,,',
',,,,,503,,,503,,,503,503,,,503,,,,503,,503,,,,,,,,503,,,,,503,503,503',
'503,503,503,,,,503,503,,,,,,,503,,503,503,503,503,,,503,503,505,505',
'505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505,505',
'505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505,505,505,505,505',
',505,505,505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505',
'505,,,505,,,,,,505,,,,,,,,505,,,,,505,505,505,505,505,505,,,,505,505',
',,,,,,505,,,505,505,505,,,505,505,510,510,510,510,510,,,,510,510,,,',
'510,,510,510,510,510,510,510,510,,,,,,510,510,510,510,510,510,510,,',
'510,,,,,,510,510,,510,510,510,510,510,510,510,510,510,,510,510,510,',
'510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510,,,510,,510',
',,,510,,,,,,,,510,,,,,510,510,510,510,510,510,,,,510,510,,,,,,510,510',
',,510,510,510,,,510,510,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,517,517,517,,517,,,,517,517,,,,517,,517,517,517,517,517,517',
'517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517',
'517,517,517,517,,517,517,517,,517,517,,,,517,,,,,,,,,,,,,,,,,,,,517',
',,517,,,517,517,,,517,,,,,,,,,,,,,,,,,,,517,517,517,517,517,517,,,,517',
'517,,,,,,,517,,,517,517,517,,,517,517,23,23,23,,23,,,,23,23,,,,23,,23',
'23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23',
'23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23',
',,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,',
'23,,,23,23,23,,,23,23,519,519,519,,519,,,,519,519,,,,519,,519,519,519',
'519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519,,,519',
'519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519,519,,',
',,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,519,,519,,519,,,,,,,,519',
',,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519,519,,',
'519,519,525,525,525,,525,,,,525,525,,,,525,,525,525,525,525,525,525',
'525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525,525',
'525,525,525,525,,525,525,525,,525,525,,,,525,,,,,,,,,,,,,,,,,,,,525',
',,525,,,525,525,,,525,,,,,,,,,,,,,,,,,,,525,525,525,525,525,525,,,,525',
'525,,,,,,,525,,,525,525,525,,,525,525,210,210,210,,210,,,,210,210,,',
',210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,',
',210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210',
',210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210',
',,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210',
'210,,,210,210,528,528,528,,528,,,,528,528,,,,528,,528,528,528,528,528',
'528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528',
'528,528,528,528,528,,528,528,528,,528,528,,528,528,528,,,,,,,,,,,,,',
',,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528,,,,,528,528,528',
'528,528,528,,,,528,528,,,,,,,528,,,528,528,528,,,528,528,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529',
'529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529',
',,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529,529,,,',
',,,529,,,529,529,529,,,529,529,533,533,533,,533,,,,533,533,,,,533,,533',
'533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,',
',533,,,533,533,533,533,533,533,533,533,,533,533,533,,533,533,,533,533',
'533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,533',
',,,,533,533,533,533,533,533,,,,533,533,,,,,,,533,,,533,533,533,,,533',
'533,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211',
',,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212,,212,,,,212',
'212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,212,212',
',212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,',
'212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,',
',,212,,212,212,212,212,,,212,212,539,539,539,,539,,,,539,539,,,,539',
',539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539',
',,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539,539',
',539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,539,,,,539',
',,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539,539',
'539,539,,,539,539,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542',
'542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,,542,542,542,,,,,,',
',,,,,,,,,,,,,542,,,542,,,542,542,,,542,,,,,,542,,,,,,,,542,,,,,542,542',
'542,542,542,542,,,,542,542,,,,,,,542,,542,542,542,542,,,542,542,216',
'216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216',
'216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216',
'216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216',
',,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216',
'216,,,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217,217,,',
',217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,',
',217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217',
',217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217',
',,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217',
'217,,,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218',
'218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218',
'218,218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,',
',,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218',
'218,218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219,219,219',
',219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219',
'219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219',
'219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219',
',,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,',
',,,219,,,219,219,219,,,219,219,566,566,566,,566,,,,566,566,,,,566,,566',
'566,566,566,566,566,566,,,,,,566,566,566,566,566,566,566,,,566,,,,,',
',566,,,566,566,566,566,566,566,566,566,,566,566,566,,566,566,,566,566',
'566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566,,,,,,,,566',
',,,,566,566,566,566,566,566,,,,566,566,,,,,,,566,,,566,566,566,,,566',
'566,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221',
'221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221',
',,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221',
',,,221,221,221,,,,,,221,,,221,221,221,,,221,221,587,587,587,,587,,,',
'587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587',
'587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,587',
'587,,587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587',
',587,,587,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,',
',,,587,,587,587,587,587,,,587,587,599,599,599,,599,,,,599,599,,,,599',
',599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599',
',,,,,,599,,,599,599,599,599,599,599,599,599,,599,599,599,,599,599,,599',
'599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599,,,,,,599,,,,,,',
',599,,,,,599,599,599,599,599,599,,,,599,599,,,,,,,599,,,599,599,599',
',,599,599,603,603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603',
'603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603',
'603,603,603,603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,',
',,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603',
'603,603,,,,603,603,,,,,,,603,,,603,603,603,,,603,603,232,232,232,,232',
',,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232',
',,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,232,232,,,232,232,632,632,632,,632,,,,632,632,,,,632,,632,632',
'632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632',
',,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632,632,632',
',,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,632,,,,632,,,,,,,,632',
',,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632,,,632',
'632,633,633,633,,633,,,,633,633,,,,633,,633,633,633,633,633,633,633',
',,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633',
'633,633,633,,633,633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633',
',,633,,,633,633,,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,633,633',
',,,633,633,,,,,,,633,,,633,633,633,,,633,633,636,636,636,,636,,,,636',
'636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636',
'636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,636,636,636,636',
',636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,',
'636,,636,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,',
',,636,,636,636,636,636,,,636,636,637,637,637,,637,,,,637,637,,,,637',
',637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637',
',,,,,,637,,,637,637,637,637,637,637,637,637,637,637,637,637,,637,637',
',637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,637,,637',
',,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,637,637',
'637,637,,,637,637,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638',
'638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638',
'638,638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,',
',,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638',
'638,638,638,638,,,,638,638,,,,,,,638,,,638,638,638,,,638,638,639,639',
'639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639',
'639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639',
',639,639,639,,639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639',
'639,,,639,,,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639',
',,,,,,639,,,639,639,639,,,639,639,235,235,235,,235,,,,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235',
'235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,',
',235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235',
',,235,235,644,644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644',
'644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644',
'644,644,644,644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,',
',,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644',
'644,644,,,,644,644,,,,,,,644,,,644,644,644,,,644,644,645,645,645,,645',
',,,645,645,,,,645,,645,645,645,645,645,645,645,,,,,,645,645,645,645',
'645,645,645,,,645,,,,,,,645,,,645,645,645,645,645,645,645,645,,645,645',
'645,,645,645,,645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645',
',,,,,645,,,,,,,,645,,,,,645,645,645,645,645,645,,,,645,645,,,,,,,645',
',,645,645,645,,,645,645,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
'648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,',
',648,648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648',
'648,648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,',
'648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648',
',,,648,648,,,,,,,648,,,648,648,648,,,648,648,649,649,649,,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,',
',649,649,649,,,649,649,237,237,237,,237,,,,237,237,,,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237',
'237,237,237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,',
',,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237',
'237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237,237,,,237,237,238',
'238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238',
',,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238',
'238,,,,,,,238,,,238,238,238,,,238,238,239,239,239,,239,,,,239,239,,',
',239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,',
',239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239',
',239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,',
',,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239',
'239,,,239,239,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,',
',,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,240,240,,,,240,240,,,,,,,240,,,240,240,240,,,240,240,241,241,241',
',241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241',
'241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241',
'241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241',
',,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,',
',,,241,,,241,241,241,,,241,241,673,673,673,,673,,,,673,673,,,,673,,673',
'673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,',
',673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,,673,673',
'673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673',
',,,,673,673,673,673,673,673,,,,673,673,,,,,,,673,,,673,673,673,,,673',
'673,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678',
',,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,,678,678,678,,678,678,,,,678,,,,,,,,,,,,,,,,,,,,678,,,678',
',,678,678,,,678,,,,,,,,,,,,,,,,,,,678,678,678,678,678,678,,,,678,678',
',,,,,,678,,,678,678,678,,,678,678,242,242,242,,242,,,,242,242,,,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242',
',,242,242,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243',
'243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243',
'243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,',
',,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243',
'243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243,244,244,244,,244',
',,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244',
',,244,244,244,,,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245',
'245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245',
',,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245',
',,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,',
',245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245,245',
'246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,',
',246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246',
'246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,',
'246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246',
',,,246,246,,,,,,,246,,,246,246,246,,,246,246,689,689,689,,689,,,,689',
'689,,,,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689',
'689,,,689,,,,,,,689,,,689,689,689,689,689,689,689,689,,689,689,689,',
'689,689,,,,689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,,689,,,,,,,,',
',,,,,,,,,,689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,689,689',
',,689,689,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247',
'247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247',
'247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,',
',,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247',
'247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248',
',,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248',
',,248,248,248,,,248,248,694,694,694,,694,,,,694,694,,,,694,,694,694',
'694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694',
',,694,694,694,694,694,694,694,694,,694,694,694,,694,694,,694,694,694',
',,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,694,,,,694,,,,,,,,694',
',,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694,,,694',
'694,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,,249,249,712,712,712,,712,,,,712',
'712,,,,712,,712,712,712,712,712,712,712,,,,,,712,712,712,712,712,712',
'712,,,712,,,,,,,712,,,712,712,712,712,712,712,712,712,,712,712,712,',
'712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,',
',,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712,712,,,,,,,712,',
',712,712,712,,,712,712,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251',
'251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251',
',,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251',
'251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
',252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,',
',,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252',
'252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,',
',,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253',
'253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,732,732,732',
',732,,,,732,732,,,,732,,732,732,732,732,732,732,732,,,,,,732,732,732',
'732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732,732,732,732,,732',
'732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732',
',,732,,732,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732,,,,732,732',
',,,,,,732,,,732,732,732,,,732,732,254,254,254,,254,,,,254,254,,,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254',
'59,,254,254,,,,59,59,59,,,59,59,59,989,59,989,989,989,989,989,,,,,59',
'59,59,,,989,,,,,59,59,,59,59,59,59,59,,,,,,,,,,989,,,,,,,,,989,989,989',
'989,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59',
',,59,59,,59,989,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59',
'59,59,59,439,59,,59,,,,439,439,439,,,439,439,439,991,439,991,991,991',
'991,991,,,,439,439,439,439,,,991,,,,,439,439,,439,439,439,439,439,,',
',,,,,,,991,,,,,,,,,,,991,991,,439,439,439,439,439,439,439,439,439,439',
'439,439,439,439,,,439,439,439,,,439,,,439,,,439,439,,439,991,439,,439',
',439,439,439,439,439,439,439,,439,439,439,,,,,,,,,,,,,439,439,439,439',
'438,439,,439,,,,438,438,438,,,438,438,438,916,438,916,916,916,916,916',
',,,438,438,438,438,,,916,,,,,438,438,,438,438,438,438,438,,,,,,,,,,916',
',,,,,,,,,,916,916,,438,438,438,438,438,438,438,438,438,438,438,438,438',
'438,,,438,438,438,,,438,,,438,,,438,438,,438,916,438,,438,,438,438,438',
'438,438,438,438,,438,438,438,,,,,,,,,,,,,438,438,438,438,,438,,438,754',
'754,754,754,754,754,754,754,754,754,754,754,754,754,754,754,754,754',
'754,754,754,754,754,754,,,,754,754,754,754,754,754,754,754,754,754,',
',,,,754,754,754,754,754,754,754,754,754,,,754,,,,,,,,,754,754,,754,754',
'754,754,754,754,754,,,754,754,,,,754,754,754,754,,,,,,,,,,,,,,754,754',
',754,754,754,754,754,754,754,754,754,754,754,,,754,,,,,,,,,,,,,,,,,',
',,754,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,,,,408,408,408,408,408,408,408,408,408',
'408,,,,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408,408,',
'408,408,408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,',
',,408,408,,408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,',
',,,,,,408,,,,,,,,,408,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74',
'74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74',
',,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74',
'74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12',
'12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12',
'12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91',
'91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91',
'91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,629,629,629,629,629',
'629,629,629,629,629,629,629,629,629,629,629,629,629,629,629,629,629',
'629,629,,,,629,629,629,629,629,629,629,629,629,629,,,,,,629,629,629',
'629,629,629,629,629,629,,,629,,,,,,,,,629,629,,629,629,629,629,629,629',
'629,,,629,629,,,,629,629,629,629,,,,,,,,,,,,,,629,629,,629,629,629,629',
'629,629,629,629,629,629,629,,,629,629,,,,,,,,,,629,,,,,,,,,629,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,',
',11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11',
',,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,',
',,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,487,,,,,,11,487',
'487,487,,,487,487,487,11,487,,,,,,,,,487,487,,,,,,,,,,487,487,,487,487',
'487,487,487,,,914,,914,914,914,914,914,,,,,,,,,,914,,,,,31,,,,,,,31',
'31,31,,487,31,31,31,,31,914,487,,,,,487,487,,31,31,914,914,,,,,,,31',
'31,,31,31,31,31,31,,487,487,,,,,,,,,,,,,487,,,914,,487,,,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31',
',31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,429,31,31,,31,,31,429,429',
'429,,,429,429,429,912,429,912,912,912,912,912,,,,429,429,429,,,,912',
',,,,429,429,,429,429,429,429,429,,,,,,,,,,912,,,,,,,,,,,912,912,,429',
'429,429,429,429,429,429,429,429,429,429,429,429,429,,,429,429,429,,',
'429,,429,429,,,429,429,,429,912,429,,429,,429,429,429,429,429,429,429',
',429,429,429,,,,,,,,,,,,30,429,429,,429,,429,30,30,30,,,30,30,30,601',
'30,601,601,601,601,601,,,,30,30,30,,,,601,,,,,30,30,,30,30,30,30,30',
',,,,,,,,,601,601,,,,,,,,601,601,601,601,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,601,30,,30,,30,30',
'30,30,30,30,30,,30,30,30,,,,,,589,589,,,589,,,30,30,,30,,30,589,589',
',589,589,589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,',
',,,,,,589,589,,589,589,589,589,589,589,589,589,589,589,589,,,589,,,',
',263,263,,,263,,,,,,,,,263,263,589,263,263,263,263,263,263,263,,,263',
'263,,,,263,263,263,263,,,,,,,,,,,,,,263,263,,263,263,263,263,263,263',
'263,263,263,263,263,,,263,,,,,956,956,,,956,,,,,,,,,956,956,263,956',
'956,956,956,956,956,956,,,956,956,,,,956,956,956,956,,,,,,956,,,,,,',
',956,956,,956,956,956,956,956,956,956,956,956,956,956,,910,956,910,910',
'910,910,910,,,,,,,,,,910,,,,,956,,,,710,,710,710,710,710,710,,,,,,,910',
'520,520,710,,520,,,,910,910,910,910,,520,520,,520,520,520,520,520,520',
'520,,710,520,520,,,,520,520,520,520,,710,710,,,520,,,,,910,,,520,520',
',520,520,520,520,520,520,520,520,520,520,520,,1039,520,1039,1039,1039',
'1039,1039,710,,453,453,,,453,,,1039,,,,,520,453,453,,453,453,453,453',
'453,453,453,,,453,453,,,1039,453,453,453,453,,,,,,453,1039,1039,,,,',
',453,453,,453,453,453,453,453,453,453,453,453,453,453,,,453,,,,,454',
'454,,,454,,1039,,,,,,,454,454,453,454,454,454,454,454,454,454,,,454',
'454,,,,454,454,454,454,,,,,,454,,,,,,,,454,454,,454,454,454,454,454',
'454,454,454,454,454,454,,,454,,,,,1006,1006,,,1006,,,,,,,,,1006,1006',
'454,1006,1006,1006,1006,1006,1006,1006,,,1006,1006,,,,1006,1006,1006',
'1006,,,,,,1006,,,,,,,,1006,1006,,1006,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,1006,,660,1006,660,660,660,660,660,,,,,,,,,,660,,,,,1006',
',,,,,,,,1008,,1008,1008,1008,1008,1008,,660,214,214,,,214,,,1008,660',
'660,660,660,,214,214,,214,214,214,214,214,214,214,,,214,214,,,1008,214',
'214,214,214,,,660,,,214,1008,1008,,,660,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,547,214,547,547,547,547,547,,,,,,1008,,,,547',
',,,939,214,939,939,939,939,939,,,,,,,,,,939,,547,,,,,,,,,547,547,547',
'547,,,,,,,,939,939,213,213,,,213,,,939,939,939,939,,,213,213,,213,213',
'213,213,213,213,213,547,,213,213,,,,213,213,213,213,,,,,,213,,,,939',
',,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,708,213,708',
'708,708,708,708,,,,,,,,,,708,,,,,213,,,,,,,,,993,,993,993,993,993,993',
',708,742,742,,,742,,,993,708,708,708,708,,742,742,,742,742,742,742,742',
'742,742,,,742,742,,,993,742,742,742,742,,,,,,742,993,993,,,708,,,742',
'742,,742,742,742,742,742,742,742,742,742,742,742,,,742,,,,,743,743,',
',743,,993,,,,,,,743,743,742,743,743,743,743,743,743,743,,,743,743,,',
',743,743,743,743,,,,,,743,,,,,,,,743,743,,743,743,743,743,743,743,743',
'743,743,743,743,,,743,,,,,531,531,,,531,,,,,,,,,531,531,743,531,531',
'531,531,531,531,531,,,531,531,,,,531,531,531,531,,,,,,531,,,,,,,,531',
'531,,531,531,531,531,531,531,531,531,531,531,531,,,531,,,,,530,530,',
',530,,,,,,,,,530,530,531,530,530,530,530,530,530,530,,,530,530,,,,530',
'530,530,530,,,,,,530,,,,,,,,530,530,,530,530,530,530,530,530,530,530',
'530,530,530,,706,530,706,706,706,706,706,,,,,,,,,,706,,,,,530,,,,887',
',887,887,887,887,887,,,,,,,706,521,521,887,,521,,,,706,706,706,706,',
'521,521,,521,521,521,521,521,521,521,,887,521,521,,,,521,521,521,521',
',887,887,,,521,,,,,706,,,521,521,,521,521,521,521,521,521,521,521,521',
'521,521,,885,521,885,885,885,885,885,887,882,,882,882,882,882,882,,885',
',,,,521,,995,882,995,995,995,995,995,,,,,,,,,885,995,,,,,,,882,885,885',
'885,885,,,,,882,882,882,882,,,995,,,,,,,,,,,995,995,,,,,,,,,,885,,,',
',,,,882,,,588,588,,,588,,,,,,,,995,588,588,,588,588,588,588,588,588',
'588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588',
'588,588,588,588,588,588,588,588,,,588,,,,,1005,1005,,,1005,,,,,,,,,1005',
'1005,588,1005,1005,1005,1005,1005,1005,1005,,,1005,1005,,,,1005,1005',
'1005,1005,,,,,,1005,,,,,,,,1005,1005,,1005,1005,1005,1005,1005,1005',
'1005,1005,1005,1005,1005,,,1005,,,,,,,,,,,,,,,,,,,,1005' ]
        racc_action_check = arr = ::Array.new(26190, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1348,  1623,    47,   nil,    48,   nil,   nil, 12706,  1341,
   nil, 24254, 23855,   -55,   nil,   -12,    60,   962,   431,    34,
   732,   nil,   -78, 15086,  1905,   161,   nil,   484,   nil,     2,
 24690, 24440,  7806,  7946,  8226,   nil,  3315,  8926,  9066,   nil,
    88,   296,   270,   168,   238, 10186, 10606, 10746,   121,  1131,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23064,
   nil, 11026, 11586, 11726,   -14,   nil, 11866, 12286,   nil,   nil,
 12426, 12566,   177,   nil, 23722,   nil,   nil,   nil,   nil,   nil,
   -98,   nil,   nil,   nil,   nil,   nil,   nil,   155,   191,   211,
   241, 23988,   nil,   nil,   nil,   nil,   nil,   nil,   644,   nil,
   nil,   512,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 13546,   nil,   nil,   nil,   nil, 13686,
 13826, 13966, 14106, 14806,   261,   nil,   248,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   275,   nil,  1905,
 15506, 16066, 16206, 25425, 25303,   nil, 16626, 16766, 16906, 17046,
  5006, 17326,   nil,   nil,   918,   -42,   -54,   363,   140,   291,
   375,   nil, 17886,  3174,   376, 18866, 19286, 19706, 19846, 19986,
 20126, 20266, 20686, 20826, 20966, 21106, 21246, 21526, 21666, 21946,
 22226, 22366, 22506, 22646, 22926,  5426,  5846,  6686,  6826,  6966,
  7106,   nil,   nil, 24826,   nil,   nil,   373,  7246,   nil,   382,
   nil,   nil,   nil,  7386,   nil,   nil,  7666,   nil,  3033,   nil,
   351,   353,   nil,  8086,   402,  8366,   nil,  8506,  8646,   nil,
   nil,   264,   nil,  1326,  8786,   374,  3456,   411,   470,   447,
  9346,  2892,   652,   682,   780,   543,   921,   nil,   512,   478,
   -19,   nil,   nil,   nil,   518,   204,   483, 10326,   nil,   430,
   547,   990,   nil,   555,   nil, 10886,  4302,   509,   nil,   533,
   nil,   421,   272,   538,   542,   nil,   191,   573,   nil,   nil,
   575,   613,    18,   -11, 11306, 11446,   244,   647,   536,    40,
    30,  1244,   622,    26,   655,   nil,   nil, 12006,   nil, 12146,
   485,   618,   198,   581,   604,   615,   287,   346,   549,   nil,
   486,   nil,   nil,   nil,   nil,   nil,   229,   nil,   445,   nil,
   413,   nil,   584,   435,   nil,   587,   123,   nil,   602,   -26,
   nil,   611,   -58,   nil,   380,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2187, 23589,   nil,
   nil,   nil,   nil,   623,   nil,   nil,   615, 12846,   625,   nil,
   nil,  1059,   630,   nil,   nil,   630,   632,   506,   436, 24565,
   nil,   nil,   nil,   255,     0,   676,   nil,   nil, 23324, 23194,
   nil,  2187,   nil,   632,   nil,   nil,   777,   nil,   nil,   nil,
   nil,   153,   nil, 25066, 25134, 12986,    93, 13126, 13266, 13406,
  4725,  5146,   244,   310,   717,   718,   722,   723,  5286,  5426,
  3197,  5006,  4866,  3315,  4584,  4443,  4302,  4161,  4020,  3879,
  3738,   659,   -43,  3597,  3456,  1482,   109, 24373,   nil,   nil,
   nil,   nil,   nil,   nil,   150,   -56,   665,   667,   nil,   nil,
 14246,   nil,   nil, 14386,   nil, 14526,   nil,   nil,   nil,   nil,
 14666,   762,   690,   694,   nil,   nil,   704, 14946,   711, 15226,
 24995, 25831,   584,   750,   nil, 15366,   730,   nil, 15646, 15786,
 25730, 25662,  1200, 15926,   857,   859,   746,   nil,   nil, 16346,
   nil,   nil, 16486,   nil,   nil,   nil,    21, 25365,   nil,   748,
   760,   nil,   761,   770,   771,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   763,   644,   nil,   nil, 17186,   nil,   nil,   nil,
   857,   nil,   nil,   nil,   859,   nil,   nil,   860,  1341,   903,
   nil,  3738,    55,   147,   900,   916,   nil, 17466, 25987, 24758,
    28,   nil,   196,   224,   -23,   nil,  1200,   nil,     9, 17606,
   nil, 24654,   nil, 17746,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,   118,   nil,
   nil,   nil,   796,   nil,   nil,   800,   nil,   818,   nil, 24121,
   nil,   803, 18026, 18166,   128,   847, 18306, 18446, 18586, 18726,
   847,   nil,   nil,   nil, 19006, 19146,   848,   nil, 19426, 19566,
   nil,   119,   -52,   380,   125,   820,   918,   826,   nil,   nil,
 25264,   nil,   nil,   928,   -10,   132,   nil,   nil,   nil,   nil,
   828,   nil,   870, 20406,   nil,   nil,  1467,   -83, 20546,   830,
   nil,   834,   146,   151,   874,   349,   777,   884,   849, 21386,
  2328,   914,   -16,   986, 21806,   nil,   nil,   158,   nil,   777,
  2046,   879,   335,   nil,   nil,   536, 25792,   nil, 25487,   nil,
 24981,   nil, 22086,   nil,  3190,   nil,   879,   476,   883,   nil,
   nil,   nil,   nil,   561,   nil,   999,   nil,   nil,   nil,   nil,
  1009,   nil, 22786,   904,    27,    62,    31,    -1,  5146,   nil,
   849,   nil, 25526, 25594,  5286,   nil,   nil,   nil,  -109,   610,
  4020,  4161,   443,   311, 23456,    59,   760,  4584,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   902,  5566,  1341,  5706,   nil,
   912,   nil,  1623,   nil,  2610,   nil,   nil,  2892,   nil,  1764,
   nil,  2046,  5986,  6126,  6266,  6406,   225,  6546,   915,   917,
   nil,   920,   922,   923,   nil,   948,   940,   936,   929,  7526,
   nil,   nil,   918,   nil,   nil,   nil,  1059,  1200,   nil,   nil,
   943,   291,   nil,   nil,  1065,   nil,  1764,   954,   997,   nil,
   nil,   nil,   973,  1078,   969,   967,   nil,   nil,   nil,   969,
   970,   nil,   971,   972,   nil,   976,   nil,   nil,   989,  3160,
   990,  3301,   nil,  1113,   nil,  9206,  1132,  3879,  3597,   nil,
    17,    42,    56,   225,   813,   nil,  1020,  3033,  9486,   nil,
   284,  1140,  1141,  1028,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1046,  1042,   nil,  2469,  9626,  9766,  2751,   344,
   nil,   nil, 25901,   nil,   nil, 25893,   nil, 25817,   nil,   nil,
  1063,   637,  9906,   954,  1127,  1176,  1482,  1074,  1181,   nil,
  4725,   nil,   nil,    19, 10046,   nil,   nil,   nil,   nil,   nil,
 24956,   nil, 24529,   nil, 24368,   nil, 23288,   nil,   nil,   nil,
   nil,   375,  3334,  1063,   nil,    32,   nil,  1184,  1189, 10466,
  4443,   nil,   nil,  1198,   315,   nil,   nil,   nil,   nil, 25385,
   nil,  1079,   nil,   nil,  1083,  1084,  1085,  1095,   nil,  1097,
   nil,    85,   nil,   nil,   nil,  1059, 24894,   nil,   nil,  1114,
   nil,   nil,   nil,  4866,  1062,  1095,  1103,  1173,   516,   nil,
  1107,  1113,  1117,  1127,  1131,  3391,  1134,  3197,  2751,   nil,
   nil,   nil,   339,  2610,   nil,   nil,  2469,  2328,   nil, 23028,
   nil, 23158,   nil, 25517,   nil, 25916,   nil,   nil,   nil,  1186,
  1192,  1197,   nil,  1283, 11166, 26055, 25202,  1203, 25294,   nil,
   nil,   nil,   nil,   651,  1162,   501,   nil,   nil,   nil,  1286,
  1291,  1303,  1184,  1194,  1199,  1202,   nil,   nil,  1207,    -9,
    -8,    46,  1236,  1205,  1210,   nil,   nil,   nil,   nil, 25057,
   nil,   nil,   nil,   nil,    -7,   nil,   -91,   nil ]

racc_action_default = [
    -1,  -622,  -621,  -622,    -2,  -608,    -4,    -5,  -622,    -8,
    -9,  -622,  -622,  -622,   -29,  -622,  -622,  -622,  -280,  -622,
   -40,   -43,  -610,  -622,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -621,   -73,   -81,   -83,
  -622,  -514,  -515,  -622,  -622,  -622,  -622,  -622,  -610,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -597,
  -282,  -610,  -621,  -621,  -300,  -403,  -622,  -622,  -305,  -308,
  -608,  -622,  -316,  -323,  -622,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -621,  -453,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,  -490,  -496,  -498,  -499,  -500,  -501,  -595,  -503,
  -504,  -596,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1048,    -3,  -609,  -617,  -618,  -619,    -7,  -622,
  -622,  -622,  -622,  -622,  -622,   -17,  -622,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -621,
  -622,  -622,  -621,  -622,  -622,  -607,  -622,  -622,  -622,  -622,
  -622,  -610,  -611,   -47,  -622,  -514,  -515,  -622,  -280,  -622,
  -622,  -230,  -622,  -621,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -409,  -412,  -622,  -605,  -606,   -58,  -622,  -299,  -622,
  -426,  -429,   -64,  -621,  -423,   -65,  -610,   -66,  -239,  -252,
  -621,  -621,  -256,  -622,  -262,  -622,  -590,  -622,  -622,   -67,
   -68,  -608,   -13,   -14,  -622,   -71,  -621,  -610,  -622,   -74,
   -77,  -621,   -89,   -90,  -622,  -622,   -97,  -292,  -295,  -610,
  -416,  -331,  -332,  -335,  -424,  -622,   -79,  -622,   -85,  -289,
  -497,  -622,  -215,  -216,  -231,  -622,  -621,  -285,  -284,  -622,
  -240,  -614,  -614,  -622,  -622,  -588,  -614,  -622,  -301,  -302,
  -546,   -49,  -622,  -622,  -622,  -622,  -608,  -622,  -609,  -514,
  -515,  -622,  -622,  -280,  -622,  -356,  -357,  -622,  -319,  -622,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -326,
  -622,  -514,  -515,  -585,  -586,  -451,  -622,  -474,  -622,  -476,
  -622,  -478,  -622,  -622,  -458,  -622,  -622,  -464,  -622,  -622,
  -470,  -622,  -622,  -472,  -622,  -489,  -491,  -492,  -493,  -494,
    -6,  -620,   -23,   -24,   -25,   -26,   -27,  -621,  -622,   -19,
   -20,   -21,  -122,  -622,   -30,   -39,  -267,  -622,  -622,  -266,
   -31,  -197,  -610,  -247,  -248,  -621,  -621,  -598,  -599,  -257,
  -421,  -600,  -601,  -599,  -598,  -257,  -420,  -422,  -600,  -601,
   -37,  -205,   -38,  -622,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -610,  -298,  -622,  -622,  -621,  -289,  -622,  -622,  -622,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -610,  -621,  -257,  -598,  -599,
   -54,   -59,  -258,  -417,  -621,  -621,  -610,  -610,  -294,  -253,
  -622,  -261,  -254,  -622,  -259,  -622,  -263,  -593,  -594,   -12,
  -609,   -16,  -610,   -70,  -287,   -86,   -75,  -622,  -610,  -621,
  -622,  -622,   -96,  -622,  -497,  -622,   -82,   -87,  -622,  -622,
  -622,  -622,  -236,  -622,  -437,  -622,  -610,  -612,  -241,  -616,
  -615,  -243,  -616,  -290,  -291,  -589,  -622,  -546,  -406,  -584,
  -584,  -529,  -531,  -531,  -531,  -545,  -547,  -548,  -549,  -550,
  -551,  -552,  -553,  -622,  -555,  -557,  -559,  -564,  -566,  -567,
  -569,  -574,  -576,  -577,  -579,  -580,  -581,  -622,  -621,  -347,
  -348,  -621,  -622,  -622,  -622,  -622,  -432,  -621,  -622,  -622,
  -289,  -313,  -107,  -108,  -622,  -110,  -622,  -280,  -622,  -622,
  -324,  -546,  -328,  -622,  -452,  -475,  -480,  -481,  -483,  -454,
  -477,  -455,  -479,  -456,  -457,  -622,  -460,  -462,  -622,  -463,
  -466,  -467,  -622,  -468,  -469,  -622,  -495,  -622,   -18,  -622,
   -28,  -270,  -622,  -622,  -425,  -622,  -249,  -251,  -622,  -622,
   -60,  -245,  -246,  -418,  -622,  -622,   -62,  -419,  -622,  -622,
  -297,  -598,  -599,  -598,  -599,  -610,  -195,  -622,  -392,  -393,
  -610,  -395,  -410,   -53,  -413,  -621,  -427,  -430,  -244,  -293,
  -621,  -260,  -264,  -622,  -591,  -592,   -15,   -72,  -622,   -78,
   -84,  -610,  -598,  -599,  -621,   -93,   -95,  -622,   -80,  -622,
  -204,  -214,  -610,  -621,  -621,  -283,  -286,  -614,  -404,  -621,
  -621,  -610,  -622,  -527,  -528,  -622,  -622,  -538,  -622,  -541,
  -622,  -543,  -622,  -358,  -622,  -360,  -362,  -369,  -610,  -558,
  -568,  -578,  -582,  -621,  -349,  -621,  -306,  -350,  -351,  -309,
  -622,  -312,  -622,  -610,  -598,  -599,  -602,  -288,  -622,  -107,
  -108,  -109,  -622,  -622,  -621,  -317,  -520,  -521,  -622,  -320,
  -621,  -621,  -546,  -622,  -622,  -610,  -622,  -621,  -459,  -461,
  -465,  -471,  -473,   -10,  -123,  -268,  -622,  -198,  -622,  -613,
  -621,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,
   -63,  -196,  -622,  -622,  -622,  -622,  -425,  -622,  -584,  -584,
  -374,  -621,  -621,  -621,  -391,  -622,  -610,  -397,  -553,  -561,
  -562,  -572,  -621,  -415,  -414,   -55,  -621,  -621,  -255,  -265,
   -76,   -91,   -88,  -296,  -621,  -354,  -621,  -438,  -621,  -439,
  -440,  -242,  -622,  -622,  -610,  -584,  -565,  -583,  -530,  -531,
  -531,  -556,  -531,  -531,  -575,  -531,  -553,  -570,  -610,  -622,
  -367,  -622,  -554,  -622,  -352,  -622,  -622,  -621,  -621,  -311,
  -622,  -425,  -622,  -107,  -108,  -111,  -610,  -621,  -622,  -523,
  -622,  -622,  -622,  -610,  -525,  -329,  -587,  -482,  -485,  -486,
  -487,  -488,  -622,  -269,   -32,  -199,  -250,  -622,  -237,  -622,
  -372,  -373,  -382,  -376,  -384,  -622,  -387,  -622,  -389,  -394,
  -622,  -622,  -622,  -560,  -622,  -622,  -621,  -622,  -622,   -11,
  -621,  -444,  -355,  -622,  -622,  -442,  -407,  -408,  -405,  -526,
  -622,  -534,  -622,  -536,  -622,  -539,  -622,  -542,  -544,  -359,
  -361,  -365,  -622,  -370,  -303,  -622,  -304,  -622,  -622,  -622,
  -621,  -314,  -425,  -622,  -622,  -321,  -325,  -327,  -524,  -546,
  -484,  -584,  -563,  -375,  -621,  -621,  -621,  -621,  -573,  -621,
  -396,  -610,  -399,  -401,  -402,  -571,  -622,  -289,  -411,  -622,
  -428,  -431,  -443,  -621,   -98,   -99,  -622,  -622,  -106,  -441,
  -531,  -531,  -531,  -531,  -363,  -622,  -368,  -622,  -621,  -307,
  -310,  -264,  -621,  -621,  -318,  -522,  -621,  -621,  -371,  -622,
  -379,  -622,  -381,  -622,  -385,  -622,  -388,  -390,  -398,  -622,
  -288,  -602,   -56,  -437,  -621,  -622,  -622,  -105,  -622,  -532,
  -535,  -537,  -540,  -622,  -366,  -621,  -433,  -434,  -435,  -622,
  -622,  -622,  -621,  -621,  -621,  -621,  -400,  -436,  -610,  -598,
  -599,  -602,  -104,  -531,  -364,  -353,  -315,  -322,  -330,  -622,
  -377,  -380,  -383,  -386,  -425,  -533,  -621,  -378 ]

clist = [
'6,220,213,223,369,262,422,279,279,279,17,634,338,585,548,274,17,535',
'299,130,130,396,125,208,133,133,693,325,281,281,281,224,135,135,445',
'4,555,117,578,581,224,224,224,502,17,304,304,538,541,751,263,9,545,429',
'435,843,526,9,332,336,330,335,342,343,320,419,346,496,114,224,313,313',
'442,674,224,224,316,491,224,351,834,377,130,379,381,384,387,390,393',
'379,113,831,726,729,814,280,280,280,671,130,920,671,117,487,313,792',
'954,266,272,275,718,662,674,923,295,402,403,404,405,666,667,741,17,793',
'297,331,846,224,224,224,224,17,703,704,118,948,983,952,795,378,357,857',
'277,289,290,394,605,598,615,600,612,618,599,616,860,347,616,986,359',
'750,601,754,939,9,629,794,896,665,796,830,408,832,406,951,546,698,340',
'415,356,824,486,802,494,806,495,807,1016,279,502,732,414,420,818,903',
'976,375,440,444,430,327,376,380,383,1,341,341,386,674,341,453,423,389',
'392,867,954,756,757,17,224,224,224,701,439,395,224,224,224,224,224,224',
'858,207,899,829,671,671,124,826,920,948,400,17,279,555,786,1026,942',
'1014,279,655,730,279,603,339,493,2,679,341,341,341,341,838,334,281,688',
'373,354,831,745,855,811,423,281,418,890,224,664,333,501,501,418,224',
'834,370,224,1034,326,536,523,520,805,344,847,429,435,345,848,555,527',
'274,738,831,17,,17,,530,,304,17,,,,681,,,,,,,,,851,117,,304,,944,,,280',
',,313,17,524,588,,516,280,582,583,328,511,,945,,1035,946,,313,,224,224',
'510,,448,449,450,451,684,,931,,,596,,596,,,684,880,881,970,295,,509',
'492,117,295,831,733,,1017,512,759,497,987,759,518,313,16,313,602,,,',
'16,,,,635,,,,6,,,909,,,,,821,642,17,130,810,,628,647,133,,501,501,16',
'863,641,684,135,279,584,808,,,,,,430,,627,861,862,,,932,674,,555,,,775',
'1022,423,,,9,780,,,,,439,224,657,445,,,,,,,642,,671,,,,,,,,341,341,658',
'641,,,,,,,658,658,279,1027,670,,527,,,,452,16,,430,527,640,,,,,16,646',
',430,,423,17,,,,,,988,304,,224,,439,,,808,304,,697,,,856,439,,224,789',
',,,930,,933,819,313,,,,,,,498,313,676,,,279,,,663,,,,,,,,430,,,,,513',
',,,,684,825,423,17,,,17,,,,,,224,,439,16,963,,,,,,,,224,,,,224,804,',
'727,727,,1044,771,773,,978,16,,776,778,,,444,298,746,,770,,635,555,',
'130,,797,764,,133,803,,,224,224,1018,,135,,224,224,,,224,,,527,635,',
',658,,,,,501,642,812,692,647,,,,,1020,1021,,797,,641,16,865,16,304,',
',,16,815,820,,,,,304,,,,,,,,,,17,17,,,313,635,,,16,,,,279,,815,313,815',
',,,,430,,,,650,,852,,,749,,,,755,423,,,,224,,874,,439,,224,,,,,418,17',
'17,,941,130,,789,17,,789,501,789,,,,,,797,224,668,669,,859,,707,709',
'711,864,,,,883,883,883,,677,,850,16,,1028,680,,,413,,,,,893,,,17,,901',
',17,17,905,696,,,,,,,17,,298,,,,,,313,,,635,,,29,,,925,,,29,684,,,,',
',41,,224,934,17,17,41,,29,,,,,,17,224,,29,29,29,789,29,789,,789,341',
'789,,,,,,,727,41,302,302,,298,,,935,,298,,,29,799,16,955,,29,29,17,',
'29,,17,,,,966,,,,,,,,349,789,,371,,313,,,,,998,,,,,,,313,17,,,,883,883',
'883,883,,883,,,29,1005,,,,29,29,29,29,29,,,,41,439,,985,16,,,16,17,41',
'813,,,,,,279,815,,,341,,,17,,,,430,17,,,17,17,341,,,842,,,423,42,,,',
'635,,42,,,224,815,439,,,,,,883,883,883,883,,,,,,,,,,,,,866,42,303,303',
',,,,883,29,29,29,29,,,,29,29,29,29,29,29,41,911,913,,915,917,,918,,',
',29,,,350,,,372,,,,,,,41,,,,,,16,16,,,,,,,,,,884,886,888,,29,,908,,',
',29,,,29,,,42,,799,,919,799,,562,799,42,799,,,,,29,,29,,,,,29,791,16',
'16,,,41,938,41,16,,,302,41,,,,,19,,,,,,19,29,,,,302,,,,,723,,,725,41',
',,,,29,29,,,,,833,,835,19,,16,,,,16,16,,,,1009,1010,1011,1012,,16,371',
',371,,42,,,,,,,,,,,,,,355,,790,799,,799,,799,,799,42,,16,16,,,,,,29',
',,16,,,,,,990,992,994,996,41,997,,,,,,1045,,,,19,827,,,827,,,,,19,799',
',,,,,,,16,,,,16,,29,822,823,,42,,42,,,,303,42,,,,,,,,,,,,,,,,303,16',
',,,,,,,42,,562,1040,1041,1042,1043,,,,,,,,,,,,713,29,,,,872,,16,,1047',
'29,,,372,41,372,,19,947,,949,302,16,,29,443,,16,,302,16,16,,,,,,,562',
',,19,,971,,972,,973,,,895,,,,897,898,,,,,,,,42,902,,,,,29,,,29,,,,,',
'29,,,,41,,,41,,,,,29,,,,29,927,928,798,,,827,,19,790,19,,790,,790,19',
',,,,,,,,,,,,1023,,1024,,1025,,,29,29,,,,19,29,29,,,29,,1033,,562,959',
'562,,337,962,,,713,,,840,,,,,,,,,,,,42,,,,,,1046,303,,,,,982,,,303,302',
',,,,,,562,29,29,,302,,,,,,,,,,41,41,,,,,,790,1003,790,,790,19,790,,',
',,,,,,,1015,,,29,,1019,,,42,29,,42,,,,29,29,,,,,,29,,,,18,,41,41,,,18',
'29,790,41,,,,,,,,,,,,,,,713,,713,,,,,,,,18,306,306,,,,,29,416,,,29,29',
',,447,,371,,,41,29,,,41,41,,,,,,,19,798,41,353,798,,,,,,,,,,,,303,,29',
',29,29,,,,,,303,,562,29,29,,41,41,,,42,42,,974,713,,41,,,18,,,504,,506',
',507,508,18,,,562,,,,,,,,,,19,29,,19,,29,,,,,371,,,,41,,,,41,,42,42',
'964,,,,713,42,713,,,,,,,29,,,,,798,,,,,,,,41,,,,,,,,,,,,,,,,713,,,,29',
'372,443,,42,18,,,42,42,,,,41,,29,,,42,,29,,,29,29,,,,41,18,,,,41,,,41',
'41,,,,29,,,,,,631,,42,42,,,19,19,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,18,,18,,372,,306,18,42,,,,42,,19,19,965,,,,,19,,306,,,,,,,,,18,,,',
',,,,672,,42,337,,675,,,,,,,,,,,,,,,,,,597,,597,19,,,,19,19,,,,42,,,',
'672,19,,337,,,,,,,,42,,,,,42,,,42,42,,,,,,,719,231,,,,19,19,18,,,278',
'278,278,,,19,,,,,,,,322,323,324,,,,,,,,,,,,,,,278,278,,,,,,,,,,,,,19',
',,,19,,,,969,,,,765,,,,672,337,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,,,',
'809,,,18,,,,,,,306,,,,19,,,,306,,,817,,,,,,,,19,,,,,19,,,19,19,837,',
',,,,,,,,,,,,,,,,,,447,,,,,,,,,,,,18,,,18,,,,,,,278,421,278,,,,441,446',
',,,,873,,,,,,,,,,231,,,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,475,476,477,478,479,480,481,482,483,484,485,,,,,,,278,,',
',,,278,,,278,,,,,,,278,,278,,278,278,,,,,,,,,,,,306,,,,,,,,,,,306,,',
',,,,,,,18,18,,,532,,,,,,,337,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'18,18,,,,,871,18,,,,,,981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,597',
',,18,,,,18,18,,,,,,,,,18,,,,,,,,,,,,,,,,,278,,441,656,421,,,,,,,,,,18',
'18,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,,,,,,,,,597,,,,18,278',
',,18,,,,968,,690,691,,,,,,,,,,278,,,278,,,,,,,,,,18,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,18,,278,,,,,,,,,,,,,18,,,,,18,,,18,18,,,,,,,,,,,,',
',,,,,,,,,,278,767,,,278,278,772,774,,,,,777,779,,,656,781,,,,,,,,,,',
',,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,278,,,,,,',
',,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,875,,,,,,',
',,,,,,,772,774,779,777,,878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,875,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(2978, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,27,22,60,153,25,36,36,36,24,26,89,95,152,74,24,10,53,61,61,60,17',
'17,64,64,13,34,73,73,73,24,65,65,20,2,183,98,92,92,24,24,24,76,24,24',
'24,72,72,99,39,9,72,40,40,93,55,9,73,73,6,6,19,19,67,30,19,25,8,24,68',
'68,30,197,24,24,54,42,24,24,192,6,61,6,6,6,6,6,6,6,5,187,94,94,14,71',
'71,71,77,61,130,77,98,40,68,142,148,41,41,41,132,43,197,133,49,19,19',
'19,19,43,43,58,24,143,50,71,14,24,24,24,24,24,137,137,7,193,108,147',
'145,170,109,110,48,48,48,170,174,59,173,59,174,173,111,174,112,5,174',
'113,114,115,116,117,118,9,66,134,46,45,140,143,33,143,9,146,149,150',
'151,31,21,145,154,155,158,159,160,161,162,36,76,163,22,22,164,165,133',
'168,22,22,74,32,169,171,172,1,32,32,175,197,32,27,6,176,177,178,148',
'179,180,24,24,24,24,152,61,181,24,24,24,24,24,24,182,18,15,186,77,77',
'11,189,130,193,7,24,36,183,26,147,190,133,36,25,95,36,196,91,74,3,55',
'32,32,32,32,132,88,73,55,87,96,187,97,58,26,6,73,71,145,24,75,70,6,6',
'71,24,192,100,24,133,101,102,34,27,43,103,104,40,40,105,106,183,53,74',
'107,187,24,,24,,27,,24,24,,,,25,,,,,,,,,26,98,,24,,142,,,71,,,68,24',
'67,27,,54,71,19,19,51,9,,143,,93,143,,68,,24,24,8,,32,32,32,32,40,,94',
',,24,,24,,,40,137,137,143,49,,5,48,98,49,187,25,,14,50,174,48,99,174',
'50,68,23,68,39,,,,23,,,,34,,,,6,,,137,,,,,72,74,24,61,55,,17,74,64,',
'6,6,23,152,6,40,65,36,5,76,,,,,,74,,2,10,10,,,26,197,,183,,,42,143,6',
',,9,42,,,,,61,24,34,20,,,,,,,74,,77,,,,,,,,32,32,6,6,,,,,,,6,6,36,13',
'73,,53,,,,51,23,,74,53,41,,,,,23,41,,74,,6,24,,,,,,137,24,,24,,61,,',
'76,24,,73,,,25,61,,24,136,,,,92,,10,30,68,,,,,,,51,68,9,,,36,,,41,,',
',,,,,74,,,,,51,,,,,40,136,6,24,,,24,,,,,,24,,61,23,92,,,,,,,,24,,,,24',
'89,,98,98,,26,22,22,,92,23,,22,22,,,22,12,98,,73,,34,183,,61,,34,17',
',64,153,,,24,24,95,,65,,24,24,,,24,,,53,34,,,6,,,,,6,74,53,32,74,,,',
',10,10,,34,,6,23,60,23,24,,,,23,6,6,,,,,24,,,,,,,,,,24,24,,,68,34,,',
'23,,,,36,,6,68,6,,,,,74,,,,51,,19,,,32,,,,32,6,,,,24,,22,,61,,24,,,',
',71,24,24,,136,61,,136,24,,136,6,136,,,,,,34,24,51,51,,98,,185,185,185',
'98,,,,6,6,6,,51,,71,23,,25,51,,,12,,,,,24,,,24,,6,,24,24,6,51,,,,,,',
'24,,12,,,,,,68,,,34,,,44,,,19,,,44,40,,,,,,56,,24,19,24,24,56,,44,,',
',,,24,24,,44,44,44,136,44,136,,136,32,136,,,,,,,98,56,56,56,,12,,,98',
',12,,,44,188,23,24,,44,44,24,,44,,24,,,,24,,,,,,,,56,136,,56,,68,,,',
',34,,,,,,,68,24,,,,6,6,6,6,,6,,,44,27,,,,44,44,44,44,44,,,,56,61,,98',
'23,,,23,24,56,51,,,,,,36,6,,,32,,,24,,,,74,24,,,24,24,32,,,51,,,6,57',
',,,34,,57,,,24,6,61,,,,,,6,6,6,6,,,,,,,,,,,,,51,57,57,57,,,,,6,44,44',
'44,44,,,,44,44,44,44,44,44,56,185,185,,185,185,,185,,,,44,,,57,,,57',
',,,,,,56,,,,,,23,23,,,,,,,,,,139,139,139,,44,,51,,,,44,,,44,,,57,,188',
',51,188,,131,188,57,188,,,,,44,,44,,,,,44,141,23,23,,,56,51,56,23,,',
'56,56,,,,,29,,,,,,29,44,,,,56,,,,,12,,,12,56,,,,,44,44,,,,,141,,141',
'29,,23,,,,23,23,,,,185,185,185,185,,23,56,,56,,57,,,,,,,,,,,,,,29,,138',
'188,,188,,188,,188,57,,23,23,,,,,,44,,,23,,,,,,139,139,139,139,56,139',
',,,,,185,,,,29,138,,,138,,,,,29,188,,,,,,,,23,,,,23,,44,12,12,,57,,57',
',,,57,57,,,,,,,,,,,,,,,,57,23,,,,,,,,57,,131,139,139,139,139,,,,,,,',
',,,,131,44,,,,12,,23,,139,44,,,57,56,57,,29,141,,141,56,23,,44,29,,23',
',56,23,23,,,,,,,131,,,29,,141,,141,,141,,,12,,,,12,12,,,,,,,,57,12,',
',,,44,,,44,,,,,,44,,,,56,,,56,,,,,44,,,,44,12,12,131,,,138,,29,138,29',
',138,,138,29,,,,,,,,,,,,,141,,141,,141,,,44,44,,,,29,44,44,,,44,,141',
',131,12,131,,69,12,,,131,,,131,,,,,,,,,,,,57,,,,,,141,57,,,,,12,,,57',
'56,,,,,,,131,44,44,,56,,,,,,,,,,56,56,,,,,,138,12,138,,138,29,138,,',
',,,,,,,12,,,44,,12,,,57,44,,57,,,,44,44,,,,,,44,,,,28,,56,56,,,28,44',
'138,56,,,,,,,,,,,,,,,131,,131,,,,,,,,28,28,28,,,,,44,69,,,44,44,,,69',
',56,,,56,44,,,56,56,,,,,,,29,131,56,28,131,,,,,,,,,,,,57,,44,,44,44',
',,,,,57,,131,44,44,,56,56,,,57,57,,131,131,,56,,,28,,,69,,69,,69,69',
'28,,,131,,,,,,,,,,29,44,,29,,44,,,,,56,,,,56,,,,56,,57,57,56,,,,131',
'57,131,,,,,,,44,,,,,131,,,,,,,,56,,,,,,,,,,,,,,,,131,,,,44,57,29,,57',
'28,,,57,57,,,,56,,44,,,57,,44,,,44,44,,,,56,28,,,,56,,,56,56,,,,44,',
',,,,69,,57,57,,,29,29,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,,57',
',28,28,57,,,,57,,29,29,57,,,,,29,,28,,,,,,,,,28,,,,,,,,69,,57,69,,69',
',,,,,,,,,,,,,,,,,28,,28,29,,,,29,29,,,,57,,,,69,29,,69,,,,,,,,57,,,',
',57,,,57,57,,,,,,,69,35,,,,29,29,28,,,35,35,35,,,29,,,,,,,,35,35,35',
',,,,,,,,,,,,,,35,35,,,,,,,,,,,,,29,,,,29,,,,29,,,,69,,,,69,69,,,,,,',
',,,,,,,,,,29,,,,,,,,,,,,,,,,,,,69,,,28,,,,,,,28,,,,29,,,,28,,,69,,,',
',,,,29,,,,,29,,,29,29,69,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,28,,,28,,',
',,,,35,35,35,,,,35,35,,,,,69,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,,,35,,,,,,35',
',,35,,,,,,,35,,35,,35,35,,,,,,,,,,,,28,,,,,,,,,,,28,,,,,,,,,,28,28,',
',35,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,,,,,28,28',
',,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,28,,,28,,,,28,28,,,,,,',
',,28,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,28,28,,,,,,,,,28,,,,,,,,',
',,,,,,,,,,,,35,,,35,,35,,,,,,,,,28,,,,28,35,,,28,,,,28,,35,35,,,,,,',
',,,35,,,35,,,,,,,,,,28,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,28,,35,,,,',
',,,,,,,,28,,,,,28,,,28,28,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35',
',,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,',
',,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,',
',,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(2978, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   203,    33,   255,   nil,    85,    -2,   126,    63,    49,
  -309,   226,   593,  -508,  -599,  -582,   nil,    11,   219,    -4,
  -183,   107,   -20,   389,     8,  -206,  -411,   -15,  1595,  1153,
  -145,   -33,   138,    45,   -21,  1973,   -25,   nil,   nil,    23,
  -160,    78,  -189,  -375,   836,  -323,  -639,   nil,   110,    78,
    88,   281,   nil,   -19,    38,  -261,   849,  1001,  -473,  -210,
   -70,     8,   nil,   nil,    13,    21,  -248,    20,    33,  1429,
   215,    63,  -284,    -4,   -15,  -211,  -238,  -402,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   199,   -52,
   nil,   188,  -304,  -668,  -490,  -334,   195,  -330,    32,  -552,
   209,   226,   -40,   223,  -434,   226,  -433,  -291,  -795,    68,
  -604,  -206,  -595,  -778,    85,  -441,  -209,  -441,  -703,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -739,   782,  -453,  -728,  -495,   nil,  -118,  -417,   566,   308,
  -492,   478,  -555,  -537,   nil,  -522,  -718,  -754,  -785,  -166,
  -371,   111,  -326,   -20,   -81,  -481,   nil,   nil,   -88,  -483,
   -87,  -482,  -796,  -397,  -502,  -625,   nil,   nil,   115,   117,
    54,   115,   115,  -235,  -230,   118,   122,   122,  -543,  -392,
  -392,   132,  -517,  -304,   nil,   230,  -473,  -615,   238,  -465,
  -633,   nil,  -628,  -750,   nil,   nil,  -122,  -430 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   292,     7,   348,   293,
   nil,   nil,   534,   nil,   844,   nil,   291,   nil,   nil,   nil,
    14,    15,    21,   230,   321,   nil,   nil,   743,   228,   229,
   nil,   nil,    20,   nil,   329,    24,    25,    26,    27,   nil,
   687,   nil,   nil,   nil,   310,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   595,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   425,   nil,   426,   437,   643,   499,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   579,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   715,   836,   nil,   716,   943,   788,   550,   nil,   551,   nil,
   nil,   552,   nil,   554,   659,   nil,   nil,   nil,   560,   nil,
   nil,   nil,   753,   nil,   nil,   nil,   436,   269,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   828,   549,   nil,   553,   564,   566,   567,
   800,   570,   571,   801,   574,   577,   nil,   286 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  5, 151, :_reduce_10,
  4, 154, :_reduce_11,
  2, 156, :_reduce_12,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_15,
  2, 160, :_reduce_16,
  0, 177, :_reduce_17,
  4, 153, :_reduce_18,
  3, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  2, 153, :_reduce_22,
  3, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  4, 153, :_reduce_28,
  1, 153, :_reduce_none,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  6, 153, :_reduce_32,
  5, 153, :_reduce_33,
  5, 153, :_reduce_34,
  5, 153, :_reduce_35,
  5, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 163, :_reduce_49,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 165, :_reduce_none,
  3, 165, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 161, :_reduce_119,
  1, 161, :_reduce_none,
  1, 162, :_reduce_121,
  0, 210, :_reduce_122,
  4, 162, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 169, :_reduce_247,
  1, 169, :_reduce_248,
  2, 169, :_reduce_249,
  4, 169, :_reduce_250,
  2, 169, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  3, 212, :_reduce_291,
  1, 212, :_reduce_292,
  4, 212, :_reduce_293,
  3, 212, :_reduce_294,
  1, 212, :_reduce_295,
  5, 212, :_reduce_296,
  4, 212, :_reduce_297,
  3, 212, :_reduce_298,
  2, 212, :_reduce_299,
  1, 212, :_reduce_none,
  2, 212, :_reduce_301,
  2, 212, :_reduce_302,
  6, 212, :_reduce_303,
  6, 212, :_reduce_304,
  0, 247, :_reduce_305,
  0, 248, :_reduce_306,
  7, 212, :_reduce_307,
  0, 249, :_reduce_308,
  0, 250, :_reduce_309,
  7, 212, :_reduce_310,
  5, 212, :_reduce_311,
  4, 212, :_reduce_312,
  0, 251, :_reduce_313,
  0, 252, :_reduce_314,
  9, 212, :_reduce_315,
  0, 253, :_reduce_316,
  0, 254, :_reduce_317,
  7, 212, :_reduce_318,
  0, 255, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  9, 212, :_reduce_322,
  0, 258, :_reduce_323,
  0, 259, :_reduce_324,
  6, 212, :_reduce_325,
  0, 260, :_reduce_326,
  6, 212, :_reduce_327,
  0, 261, :_reduce_328,
  0, 262, :_reduce_329,
  9, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 168, :_reduce_335,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_353,
  1, 158, :_reduce_none,
  2, 158, :_reduce_355,
  1, 240, :_reduce_none,
  1, 240, :_reduce_357,
  1, 274, :_reduce_none,
  3, 274, :_reduce_359,
  1, 277, :_reduce_360,
  3, 277, :_reduce_361,
  1, 276, :_reduce_362,
  4, 276, :_reduce_363,
  6, 276, :_reduce_364,
  3, 276, :_reduce_365,
  5, 276, :_reduce_366,
  2, 276, :_reduce_367,
  4, 276, :_reduce_368,
  1, 276, :_reduce_369,
  3, 276, :_reduce_370,
  4, 278, :_reduce_371,
  2, 278, :_reduce_372,
  2, 278, :_reduce_373,
  1, 278, :_reduce_374,
  2, 283, :_reduce_375,
  1, 283, :_reduce_none,
  6, 284, :_reduce_377,
  8, 284, :_reduce_378,
  4, 284, :_reduce_379,
  6, 284, :_reduce_380,
  4, 284, :_reduce_381,
  2, 284, :_reduce_382,
  6, 284, :_reduce_383,
  2, 284, :_reduce_384,
  4, 284, :_reduce_385,
  6, 284, :_reduce_386,
  2, 284, :_reduce_387,
  4, 284, :_reduce_388,
  2, 284, :_reduce_389,
  4, 284, :_reduce_390,
  1, 284, :_reduce_391,
  1, 187, :_reduce_392,
  1, 187, :_reduce_none,
  3, 288, :_reduce_394,
  1, 288, :_reduce_395,
  4, 288, :_reduce_396,
  1, 289, :_reduce_none,
  4, 289, :_reduce_398,
  1, 290, :_reduce_399,
  3, 290, :_reduce_400,
  1, 291, :_reduce_401,
  1, 291, :_reduce_none,
  0, 295, :_reduce_403,
  3, 235, :_reduce_404,
  4, 293, :_reduce_405,
  1, 293, :_reduce_406,
  3, 294, :_reduce_407,
  3, 294, :_reduce_408,
  0, 298, :_reduce_409,
  0, 299, :_reduce_410,
  6, 297, :_reduce_411,
  2, 182, :_reduce_412,
  4, 182, :_reduce_413,
  5, 182, :_reduce_414,
  5, 182, :_reduce_415,
  0, 301, :_reduce_416,
  3, 234, :_reduce_417,
  4, 234, :_reduce_418,
  4, 234, :_reduce_419,
  3, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  2, 234, :_reduce_423,
  1, 234, :_reduce_424,
  4, 234, :_reduce_425,
  0, 302, :_reduce_426,
  0, 303, :_reduce_427,
  6, 233, :_reduce_428,
  0, 304, :_reduce_429,
  0, 305, :_reduce_430,
  6, 233, :_reduce_431,
  0, 307, :_reduce_432,
  6, 239, :_reduce_433,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  6, 157, :_reduce_436,
  0, 157, :_reduce_437,
  1, 308, :_reduce_438,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 309, :_reduce_441,
  1, 309, :_reduce_none,
  2, 159, :_reduce_443,
  1, 159, :_reduce_none,
  1, 223, :_reduce_445,
  1, 223, :_reduce_446,
  1, 223, :_reduce_none,
  1, 224, :_reduce_448,
  1, 311, :_reduce_449,
  1, 311, :_reduce_none,
  2, 311, :_reduce_451,
  3, 312, :_reduce_452,
  1, 312, :_reduce_453,
  3, 225, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 227, :_reduce_457,
  1, 316, :_reduce_458,
  3, 316, :_reduce_459,
  1, 317, :_reduce_none,
  2, 317, :_reduce_461,
  3, 229, :_reduce_462,
  3, 229, :_reduce_463,
  1, 319, :_reduce_464,
  3, 319, :_reduce_465,
  3, 228, :_reduce_466,
  3, 228, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  1, 320, :_reduce_470,
  3, 320, :_reduce_471,
  1, 321, :_reduce_472,
  3, 321, :_reduce_473,
  1, 313, :_reduce_474,
  2, 313, :_reduce_475,
  1, 314, :_reduce_476,
  2, 314, :_reduce_477,
  1, 315, :_reduce_478,
  2, 315, :_reduce_479,
  1, 318, :_reduce_480,
  0, 323, :_reduce_481,
  3, 318, :_reduce_482,
  0, 324, :_reduce_483,
  4, 318, :_reduce_484,
  1, 322, :_reduce_485,
  1, 322, :_reduce_486,
  1, 322, :_reduce_487,
  1, 322, :_reduce_none,
  2, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  3, 209, :_reduce_495,
  1, 310, :_reduce_none,
  2, 310, :_reduce_497,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_507,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 231, :_reduce_514,
  1, 231, :_reduce_515,
  1, 167, :_reduce_516,
  1, 167, :_reduce_517,
  1, 172, :_reduce_518,
  1, 172, :_reduce_519,
  1, 241, :_reduce_520,
  0, 326, :_reduce_521,
  4, 241, :_reduce_522,
  2, 241, :_reduce_523,
  3, 243, :_reduce_524,
  2, 243, :_reduce_525,
  4, 327, :_reduce_526,
  2, 327, :_reduce_527,
  2, 327, :_reduce_528,
  1, 327, :_reduce_none,
  2, 329, :_reduce_530,
  0, 329, :_reduce_531,
  6, 296, :_reduce_532,
  8, 296, :_reduce_533,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  6, 296, :_reduce_540,
  2, 296, :_reduce_541,
  4, 296, :_reduce_542,
  2, 296, :_reduce_543,
  4, 296, :_reduce_544,
  1, 296, :_reduce_545,
  0, 296, :_reduce_546,
  1, 292, :_reduce_547,
  1, 292, :_reduce_548,
  1, 292, :_reduce_549,
  1, 292, :_reduce_550,
  1, 275, :_reduce_none,
  1, 275, :_reduce_552,
  1, 331, :_reduce_none,
  3, 331, :_reduce_554,
  1, 285, :_reduce_555,
  3, 285, :_reduce_556,
  1, 332, :_reduce_none,
  2, 333, :_reduce_558,
  1, 333, :_reduce_559,
  2, 334, :_reduce_560,
  1, 334, :_reduce_561,
  1, 279, :_reduce_none,
  3, 279, :_reduce_563,
  1, 328, :_reduce_none,
  3, 328, :_reduce_565,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 280, :_reduce_568,
  1, 280, :_reduce_569,
  3, 336, :_reduce_570,
  3, 337, :_reduce_571,
  1, 286, :_reduce_572,
  3, 286, :_reduce_573,
  1, 330, :_reduce_574,
  3, 330, :_reduce_575,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 287, :_reduce_578,
  1, 287, :_reduce_579,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 282, :_reduce_582,
  2, 281, :_reduce_583,
  0, 281, :_reduce_584,
  1, 244, :_reduce_none,
  0, 340, :_reduce_586,
  4, 244, :_reduce_587,
  1, 232, :_reduce_588,
  2, 232, :_reduce_589,
  1, 217, :_reduce_none,
  3, 217, :_reduce_591,
  3, 341, :_reduce_592,
  2, 341, :_reduce_593,
  2, 341, :_reduce_594,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 171, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 170, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_617,
  1, 242, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_620,
  0, 150, :_reduce_621 ]

racc_reduce_n = 622

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_556(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 557 omitted

def _reduce_558(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_559(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

# reduce 566 omitted

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_569(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_579(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 580 omitted

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_583(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_584(val, _values, result)
                      result = nil
                    
    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_588(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

def _reduce_617(val, _values, result)
 yyerrok 
    result
end

# reduce 618 omitted

# reduce 619 omitted

def _reduce_620(val, _values, result)
 yyerrok 
    result
end

def _reduce_621(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
