#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-505,585,585,585,788,-98,271,-505,-505,-505,884,-102,-505,-505,-505',
'271,-505,754,627,-101,221,666,544,666,-505,546,-505,-505,-505,-100,666',
'706,-103,-92,695,585,-505,-505,-280,-505,-505,-505,-505,-505,116,-280',
'-102,585,-103,115,734,-94,-106,83,-280,665,222,665,-99,-105,-101,84',
'-100,-101,665,3,-100,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-505,-505,626,-84,-505,-505,-505,734,-505,-505,-601,734,-505',
'507,270,-505,-505,-70,-505,505,-505,-92,-505,270,-505,-505,-505,-505',
'-505,-505,-505,-89,-505,-601,-505,261,116,116,116,-94,936,115,115,115',
'753,-92,-102,-505,-505,-505,-505,-102,-505,-288,-505,-91,-92,705,-94',
'-92,-288,-288,-288,116,-505,-288,-288,-288,115,-288,116,116,-93,-92',
'-94,115,115,-94,-97,-288,-288,-288,116,-103,-90,-96,-605,115,-103,-288',
'-288,-94,-288,-288,-288,-288,-288,-100,-101,-104,218,219,-100,-101,271',
'218,219,116,666,94,95,116,115,218,219,271,115,793,-599,459,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,852,823',
'-288,-288,-288,-605,791,-288,665,222,-288,611,-605,-288,-288,745,-288',
'-601,-288,746,-288,-605,-288,-288,-288,-288,-288,-288,-288,-425,-288',
'-602,-288,94,95,-416,-507,-505,492,-605,789,-106,630,-507,-505,-288',
'-288,-288,-288,-599,-288,-502,-288,-505,96,97,222,270,-502,-502,-502',
'222,-104,-502,-502,-502,492,-502,270,222,-95,-599,613,612,775,-502,-517',
'-502,-502,-502,411,764,-425,-263,-605,413,412,-502,-502,-425,-502,-502',
'-502,-502,-502,-280,-103,565,-425,562,561,560,-280,563,611,629,769,611',
'264,116,616,-280,96,97,115,265,-425,768,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,-502,-502,-99,532,-502,-502,-502,-605',
'-502,-502,-598,611,-502,767,-605,-502,-502,-264,-502,-601,-502,611,-502',
'-605,-502,-502,-502,-502,-502,-502,-502,823,-502,591,-502,613,612,609',
'613,612,565,-605,562,561,560,982,563,-502,-502,-502,-502,611,-502,-605',
'-502,222,681,570,1006,-105,-605,-605,-605,-502,-502,570,-605,-605,573',
'-605,-502,242,613,612,544,-598,573,546,-605,-502,116,766,613,612,609',
'115,-516,611,737,-605,-605,264,-605,-605,-605,-605,-605,-598,265,-517',
'116,581,580,239,591,115,611,241,240,581,580,611,613,612,631,730,544',
'883,848,546,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,728,574,-605,-605,-605,644,650,-90,-98,574,-605,727,643,-605',
'613,612,619,-516,-605,726,-605,-99,-605,-605,-605,-605,-605,-605,-605',
'718,-605,-605,-605,613,612,624,532,774,613,612,614,581,580,716,-605',
'-605,-605,-94,-93,216,-605,-605,-605,-605,-92,714,-605,-605,-605,-89',
'-605,-103,-102,544,218,219,543,-509,-101,-605,-605,-605,-605,-98,-509',
'-508,218,219,-96,-91,-605,-605,-508,-605,-605,-605,-605,-605,712,-510',
'711,-97,-105,-100,708,565,-510,562,561,560,-513,563,-511,-512,222,-106',
'701,-513,886,-511,-512,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,-605,218,219,-605,-605,-605,215,790,-605,720,711',
'-605,889,1013,-605,-605,892,-605,723,-605,894,-605,1011,-605,-605,-605',
'-605,-605,-605,-605,896,-605,-605,-605,565,-505,562,561,560,570,563',
'222,-505,218,219,898,-605,-605,-605,-605,573,-605,-288,-605,899,-502',
'852,823,700,-288,-288,-288,-502,-102,695,-288,-288,565,-288,562,561',
'560,568,563,565,537,562,561,560,222,563,578,577,581,580,116,695,684',
'-288,-288,115,-288,-288,-288,-288,-288,116,907,-84,-262,565,115,562',
'561,560,720,563,565,911,562,561,560,720,563,928,913,914,574,222,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,215',
'242,-288,-288,-288,720,649,594,711,917,-288,919,720,-288,723,921,592',
'923,-288,923,-288,222,-288,-288,-288,-288,-288,-288,-288,116,-288,222',
'-288,239,115,929,222,241,240,237,238,931,-515,222,933,-288,-288,242',
'-95,-515,-288,296,72,73,74,12,60,242,-515,215,66,67,-104,242,242,70',
'963,68,69,71,33,34,75,76,653,750,273,642,222,32,31,30,104,103,105,106',
'875,876,22,641,877,110,111,654,11,48,222,13,108,107,109,98,59,100,99',
'101,637,102,110,111,943,94,95,944,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,222,235,236,215,947,256,257,-265,43,-262,535,36,635',
'628,61,62,242,625,63,457,38,239,622,245,47,241,240,237,238,249,247,243',
'23,244,618,596,595,91,83,85,86,87,89,957,403,591,84,92,239,260,964,-239',
'241,240,65,965,507,81,88,90,967,968,96,97,296,72,73,74,12,60,548,547',
'-335,66,67,541,242,533,70,-335,68,69,71,33,34,75,76,984,-335,529,986',
'987,32,31,30,104,103,105,106,273,222,22,991,276,526,711,638,11,48,996',
'13,108,107,109,98,59,100,99,101,998,102,110,111,1000,94,95,1002,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,-288,235,236,-289,1002',
'256,257,-288,43,519,-289,36,-602,518,61,62,-288,1009,63,-289,38,239',
'222,245,47,241,240,237,238,249,247,243,23,244,-69,507,-288,91,83,85',
'86,87,89,-288,-288,505,84,92,-602,260,1014,-288,-288,502,65,1015,-602',
'81,88,90,-288,923,96,97,296,72,73,74,12,60,923,923,-514,66,67,1020,273',
'984,70,-514,68,69,71,33,34,75,76,492,-514,221,461,460,32,31,30,104,103',
'105,106,458,414,22,409,393,390,387,654,11,48,-602,13,108,107,109,98',
'59,100,99,101,-601,102,110,111,700,94,95,384,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,-289,235,236,215,360,256,257,-289,43,222',
'214,36,321,320,61,62,-289,261,63,212,38,239,984,245,47,241,240,237,238',
'249,247,243,23,244,1043,1044,215,91,83,85,86,87,89,456,215,1045,84,92',
'1046,260,1002,963,457,1002,65,1002,222,81,88,90,750,217,96,97,296,72',
'73,74,12,60,211,210,215,66,67,923,984,209,70,748,68,69,71,33,34,75,76',
'112,750,1002,222,846,32,31,30,104,103,105,106,823,960,22,562,561,560',
'222,563,11,48,823,13,108,107,109,98,59,100,99,101,856,102,110,111,242',
'94,95,222,45,46,44,242,246,251,252,253,248,250,258,259,254,255,-289',
'235,236,-514,695,256,257,-289,43,273,-514,36,273,222,61,62,-289,,63',
'-514,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,-515,91,83',
'85,86,87,89,-515,215,,84,92,222,260,,525,-515,,65,,,81,88,90,523,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121',
'122,123,32,31,30,104,103,105,106,,960,22,562,561,560,,563,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104',
'103,105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,',
'256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247',
'243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,242,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,239,,,,241,240,237',
'238,565,,562,561,560,,563,256,257,,43,,,36,,242,61,62,,,63,,38,239,',
'245,47,241,240,237,238,256,257,243,23,244,,,720,91,83,85,86,87,89,,',
'239,84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,-625,-625,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,565,,562,561,560,65,563,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,720',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,-625,-625,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',565,,562,561,560,65,563,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,720,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,,,,256,257,,43,',
',298,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,',
',,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,',
',96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,,,,256',
'257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625',
'-625,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250',
',,-625,-625,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,,254,255,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245,47',
'241,240,237,238,249,247,243,232,244,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285,239,283,245',
'47,241,240,237,238,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,',
'108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,302,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,',
',,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89',
',,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,354,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,403,65,,,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,419,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,419,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,222,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,',
',,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,521,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,678,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,537,,61,62,,,63,,,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,974,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,901,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,597,59,100,99,598,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,599,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,597,59,100,99,598,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,599,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,',
'290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,678,,283,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,403,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,',
',,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,901,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,678,,,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,772',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,678,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85',
'86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,419,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281,-281',
'565,-281,562,561,560,570,563,,,,,-281,-281,-281,,,573,,,,,-281,-281',
',-281,-281,-281,-281,-281,,,,,,,,,,568,,,,,,,,,578,577,581,580,,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281',
'-281,-281,,,-281,,,-281,,,-281,-281,,-281,574,-281,,-281,,-281,-281',
'-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281',
'-607,-281,,-281,,,,-607,-607,-607,,,-607,-607,-607,565,-607,562,561',
'560,570,563,,,,-607,-607,-607,-607,,,573,,,,,-607,-607,,-607,-607,-607',
'-607,-607,,,,,,,,,,568,,,,,,,,,578,577,581,580,,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,,,-607,-607,-607,',
',-607,,,-607,,,-607,-607,,-607,574,-607,,-607,,-607,-607,-607,-607,-607',
'-607,-607,,-607,-607,-607,,,,,,,,,,,,,-607,-607,-607,-607,-606,-607',
',-607,,,,-606,-606,-606,,,-606,-606,-606,565,-606,562,561,560,570,563',
',,,-606,-606,-606,-606,,,573,,,,,-606,-606,,-606,-606,-606,-606,-606',
',,,,,,,,,568,,,,,,,,,578,577,581,580,,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606,,222',
'-606,,,-606,-606,,-606,574,-606,,-606,,-606,-606,-606,-606,-606,-606',
'-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,,-606,,-606,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,369,368,370,367,172,191,190,,,,,,171,178,169,170,364,365,366,362',
'129,100,99,363,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,376,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,',
',,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,400,399,128,,401,,,,,,',
'161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,',
',,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,-624',
',165,,,,,-624,-624,-624,,,-624,-624,-624,565,-624,562,561,560,570,563',
'158,,,-624,-624,-624,,,,573,,,,,-624,-624,,-624,-624,-624,-624,-624',
',,,,,,,,,568,,,,,,,,,578,577,581,580,,-624,-624,-624,-624,-624,-624',
'-624,-624,-624,-624,-624,-624,-624,-624,,,-624,-624,-624,,,-624,,273',
'-624,,,-624,-624,,-624,574,-624,,-624,,-624,-624,-624,-624,-624,-624',
'-624,,-624,-624,-624,,,,,,,,,,,,-424,-624,-624,,-624,,-624,-424,-424',
'-424,,,-424,-424,-424,565,-424,562,561,560,570,563,,,,-424,-424,-424',
',,,573,,,,,-424,-424,,-424,-424,-424,-424,-424,,,,,,,,,,568,,,,,,,,',
',,581,580,,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424',
'-424,-424,,,-424,-424,-424,,,-424,,273,-424,,,-424,-424,,-424,574,-424',
',-424,,-424,-424,-424,-424,-424,-424,-424,,-424,-424,-424,,,,,,,,,,',
',-624,-424,-424,,-424,,-424,-624,-624,-624,,,-624,-624,-624,565,-624',
'562,561,560,570,563,,,,-624,-624,,,,,573,,,,,-624,-624,,-624,-624,-624',
'-624,-624,,,565,,562,561,560,570,563,568,,,,,,,,,573,,581,580,,-295',
',,,,,,-295,-295,-295,,-624,-295,-295,-295,,-295,568,-624,,,,,273,-624',
',-295,-295,581,580,,574,,,,,-295,-295,,-295,-295,-295,-295,-295,,-624',
'-624,,,,,,,,,,,,,-624,,,574,,-624,,,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,276,-295',
',,-295,-295,,-295,,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295',
',-295,,,,,,658,440,,,659,,,-295,-295,,-295,,-295,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570',
'563,565,,562,561,560,570,563,,,573,,,,,158,,573,,,,,565,,562,561,560',
'570,563,,,,568,758,,,,,573,568,,578,577,581,580,,,,578,577,581,580,',
',,,,,,,568,,,,,,,,,656,433,581,580,657,,,,574,,,,,161,162,574,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,574,,,273,,,,,,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,658,440',
',,659,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,565,165,562,561,560,570,563,,,,,,,,,,573,,,,,158,,,,,,',
',,,,,,,,,,568,758,1008,440,,,1007,,,578,577,581,580,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,574,,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1038',
'440,,,1039,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,565,165,562,561,560,570,563,565,,562,561,560,570',
'563,,,573,,,,,158,,573,565,,562,561,560,570,563,,,,,,,,568,551,573,',
',,,568,,578,577,581,580,,,,,,581,580,,,,,568,,,,,,,,,,,581,580,,,,742',
'440,,,743,574,,,,,,,574,161,162,,157,139,140,141,148,145,147,,,142,143',
',,574,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,740,433,,,741,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561',
'560,570,563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561',
'560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581,580,,,,,,581,580,,',
',,568,,565,,562,561,560,570,563,578,577,581,580,,,,490,433,573,,491',
'574,,,,,,,574,161,162,,157,139,140,141,148,145,147,,568,142,143,,,574',
'163,164,149,150,,581,580,,,,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,565,165,562,561,560,570,563,574,565,,562,561,560',
'570,563,,573,,,,,158,,,573,,,,,,,,,,,,,,568,,,,,,,,568,860,440,581,580',
'861,,,,,,581,580,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,574,,,273,,,,,574,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,565,165,562,561,560,570,563,,,,,,,,,,573,,,,,158',
',,,,,,,,,,,,,,,,568,688,433,,,689,,,,578,577,581,580,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,574,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,691,440',
',,692,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,429,433,,,430,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,436,440,,,435',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,1036,433,,,1037,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,656,433,,,657,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,490,433,,,491,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26514, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'101,932,857,345,656,351,64,101,101,101,792,1038,101,101,101,312,101',
'603,391,740,22,670,334,497,101,334,101,101,101,858,496,550,741,688,685',
'344,101,101,308,101,101,101,101,101,293,308,742,910,1037,293,859,689',
'355,80,308,670,22,497,352,595,656,80,1051,1036,496,1,792,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,391,683,101,101,101,587',
'101,101,1038,588,101,677,64,101,101,683,101,675,101,688,101,312,101',
'101,101,101,101,101,101,351,101,742,101,668,932,857,345,689,857,932',
'857,345,603,740,1038,101,101,101,101,1038,101,659,101,858,688,550,741',
'688,659,659,659,603,101,659,659,659,603,659,344,859,742,688,689,344',
'859,689,355,659,659,659,910,1037,352,595,691,910,1037,659,659,689,659',
'659,659,659,659,1051,1036,743,761,761,1051,1036,29,698,698,587,488,317',
'317,588,587,453,453,669,588,662,598,228,659,659,659,659,659,659,659',
'659,659,659,659,659,659,659,729,729,659,659,659,691,659,659,488,660',
'659,620,691,659,659,599,659,691,659,599,659,691,659,659,659,659,659',
'659,659,818,659,743,659,44,44,29,368,598,651,691,657,228,394,368,598',
'659,659,659,659,598,659,98,659,598,317,317,761,29,98,98,98,698,659,98',
'98,98,645,98,669,453,743,598,620,620,640,98,226,98,98,98,126,620,818',
'636,860,126,126,98,98,818,98,98,98,98,98,975,657,928,818,928,928,928',
'975,928,509,394,632,382,27,754,382,975,44,44,754,27,818,630,98,98,98',
'98,98,98,98,98,98,98,98,98,98,98,226,458,98,98,98,860,98,98,597,623',
'98,627,860,98,98,771,98,860,98,378,98,860,98,98,98,98,98,98,98,989,98',
'989,98,509,509,509,382,382,723,860,723,723,723,928,723,98,98,98,98,396',
'98,436,98,958,509,708,958,458,436,436,436,597,98,886,436,436,708,436',
'597,464,623,623,338,597,886,338,436,597,348,623,378,378,378,348,225',
'385,590,436,436,372,436,436,436,436,436,597,372,42,5,708,708,464,589',
'5,388,464,464,886,886,380,396,396,396,584,703,776,723,703,436,436,436',
'436,436,436,436,436,436,436,436,436,436,436,582,708,436,436,436,430',
'436,42,225,886,436,579,429,436,385,385,385,41,436,575,436,42,436,436',
'436,436,436,436,436,567,436,436,436,388,388,388,321,639,380,380,380',
'711,711,558,658,436,436,430,436,18,436,658,658,658,429,557,658,658,658',
'41,658,430,436,333,343,343,333,370,429,658,658,658,658,41,370,369,20',
'20,321,639,658,658,369,658,658,658,658,658,556,367,554,18,321,639,553',
'720,367,720,720,720,366,720,365,364,540,18,539,366,794,365,364,658,658',
'658,658,658,658,658,658,658,658,658,658,658,658,329,329,658,658,658',
'973,658,658,720,795,658,797,973,658,658,798,658,720,658,799,658,973',
'658,658,658,658,658,658,658,801,658,658,658,714,363,714,714,714,714',
'714,802,363,755,755,803,658,658,658,658,714,658,435,658,804,362,1022',
'1022,538,435,435,435,362,658,530,435,435,846,435,846,846,846,714,846',
'984,527,984,984,984,522,984,714,714,714,714,941,817,520,435,435,941',
'435,435,435,435,435,759,821,517,824,568,759,568,568,568,846,568,929',
'825,929,929,929,984,929,846,829,830,714,831,435,435,435,435,435,435',
'435,435,435,435,435,435,435,435,353,484,435,435,435,568,435,353,832',
'836,435,837,929,435,568,839,353,840,435,842,435,845,435,435,435,435',
'435,435,435,867,435,516,435,484,867,847,499,484,484,484,484,850,972',
'498,853,435,435,469,435,972,435,812,812,812,812,812,812,468,972,900',
'812,812,435,467,466,812,900,812,812,812,812,812,812,812,445,900,437',
'428,863,812,812,812,812,812,812,812,762,762,812,427,762,762,762,448',
'812,812,424,812,812,812,812,812,812,812,812,812,420,812,812,812,868',
'812,812,869,812,812,812,448,448,448,448,448,448,448,448,448,448,448',
'870,448,448,323,879,448,448,880,812,418,323,812,415,393,812,812,465',
'390,812,323,812,448,387,448,812,448,448,448,448,448,448,448,812,448',
'384,356,354,812,812,812,812,812,812,897,350,349,812,812,465,448,901',
'448,465,465,812,902,339,812,812,812,904,905,812,812,990,990,990,990',
'990,990,336,335,49,990,990,331,325,322,990,49,990,990,990,990,990,990',
'990,930,49,318,934,935,990,990,990,990,990,990,990,316,311,990,940,310',
'307,948,423,990,990,951,990,990,990,990,990,990,990,990,990,952,990',
'990,990,953,990,990,954,990,990,990,423,423,423,423,423,423,423,423',
'423,423,423,692,423,423,746,956,423,423,692,990,301,746,990,692,300',
'990,990,692,966,990,746,990,423,299,423,990,423,423,423,423,423,423',
'423,990,423,297,284,1039,990,990,990,990,990,990,1039,861,281,990,990',
'1039,423,974,861,1039,280,990,977,861,990,990,990,861,978,990,990,813',
'813,813,813,813,813,979,980,971,813,813,981,269,983,813,971,813,813',
'813,813,813,813,813,266,971,234,230,229,813,813,813,813,813,813,813',
'227,207,813,124,90,89,88,661,813,813,1007,813,813,813,813,813,813,813',
'813,813,1008,813,813,813,1010,813,813,87,813,813,813,661,661,661,661',
'661,661,661,661,661,661,661,526,661,661,17,72,661,661,526,813,48,17',
'813,43,40,813,813,526,25,813,17,813,661,1021,661,813,661,661,661,661',
'661,661,661,813,661,1026,1027,224,813,813,813,813,813,813,224,962,1028',
'813,813,1029,661,1030,962,224,1031,813,1032,1035,813,813,813,962,19',
'813,813,823,823,823,823,823,823,16,15,601,823,823,1040,1041,13,823,601',
'823,823,823,823,823,823,823,3,601,1053,707,722,823,823,823,823,823,823',
'823,699,898,823,898,898,898,724,898,823,823,731,823,823,823,823,823',
'823,823,823,823,736,823,823,823,697,823,823,739,823,823,823,487,487',
'487,487,487,487,487,487,487,487,487,1014,487,487,304,694,487,487,1014',
'823,693,304,823,690,687,823,823,1014,,823,304,823,487,,487,823,487,487',
'487,487,487,487,487,823,487,,,305,823,823,823,823,823,823,305,306,,823',
'823,487,487,,306,305,,823,,,823,823,823,306,,823,823,854,854,854,854',
'854,854,,,,854,854,,,,854,,854,854,854,854,854,854,854,682,682,682,682',
'682,854,854,854,854,854,854,854,,1006,854,1006,1006,1006,,1006,854,854',
',854,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,854,854',
'854,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278,278,',
'854,,,854,,,854,854,,,854,,854,278,,278,854,278,278,278,278,278,278',
'278,854,278,,,,854,854,854,854,854,854,,,,854,854,,278,,,,,854,,,854',
'854,854,,,854,854,706,706,706,706,706,706,,,,706,706,,,,706,,706,706',
'706,706,706,706,706,9,9,9,9,9,706,706,706,706,706,706,706,,,706,295',
'295,295,295,295,706,706,,706,706,706,706,706,706,706,706,706,,706,706',
'706,,706,706,,706,706,706,885,885,885,885,885,885,885,885,885,885,885',
',885,885,,,885,885,,706,,,706,,,706,706,,,706,,706,885,,885,706,885',
'885,885,885,885,885,885,706,885,,,,706,706,706,706,706,706,,,,706,706',
',885,,,,,706,,,706,706,706,,,706,706,993,993,993,993,993,993,,,,993',
'993,,,,993,,993,993,993,993,993,993,993,515,515,515,515,515,993,993',
'993,993,993,993,993,,,993,,,,,,993,993,,993,993,993,993,993,993,993',
'993,993,,993,993,993,,993,993,,993,993,993,773,773,773,773,773,773,773',
'773,773,773,773,,773,773,,,773,773,,993,,,993,,,993,993,,,993,,993,773',
',773,993,773,773,773,773,773,773,773,993,773,,,,993,993,993,993,993',
'993,,,,993,993,,773,,,,,993,,,993,993,993,,,993,993,994,994,994,994',
'994,994,,,,994,994,,,,994,,994,994,994,994,994,994,994,,,,,,994,994',
'994,994,994,994,994,,,994,,,,,,994,994,,994,994,994,994,994,994,994',
'994,994,,994,994,994,,994,994,,994,994,994,780,780,780,780,780,780,780',
'780,780,780,780,,780,780,,,780,780,,994,,,994,,,994,994,,,994,,994,780',
',780,994,780,780,780,780,780,780,780,994,780,,,,994,994,994,994,994',
'994,,,,994,994,,780,,,,,994,,,994,994,994,,,994,994,209,209,209,209',
'209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209',
'209,209,209,209,209,,,209,,,,,,209,209,,209,209,209,209,209,209,209',
'209,209,,209,209,209,,209,209,,209,209,209,783,783,783,783,783,783,783',
'783,783,783,783,,783,783,,,783,783,,209,,,209,,,209,209,,,209,,209,783',
',783,209,783,783,783,783,783,783,783,209,783,,,,209,209,209,209,209',
'209,,,,209,209,,783,,,,,209,,,209,209,209,,,209,209,855,855,855,855',
'855,855,,,,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855',
'855,855,855,855,855,,,855,,,,,,855,855,,855,855,855,855,855,855,855',
'855,855,,855,855,855,,855,855,,855,855,855,696,696,696,696,696,696,696',
'696,696,696,696,,696,696,,,696,696,,855,,,855,,,855,855,,,855,,855,696',
',696,855,696,696,696,696,696,696,696,855,696,,,,855,855,855,855,855',
'855,,,,855,855,,696,,,,,855,,,855,855,855,,,855,855,864,864,864,864',
'864,864,,,,864,864,,,,864,,864,864,864,864,864,864,864,,,,,,864,864',
'864,864,864,864,864,,,864,,,,,,864,864,,864,864,864,864,864,864,864',
'864,864,,864,864,864,,864,864,,864,864,864,443,443,443,443,443,443,443',
'443,443,443,443,,443,443,,,443,443,,864,,,864,,,864,864,,,864,,864,443',
',443,864,443,443,443,443,443,443,443,864,443,,,,864,864,864,864,864',
'864,,,,864,864,,443,,,,,864,,,864,864,864,,,864,864,409,409,409,409',
'409,409,,,,409,409,,,,409,,409,409,409,409,409,409,409,,,,,,409,409',
'409,409,409,409,409,,,409,,,,,,409,409,409,409,409,409,409,409,409,409',
'409,409,,409,409,409,,409,409,,409,409,409,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,409,,,409,,,409,409,,,409,,409,24,,24,409,24,24',
'24,24,24,24,24,409,24,,,,409,409,409,409,409,409,,,,409,409,,24,,,,',
'409,,,409,409,409,,,409,409,903,903,903,903,903,903,,,,903,903,,,,903',
',903,903,903,903,903,903,903,,,,,,903,903,903,903,903,903,903,,,903',
',,,,,903,903,,903,903,903,903,903,903,903,903,903,,903,903,903,,903',
'903,,903,903,903,787,787,787,787,787,787,787,787,787,787,787,,787,787',
',,787,787,,903,,,903,,,903,903,,,903,,903,787,,787,903,787,787,787,787',
'787,787,787,903,787,,,,903,903,903,903,903,903,,,,903,903,,787,,,,,903',
',,903,903,903,,,903,903,705,705,705,705,705,705,,,,705,705,,,,705,,705',
'705,705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,',
'705,705,,705,705,705,705,705,705,705,705,705,,705,705,705,,705,705,',
'705,705,705,785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785',
'785,,705,,,705,,,705,705,,,705,,705,785,,785,705,785,785,785,785,785',
'785,785,705,785,,,,705,705,705,705,705,705,,,,705,705,,785,,,,,705,',
',705,705,705,,,705,705,756,756,756,756,756,756,,,,756,756,,,,756,,756',
'756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,,,756,,,,,',
'756,756,,756,756,756,756,756,756,756,756,756,,756,756,756,,756,756,',
'756,756,756,882,882,882,882,882,882,882,882,882,882,882,,882,882,,,882',
'882,,756,,,756,,,756,756,,,756,,756,882,,882,756,882,882,882,882,882',
'882,882,756,882,,,,756,756,756,756,756,756,,,,756,756,,882,,,,,756,',
',756,756,756,,,756,756,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36',
'36,36,36,,36,36,36,,36,36,,36,36,36,536,536,536,536,536,536,536,536',
'536,536,536,,536,536,,,536,536,,36,,,36,,,36,36,,,36,,36,536,,536,36',
'536,536,536,536,536,536,536,36,536,,,,36,36,36,36,36,36,,,,36,36,,536',
',,,,36,,,36,36,36,,,36,36,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,',
',,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2',
'778,778,778,778,778,778,778,778,778,778,778,,778,778,,,778,778,,2,,',
'2,,,2,2,,,2,,2,778,,778,2,778,778,778,778,778,778,778,2,778,,,,2,2,2',
'2,2,2,,,,2,2,,778,,,,,2,,,2,2,2,,,2,2,907,907,907,907,907,907,,,,907',
'907,,,,907,,907,907,907,907,907,907,907,,,,,,907,907,907,907,907,907',
'907,483,,907,,,,,,907,907,,907,907,907,907,907,907,907,907,907,,907',
'907,907,,907,907,,907,907,907,476,483,,,,483,483,483,483,1020,,1020',
'1020,1020,,1020,476,476,,907,,,907,,472,907,907,,,907,,907,476,,476',
'907,476,476,476,476,472,472,476,907,476,,,1020,907,907,907,907,907,907',
',,472,907,907,,472,472,472,472,,907,,,907,907,907,,,907,907,328,328',
'328,328,328,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,',
'328,328,328,328,328,328,328,,,328,,,,,,328,328,,328,328,328,328,328',
'328,328,328,328,,328,328,328,,328,328,,328,328,328,462,462,462,462,462',
'462,462,462,462,462,462,,462,462,,,462,462,,328,,,328,,,328,328,,,328',
',328,462,,462,328,462,462,462,462,462,462,462,328,462,,,,328,328,328',
'328,328,328,,,,328,328,,982,,982,982,982,328,982,,328,328,328,,,328',
'328,937,937,937,937,937,937,,,,937,937,,,,937,,937,937,937,937,937,937',
'937,982,,,,,937,937,937,937,937,937,937,,,937,,,,,,937,937,,937,937',
'937,937,937,937,937,937,937,,937,937,937,,937,937,,937,937,937,463,463',
'463,463,463,463,463,463,463,463,463,,463,463,,,463,463,,937,,,937,,',
'937,937,,,937,,937,463,,463,937,463,463,463,463,463,463,463,937,463',
',,,937,937,937,937,937,937,,,,937,937,,848,,848,848,848,937,848,,937',
'937,937,,,937,937,303,303,303,303,303,303,,,,303,303,,,,303,,303,303',
'303,303,303,303,303,848,,,,,303,303,303,303,303,303,303,,,303,,,,,,303',
'303,,303,303,303,303,303,303,303,303,303,,303,303,303,,303,303,,303',
'303,303,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,303,,,303',
',,303,303,,,303,,303,473,,473,303,473,473,473,473,473,473,473,303,473',
',,,303,303,303,303,303,303,,,,303,303,,,,,,,303,,,303,303,303,,,303',
'303,970,970,970,970,970,970,,,,970,970,,,,970,,970,970,970,970,970,970',
'970,,,,,,970,970,970,970,970,970,970,,,970,,,,,,970,970,,970,970,970',
'970,970,970,970,970,970,,970,970,970,,970,970,,970,970,970,474,,,,,',
',,,,,,,,,,474,474,,970,,,970,,,970,970,,,970,,970,474,,474,970,474,474',
'474,474,,,474,970,474,,,,970,970,970,970,970,970,,,,970,970,,,,,,,970',
',,970,970,970,,,970,970,757,757,757,757,757,757,,,,757,757,,,,757,,757',
'757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,',
'757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,',
'757,757,757,475,,,,,,,,,,,,,,,,475,475,,757,,,757,,,757,757,,,757,,757',
'475,,475,757,475,475,475,475,,,475,757,475,,,,757,757,757,757,757,757',
',,,757,757,,,,,,,757,,,757,757,757,,,757,757,586,586,586,586,586,586',
',,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586',
'586,586,586,,,586,,,,,,586,586,,586,586,586,586,586,586,586,586,586',
',586,586,586,,586,586,,586,586,586,477,,,,,,,,,,,,,,,,477,477,,586,',
',586,,,586,586,,,586,,586,477,,477,586,477,477,477,477,,,477,586,477',
',,,586,586,586,586,586,586,,,,586,586,,,,,,,586,,,586,586,586,,,586',
'586,763,763,763,763,763,763,,,,763,763,,,,763,,763,763,763,763,763,763',
'763,,,,,,763,763,763,763,763,763,763,,,763,,,,,,763,763,,763,763,763',
'763,763,763,763,763,763,,763,763,763,,763,763,,763,763,763,478,478,478',
'478,478,478,478,,,478,478,,,,,,478,478,,763,,,763,,,763,763,,,763,,763',
'478,,478,763,478,478,478,478,478,478,478,763,478,,,,763,763,763,763',
'763,763,,,,763,763,,,,,,,763,,,763,763,763,,,763,763,298,298,298,298',
'298,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298',
'298,298,298,298,298,,,298,,,,,,298,298,,298,298,298,298,298,298,298',
'298,298,,298,298,298,,298,298,,298,298,298,479,479,479,479,479,479,479',
',,479,479,,,,,,479,479,,298,,,298,,,298,298,,,298,,298,479,,479,298',
'479,479,479,479,479,479,479,298,479,,,,298,298,298,298,298,298,,,,298',
'298,,,,,,,298,,,298,298,298,,,298,298,985,985,985,985,985,985,,,,985',
'985,,,,985,,985,985,985,985,985,985,985,,,,,,985,985,985,985,985,985',
'985,,,985,,,,,,985,985,,985,985,985,985,985,985,985,985,985,,985,985',
'985,,985,985,,985,985,985,480,480,480,480,480,480,480,,,480,480,,,,',
',480,480,,985,,,985,,,985,985,,,985,,985,480,,480,985,480,480,480,480',
'480,480,480,985,480,,,,985,985,985,985,985,985,,,,985,985,,,,,,,985',
',,985,985,985,,,985,985,233,233,233,233,233,233,,,,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
'233,233,,233,233,233,233,233,233,233,233,233,,233,233,233,,233,233,',
'233,233,233,481,481,481,481,481,481,481,,,481,481,,,,,,481,481,,233',
',,233,,,233,233,,,233,,233,481,,481,233,481,481,481,481,481,481,481',
'233,481,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233,233',
',,233,233,583,583,583,583,583,583,,,,583,583,,,,583,,583,583,583,583',
'583,583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,583,583,,583',
'583,583,583,583,583,583,583,583,,583,583,583,,583,583,,583,583,583,482',
'482,482,482,482,482,482,,,482,482,,,,,,482,482,,583,,,583,,,583,583',
',,583,,583,482,,482,583,482,482,482,482,482,482,482,583,482,,,,583,583',
'583,583,583,583,,,,583,583,,,,,,,583,,,583,583,583,,,583,583,808,808',
'808,808,808,808,,,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,',
'808,808,808,808,808,808,808,,,808,,,,,,808,808,,808,808,808,808,808',
'808,808,808,808,,808,808,808,,808,808,,808,808,808,485,485,485,485,485',
'485,485,,,485,485,,,,,,485,485,,808,,,808,,,808,808,,,808,,808,485,',
'485,808,485,485,485,485,485,485,485,808,485,,,,808,808,808,808,808,808',
',,,808,808,,,,,,,808,,,808,808,808,,,808,808,718,718,718,,718,,,,718',
'718,,,,718,,718,718,718,718,718,718,718,,,,,,718,718,718,718,718,718',
'718,,,718,,,,,,,718,,,718,718,718,718,718,718,718,718,,718,718,718,',
'718,718,,718,718,718,486,486,486,486,486,486,486,486,,486,486,,,,,,486',
'486,,718,,,718,,,718,718,,,718,,,486,,486,718,486,486,486,486,486,486',
'486,718,486,,,,718,718,718,718,718,718,,,,718,718,,,,,,,718,,,718,718',
'718,,,718,718,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,',
',23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23',
'23,,23,23,,23,23,23,470,,,,,,,,,,,,,,,,470,470,,23,,,23,,,23,23,,,23',
',,470,,470,23,470,470,470,470,,,,23,,,,,23,23,23,23,23,23,,,,23,23,',
',,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32',
'32,32,32,32,32,32,,32,32,,32,32,32,471,,,,,,,,,,,,,,,,471,471,,32,,',
'32,,,32,32,,,32,,32,471,32,471,32,471,471,471,471,,,,32,,,,,32,32,32',
'32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33',
',,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,',
',,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33',
'33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34',
',,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34',
'34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45,45,45',
',45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,',
',45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,',
',,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,',
',,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,',
'46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47,47',
'47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47',
'47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,',
'47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47',
',,47,47,47,,,47,47,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61',
'61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,',
'61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,',
'61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62',
'62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,',
',,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,63',
'63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63',
'63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63',
'63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66,',
',,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,',
',,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,',
',,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66',
'66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,',
',,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70',
'70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70',
'70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70',
',,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70',
'70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,',
',,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,1011,1011',
'1011,,1011,,,,1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011',
',,,,,1011,1011,1011,1011,1011,1011,1011,,,1011,,,,,,,1011,,,1011,1011',
'1011,1011,1011,1011,1011,1011,1011,1011,1011,1011,,1011,1011,,1011,1011',
'1011,,,,,,,,,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011,,1011,,1011,',
'1011,,,,,,,,1011,,,,,1011,1011,1011,1011,1011,1011,,,,1011,1011,,,,',
',,1011,,1011,1011,1011,1011,,,1011,1011,114,114,114,114,114,,,,114,114',
',,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114',
'114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114',
',114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114',
'114,,,114,114,114,,,114,114,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,',
',119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119',
'119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119',
',,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119',
'119,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120,120,120',
',,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120',
'120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120',
',,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120',
',,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121,,121,,,,121',
'121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121',
'121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,',
'121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,',
',121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122,122,,,,,',
',,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122',
'122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122,122,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,216,216',
'216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216',
',216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216',
'216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216',
',,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217,217,,,,217',
',217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217',
',,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217',
'217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,',
',,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217',
',,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218',
'218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218',
'218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,',
',,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218',
'218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219,219,219,,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219',
'219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219',
'219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219',
',,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219',
',,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,',
',220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220',
'221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,',
',221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221',
'221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,',
'221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221',
',,,221,221,221,,,,,,221,,,221,221,221,,,221,221,232,232,232,,232,,,',
'232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232',
'232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232',
',232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,',
',,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,232,232,,,232,232,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239',
',,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239',
'239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
',240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,',
',,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240',
'240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247',
'247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,',
',248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,',
',248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,,260,260,267,267,267,,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267,267',
',267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,',
'267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,',
',,267,,267,267,267,267,,,267,267,273,273,273,,273,,,,273,273,,,,273',
',273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273',
',,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273,273',
',273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273',
',273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273,,273',
'273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276,,276,276,276',
'276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276',
'276,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276,,',
',,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276',
',,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276,,276,276,276,276',
',,276,276,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283',
'283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283',
'283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,',
',,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283',
'283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283,285,285,285,,285',
',,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285',
'285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285,285',
'285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285',
',,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,,285',
',,285,285,285,,,285,285,287,287,287,,287,,,,287,287,,,,287,,287,287',
'287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287',
',,287,287,287,287,287,287,287,287,,287,287,287,,287,287,,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,287,,,',
',287,287,287,287,287,287,,,,287,287,,,,,,,287,,,287,287,287,,,287,287',
'289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,',
',289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289,289',
'289,289,,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,',
'289,,,289,289,,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289,289',
',,,289,289,,,,,,,289,,,289,289,289,,,289,289,290,290,290,,290,,,,290',
'290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290',
'290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290,290,',
'290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,',
',,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290,',
',290,290,290,,,290,290,296,296,296,296,296,,,,296,296,,,,296,,296,296',
'296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,296',
'296,,296,296,296,296,296,296,296,296,296,,296,296,296,,296,296,,296',
'296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,',
',,,,296,,,,,296,296,296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296',
',,296,296,302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302',
'302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302',
'302,302,302,302,,302,302,302,,302,302,,,,302,,,,,,,,,,,,,,,,,,,,302',
',,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302,302,302,302,,,,302',
'302,,,,302,,,302,,,302,302,302,,,302,302,936,936,936,,936,,,,936,936',
',,,936,,936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936',
',,936,,,,,,,936,,,936,936,936,936,936,936,936,936,,936,936,936,,936',
'936,,936,936,936,,,,,,,,,,,,,,,,,,,,936,,,936,,,936,936,,,936,,936,',
',,936,,,,,,,,936,,,,,936,936,936,936,936,936,,,,936,936,,,,,,,936,,',
'936,936,936,,,936,936,319,319,319,,319,,,,319,319,,,,319,,319,319,319',
'319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319',
'319,319,319,319,319,319,319,,319,319,319,,319,319,,,,319,,,,,,,,,,,',
',,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,,319,319,319,319',
'319,319,,,,319,319,,,,,,,319,,,319,319,319,,,319,319,327,327,327,,327',
',,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327',
'327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327',
'327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,327,,327,327',
',,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,',
',,,327,,,327,327,327,,,327,327,911,911,911,,911,,,,911,911,,,,911,,911',
'911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,',
',911,,,911,911,911,911,911,911,911,911,,911,911,911,,911,911,,,,911',
',,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,,,,,,,,,,,,,,,,911,911',
'911,911,911,911,,,,911,911,,,,,,,911,,,911,911,911,,,911,911,346,346',
'346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346',
'346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346',
',346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346',
'346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346,,,,346,346',
',,,,,,346,,,346,346,346,,,346,346,347,347,347,,347,,,,347,347,,,,347',
',347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347',
',,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347,,347,347,,347',
'347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,',
',347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347',
',,347,347,899,899,899,,899,,,,899,899,,,,899,,899,899,899,899,899,899',
'899,,,,,,899,899,899,899,899,899,899,,,899,,,,,,,899,,,899,899,899,899',
'899,899,899,899,,899,899,899,,899,899,,,,899,,,,,,,,,,,,,,,,,,,,899',
',,899,,,899,899,,,899,,,,,,,,,,,,,,,,,,,899,899,899,899,899,899,,,,899',
'899,,,,,,,899,,,899,899,899,,,899,899,359,359,359,,359,,,,359,359,,',
',359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359,',
',359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359,359,,359,359',
',,,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,,,,,,,,,,,,,,,',
',,359,359,359,359,359,359,,,,359,359,,,,,,,359,,,359,359,359,,,359,359',
'361,361,361,,361,,,,361,361,,,,361,,361,361,361,361,361,361,361,,,,',
',361,361,361,361,361,361,361,,,361,,,,,,,361,,,361,361,361,361,361,361',
'361,361,,361,361,361,,361,361,,,,361,,,,,,,,,,,,,,,,,,,,361,,,361,,',
'361,361,,,361,,,,,,,,,,,,,,,,,,,361,361,361,361,361,361,,,,361,361,',
',,,,,361,,,361,361,361,,,361,361,884,884,884,,884,,,,884,884,,,,884',
',884,884,884,884,884,884,884,,,,,,884,884,884,884,884,884,884,,,884',
',,,,,,884,,,884,884,884,884,884,884,884,884,,884,884,884,,884,884,,884',
'884,884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,,,,,884,,,,,,',
',884,,,,,884,884,884,884,884,884,,,,884,884,,,,,,,884,,,884,884,884',
',,884,884,883,883,883,,883,,,,883,883,,,,883,,883,883,883,883,883,883',
'883,,,,,,883,883,883,883,883,883,883,,,883,,,,,,,883,,,883,883,883,883',
'883,883,883,883,883,883,883,883,,883,883,,883,883,883,,,,,,,,,,,,,,',
',,,,,883,,,883,,,883,883,,,883,,,,883,,883,,,,,,,,883,,,,,883,883,883',
'883,883,883,,,,883,883,,,,,,,883,,883,883,883,883,,,883,883,419,419',
'419,,419,,,,419,419,,,,419,,419,419,419,419,419,419,419,,,,,,419,419',
'419,419,419,419,419,,,419,,,,,,,419,,,419,419,419,419,419,419,419,419',
',419,419,419,,419,419,,419,419,419,,,,,,,,,,,,,,,,,,,,419,,,419,,,419',
'419,,,419,,,,,,419,,,,,,,,419,,,,,419,419,419,419,419,419,,,,419,419',
',,,,,,419,,,419,419,419,,,419,419,865,865,865,,865,,,,865,865,,,,865',
',865,865,865,865,865,865,865,,,,,,865,865,865,865,865,865,865,,,865',
',,,,,,865,,,865,865,865,865,865,865,865,865,,865,865,865,,865,865,,865',
'865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,865,,,865,,,,,,865,,,,,,',
',865,,,,,865,865,865,865,865,865,,,,865,865,,,,,,,865,,,865,865,865',
',,865,865,457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457',
'457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457',
'457,457,457,457,457,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,',
',,,,,457,,,457,,,457,457,,,457,,457,,457,,457,,,,,,,,457,,,,,457,457',
'457,457,457,457,,,,457,457,,,,,,,457,,457,457,457,457,,,457,457,459',
'459,459,,459,,,,459,459,,,,459,,459,459,459,459,459,459,459,,,,,,459',
'459,459,459,459,459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459',
'459,,459,459,459,,459,459,,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459',
',,459,459,,,459,,,,,,459,,,,,,,,459,,,,,459,459,459,459,459,459,,,,459',
'459,,,,,,,459,,,459,459,459,,,459,459,460,460,460,,460,,,,460,460,,',
',460,,460,460,460,460,460,460,460,,,,,,460,460,460,460,460,460,460,',
',460,,,,,,,460,,,460,460,460,460,460,460,460,460,,460,460,460,,460,460',
',460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460,,,,,,460,',
',,,,,,460,,,,,460,460,460,460,460,460,,,,460,460,,,,,,,460,,,460,460',
'460,,,460,460,461,461,461,,461,,,,461,461,,,,461,,461,461,461,461,461',
'461,461,,,,,,461,461,461,461,461,461,461,,,461,,,,,,,461,,,461,461,461',
'461,461,461,461,461,,461,461,461,,461,461,,461,461,461,,,,,,,,,,,,,',
',,,,,,461,,,461,,,461,461,,,461,,,,,,461,,,,,,,,461,,,,,461,461,461',
'461,461,461,,,,461,461,,,,,,,461,,,461,461,461,,,461,461,852,852,852',
',852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852,852',
'852,852,852,852,,,852,,,,,,,852,,,852,852,852,852,852,852,852,852,,852',
'852,852,,852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852',
',,852,,,,,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,,,',
',,,852,,,852,852,852,,,852,852,502,502,502,,502,,,,502,502,,,,502,,502',
'502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,',
',502,,,502,502,502,502,502,502,502,502,502,502,502,502,,502,502,,502',
'502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,502,,502,,502',
',,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,502,502',
'502,502,,,502,502,505,505,505,,505,,,,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,,505,505,505,,,,,,',
',,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,505,,505,,,,,,,,505,,,,,505',
'505,505,505,505,505,,,,505,505,,,,,,,505,,505,505,505,505,,,505,505',
'507,507,507,,507,,,,507,507,,,,507,,507,507,507,507,507,507,507,,,,',
',507,507,507,507,507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507',
'507,507,,507,507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507,,',
'507,,,507,507,,,507,,,,,,507,,,,,,,,507,,,,,507,507,507,507,507,507',
',,,507,507,,,,,,,507,,,507,507,507,,,507,507,514,514,514,514,514,,,',
'514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514',
'514,514,,,514,,,,,,514,514,,514,514,514,514,514,514,514,514,514,,514',
'514,514,,514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514',
',,514,,514,,,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514',
',,,,,514,514,,,514,514,514,,,514,514,521,521,521,,521,,,,521,521,,,',
'521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,',
'521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521,,521,521',
',,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,,,,,,,,,,,,,',
',,521,521,521,521,521,521,,,,521,521,,,,,,,521,,,521,521,521,,,521,521',
'523,523,523,,523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,',
',523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523',
'523,523,523,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523',
',,523,,,523,523,,,523,,523,,523,,523,,,,,,,,523,,,,,523,523,523,523',
'523,523,,,,523,523,,,,,,,523,,523,523,523,523,,,523,523,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529',
'529,529,,529,529,,,,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529,,,529',
',,,,,,,,,,,,,,,,,,529,529,529,529,529,529,,,,529,529,,,,,,,529,,,529',
'529,529,,,529,529,532,532,532,,532,,,,532,532,,,,532,,532,532,532,532',
'532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532',
'532,532,532,532,532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,',
',,,,,,,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532',
'532,532,532,532,,,,532,532,,,,,,,532,,,532,532,532,,,532,532,533,533',
'533,,533,,,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533',
'533,533,533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533',
',533,533,533,,533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533',
'533,,,533,,,,,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533,533',
',,,,,,533,,,533,533,533,,,533,533,537,537,537,,537,,,,537,537,,,,537',
',537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,,537',
',,,,,,537,,,537,537,537,537,537,537,537,537,,537,537,537,,537,537,,537',
'537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,,,,537,,,,,,',
',537,,,,,537,537,537,537,537,537,,,,537,537,,,,,,,537,,,537,537,537',
',,537,537,805,805,805,,805,,,,805,805,,,,805,,805,805,805,805,805,805',
'805,,,,,,805,805,805,805,805,805,805,,,805,,,,,,,805,,,805,805,805,805',
'805,805,805,805,,805,805,805,,805,805,,,,805,,,,,,,,,,,,,,,,,,,,805',
',,805,,,805,805,,,805,,,,,,,,,,,,,,,,,,,805,805,805,805,805,805,,,,805',
'805,,,,,,,805,,,805,805,805,,,805,805,793,793,793,,793,,,,793,793,,',
',793,,793,793,793,793,793,793,793,,,,,,793,793,793,793,793,793,793,',
',793,,,,,,,793,,,793,793,793,793,793,793,793,793,,793,793,793,,793,793',
',793,793,793,,,,,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,',
',,,,,,793,,,,,793,793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793',
'793,,,793,793,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543',
'543,543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543',
'543,543,543,543,543,543,543,543,543,,543,543,,543,543,543,,,,,,,,,,',
',,,,,,,,,543,,,543,,,543,543,,,543,,543,,,,543,,,,,,,,543,,,,,543,543',
'543,543,543,543,,,,543,543,,,,,,,543,,543,543,543,543,,,543,543,546',
'546,546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546',
'546,546,546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546',
'546,546,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546',
',,546,546,,,546,,,,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546',
'546,,,,,,,546,,546,546,546,546,,,546,546,791,791,791,,791,,,,791,791',
',,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791',
',,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791,791,791,,791',
'791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791',
',,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791,,,791,791',
'791,,,791,791,790,790,790,,790,,,,790,790,,,,790,,790,790,790,790,790',
'790,790,,,,,,790,790,790,790,790,790,790,,,790,,,,,,,790,,,790,790,790',
'790,790,790,790,790,,790,790,790,,790,790,,790,790,790,,,,,,,,,,,,,',
',,,,,,790,,,790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790,790',
'790,790,790,,,,790,790,,,,,,,790,,,790,790,790,,,790,790,789,789,789',
',789,,,,789,789,,,,789,,789,789,789,789,789,789,789,,,,,,789,789,789',
'789,789,789,789,,,789,,,,,,,789,,,789,789,789,789,789,789,789,789,,789',
'789,789,,789,789,,789,789,789,,,,,,,,,,,,,,,,,,,,789,,,789,,,789,789',
',,789,,,,,,789,,,,,,,,789,,,,,789,789,789,789,789,789,,,,789,789,,,',
',,,789,,,789,789,789,,,789,789,788,788,788,,788,,,,788,788,,,,788,,788',
'788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,',
',788,,,788,788,788,788,788,788,788,788,,788,788,788,,788,788,,788,788',
'788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,788',
',,,,788,788,788,788,788,788,,,,788,788,,,,,,,788,,,788,788,788,,,788',
'788,571,571,571,,571,,,,571,571,,,,571,,571,571,571,571,571,571,571',
',,,,,571,571,571,571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571',
'571,571,571,,571,571,571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571',
',,571,,,571,571,,,571,,,,,,571,,,,,,,,571,,,,,571,571,571,571,571,571',
',,,571,571,,,,,,,571,,,571,571,571,,,571,571,774,774,774,,774,,,,774',
'774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774',
'774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,,774,774,774,',
'774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,',
',,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,',
',774,774,774,,,774,774,772,772,772,,772,,,,772,772,,,,772,,772,772,772',
'772,772,772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772',
'772,772,772,772,772,772,772,,772,772,772,,772,772,,772,772,772,,,,,',
',,,,,,,,,,,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,,,772,,,,,772',
'772,772,772,772,772,,,,772,772,,,,,,,772,,,772,772,772,,,772,772,592',
'592,592,,592,,,,592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592',
'592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592,592,592',
'592,592,592,592,592,,592,592,,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592',
',,592,592,,,592,,592,,592,,592,,,,,,,,592,,,,,592,592,592,592,592,592',
',,,592,592,,,,,,,592,,592,592,592,592,,,592,592,8,8,8,8,8,,,,8,8,,,',
'8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8',
',8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,',
',8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,604,604,604,,604,,,',
'604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604,604,604,604',
'604,604,,,604,,,,,,,604,,,604,604,604,604,604,604,604,604,,604,604,604',
',604,604,,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,604,,,604,',
',,,,604,,,,,,,,604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604',
',,604,604,604,,,604,604,608,608,608,,608,,,,608,608,,,,608,,608,608',
'608,608,608,608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608',
',,608,608,608,608,608,608,608,608,,608,608,608,,608,608,,608,608,608',
',,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,,,608,,,',
',608,608,608,608,608,608,,,,608,608,,,,,,,608,,,608,608,608,,,608,608',
'637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,',
',637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637',
'637,637,,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,',
'637,,,637,637,,,637,,637,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637',
',,,637,637,,,,,,,637,,,637,637,637,,,637,637,638,638,638,,638,,,,638',
'638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638',
'638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,',
'638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,',
',,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,',
',638,638,638,,,638,638,641,641,641,,641,,,,641,641,,,,641,,641,641,641',
'641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641',
'641,641,641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,',
',,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,641,,641,,641,,,,,,,,641',
',,,,641,641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641,641,,',
'641,641,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642',
'642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642,642',
'642,642,642,642,642,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,',
',,,,,642,,,642,,,642,642,,,642,,,,642,,642,,,,,,,,642,,,,,642,642,642',
'642,642,642,,,,642,642,,,,,,,642,,642,642,642,642,,,642,642,643,643',
'643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643',
'643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643',
',643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643',
'643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643',
',,,,,,643,,,643,643,643,,,643,643,644,644,644,,644,,,,644,644,,,,644',
',644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644',
',,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,,644,644,,644',
'644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,',
',644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,,,644,644,644',
',,644,644,649,649,649,,649,,,,649,649,,,,649,,649,649,649,649,649,649',
'649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649',
'649,649,649,649,,649,649,649,,649,649,,649,649,649,,,,,,,,,,,,,,,,,',
',,649,,,649,,,649,649,,,649,,,,,,649,,,,,,,,649,,,,,649,649,649,649',
'649,649,,,,649,649,,,,,,,649,,,649,649,649,,,649,649,650,650,650,,650',
',,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,,650,650,650,650',
'650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650,650,650,,650,650',
'650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650',
',,,,,650,,,,,,,,650,,,,,650,650,650,650,650,650,,,,650,650,,,,,,,650',
',,650,650,650,,,650,650,653,653,653,,653,,,,653,653,,,,653,,653,653',
'653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653',
',,653,653,653,653,653,653,653,653,,653,653,653,,653,653,,653,653,653',
',,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,',
',653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653,,,653,653',
'654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654,654,654,,,,',
',654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654,654,654,654',
'654,654,,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,',
'654,,,654,654,,,654,,,,,,654,,,,,,,,654,,,,,654,654,654,654,654,654',
',,,654,654,,,,,,,654,,,654,654,654,,,654,654,750,750,750,,750,,,,750',
'750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750,750',
'750,,,750,,,,,,,750,,,750,750,750,750,750,750,750,750,750,750,750,750',
',750,750,,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,',
'750,,750,,750,,,,,,,,750,,,,,750,750,750,750,750,750,,,,750,750,,,,',
',,750,,750,750,750,750,,,750,750,678,678,678,,678,,,,678,678,,,,678',
',678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678',
',,,,,,678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,,678',
'678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,',
',678,,,,,678,678,678,678,678,678,,,,678,678,,,,,,,678,,,678,678,678',
',,678,678,681,681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681',
'681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681',
'681,681,681,681,,681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,',
',,681,,,681,,,681,681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681',
'681,681,,,,681,681,,,,,,,681,,,681,681,681,,,681,681,684,684,684,,684',
',,,684,684,,,,684,,684,684,684,684,684,684,684,,,,,,684,684,684,684',
'684,684,684,,,684,,,,,,,684,,,684,684,684,684,684,684,684,684,,684,684',
'684,,684,684,,,,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,',
',,,,,,,,,,,,,,,684,684,684,684,684,684,,,,684,684,,,,,,,684,,,684,684',
'684,,,684,684,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744',
'744,744,,,,,,744,744,744,744,744,744,744,,,744,,,,,,,744,,,744,744,744',
'744,744,744,744,744,,744,744,744,,744,744,,744,744,744,,,,,,,,,,,,,',
',,,,,,744,,,744,,,744,744,,,744,,,,,,744,,,,,,,,744,,,,,744,744,744',
'744,744,744,,,,744,744,,,,,,,744,,,744,744,744,,,744,744,695,695,695',
',695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,,695,695,695',
'695,695,695,695,,,695,,,,,,,695,,,695,695,695,695,695,695,695,695,,695',
'695,695,,695,695,,,,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695',
',,,,,,,,,,,,,,,,,,695,695,695,695,695,695,,,,695,695,,,,,,,695,,,695',
'695,695,,,695,695,738,738,738,,738,,,,738,738,,,,738,,738,738,738,738',
'738,738,738,,,,,,738,738,738,738,738,738,738,,,738,,,,,,,738,,,738,738',
'738,738,738,738,738,738,,738,738,738,,738,738,,738,738,738,,,,,,,,,',
',,,,,,,,,,738,,,738,,,738,738,,,738,,738,,,,738,,,,,,,,738,,,,,738,738',
'738,738,738,738,,,,738,738,,,,,,,738,,,738,738,738,,,738,738,700,700',
'700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700',
'700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700',
',700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700',
'700,,,700,,700,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700',
'700,,,,,,,700,,,700,700,700,59,,700,700,,,,59,59,59,,,59,59,59,712,59',
'712,712,712,712,712,,,,,59,59,59,,,712,,,,,59,59,,59,59,59,59,59,,,',
',,,,,,712,,,,,,,,,712,712,712,712,,59,59,59,59,59,59,59,59,59,59,59',
'59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,712,59,,59,,59,59,59,59,59',
'59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,441,59,,59,,,,441,441,441,,,441',
'441,441,551,441,551,551,551,551,551,,,,441,441,441,441,,,551,,,,,441',
'441,,441,441,441,441,441,,,,,,,,,,551,,,,,,,,,551,551,551,551,,441,441',
'441,441,441,441,441,441,441,441,441,441,441,441,,,441,441,441,,,441',
',,441,,,441,441,,441,551,441,,441,,441,441,441,441,441,441,441,,441',
'441,441,,,,,,,,,,,,,441,441,441,441,440,441,,441,,,,440,440,440,,,440',
'440,440,665,440,665,665,665,665,665,,,,440,440,440,440,,,665,,,,,440',
'440,,440,440,440,440,440,,,,,,,,,,665,,,,,,,,,665,665,665,665,,440,440',
'440,440,440,440,440,440,440,440,440,440,440,440,,,440,440,440,,,440',
',665,440,,,440,440,,440,665,440,,440,,440,440,440,440,440,440,440,,440',
'440,440,,,,,,,,,,,,,440,440,440,440,,440,,440,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11',
'11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12',
'12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12',
'12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,',
'12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,,,,410,410,410,410,410,410,410,410,410,410,',
',,,,410,410,410,410,410,410,410,410,410,,,410,,,,,,,,,410,410,,410,410',
'410,410,410,410,410,,,410,410,,,,410,410,410,410,,,,,,,,,,,,,,410,410',
',410,410,410,410,410,410,410,410,410,410,410,,,410,410,,,,,,,,,,410',
',,,,,,,,410,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74',
'74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,',
',,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74',
',,74,,,,,,,,,,,,,,,,,,,,74,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,,,,634,634,634,634',
'634,634,634,634,634,634,,,,,,634,634,634,634,634,634,634,634,634,,,634',
',,,,,,,,634,634,,634,634,634,634,634,634,634,,,634,634,,,,634,634,634',
'634,,,,,,,,,,,,,,634,634,,634,634,634,634,634,634,634,634,634,634,634',
',,634,634,,,,,,,,,,634,,,,,,,,,634,760,760,760,760,760,760,760,760,760',
'760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,,,,760,760',
'760,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760,760',
'760,,,760,,,,,,,,,760,760,,760,760,760,760,760,760,760,,,760,760,,,',
'760,760,760,760,,,,,,,,,,,,,,760,760,,760,760,760,760,760,760,760,760',
'760,760,760,,,760,,,,,,,,,,,,,,,,,,,,760,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91',
'91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91',
'91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,431,,91,,,,,431,431,431,,,431,431,431,917,431',
'917,917,917,917,917,91,,,431,431,431,,,,917,,,,,431,431,,431,431,431',
'431,431,,,,,,,,,,917,,,,,,,,,917,917,917,917,,431,431,431,431,431,431',
'431,431,431,431,431,431,431,431,,,431,431,431,,,431,,431,431,,,431,431',
',431,917,431,,431,,431,431,431,431,431,431,431,,431,431,431,,,,,,,,',
',,,30,431,431,,431,,431,30,30,30,,,30,30,30,919,30,919,919,919,919,919',
',,,30,30,30,,,,919,,,,,30,30,,30,30,30,30,30,,,,,,,,,,919,,,,,,,,,,',
'919,919,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,',
'30,30,,,30,30,,30,919,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,',
',,,,489,30,30,,30,,30,489,489,489,,,489,489,489,921,489,921,921,921',
'921,921,,,,489,489,,,,,921,,,,,489,489,,489,489,489,489,489,,,923,,923',
'923,923,923,923,921,,,,,,,,,923,,921,921,,31,,,,,,,31,31,31,,489,31',
'31,31,,31,923,489,,,,,489,489,,31,31,923,923,,921,,,,,31,31,,31,31,31',
'31,31,,489,489,,,,,,,,,,,,,489,,,923,,489,,,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31',
'31,31,31,31,31,,31,,31,,,,,,535,535,,,535,,,31,31,,31,,31,535,535,,535',
'535,535,535,535,535,535,,,535,535,,,,535,535,535,535,,,,,,535,,,,,,',
',535,535,,535,535,535,535,535,535,535,535,535,535,535,,606,535,606,606',
'606,606,606,889,,889,889,889,889,889,,,606,,,,,535,,889,,,,,1046,,1046',
'1046,1046,1046,1046,,,,606,606,,,,,1046,889,,606,606,606,606,,,,889',
'889,889,889,,,,,,,,,1046,,,,,,,,,455,455,1046,1046,455,,,,606,,,,,455',
'455,889,455,455,455,455,455,455,455,,,455,455,,,,455,455,455,455,,,1046',
',,455,,,,,,,,455,455,,455,455,455,455,455,455,455,455,455,455,455,,',
'455,,,,,456,456,,,456,,,,,,,,,456,456,455,456,456,456,456,456,456,456',
',,456,456,,,,456,456,456,456,,,,,,456,,,,,,,,456,456,,456,456,456,456',
'456,456,456,456,456,456,456,,946,456,946,946,946,946,946,,,,,,,,,,946',
',,,,456,,,,,,,,,,,,,,,,,946,946,963,963,,,963,,,946,946,946,946,,,963',
'963,,963,963,963,963,963,963,963,,,963,963,,,,963,963,963,963,,,,,,963',
',,,946,,,,963,963,,963,963,963,963,963,963,963,963,963,963,963,,,963',
',,,,1013,1013,,,1013,,,,,,,,,1013,1013,963,1013,1013,1013,1013,1013',
'1013,1013,,,1013,1013,,,,1013,1013,1013,1013,,,,,,1013,,,,,,,,1013,1013',
',1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,,342,1013,342',
'342,342,342,342,1015,,1015,1015,1015,1015,1015,,,342,,,,,1013,,1015',
'894,,894,894,894,894,894,,,,,,,,342,342,894,,,,,1015,,342,342,342,342',
',,,,,1015,1015,,,,,894,,,,,,,,,,,894,894,,,,594,594,,,594,342,,,,,,',
'1015,594,594,,594,594,594,594,594,594,594,,,594,594,,,894,594,594,594',
'594,,,,,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,594',
'594,,,594,,,,,593,593,,,593,,,,,,,,,593,593,594,593,593,593,593,593',
'593,593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593',
'593,593,593,593,593,593,593,593,593,,892,593,892,892,892,892,892,716',
',716,716,716,716,716,,,892,,,,,593,,716,758,,758,758,758,758,758,,,',
',,,,892,,758,,,,,716,,892,892,892,892,,,,,,716,716,,,,,758,,1000,,1000',
'1000,1000,1000,1000,758,758,758,758,,,,263,263,1000,,263,892,,,,,,,716',
'263,263,,263,263,263,263,263,263,263,,1000,263,263,,,758,263,263,263',
'263,,1000,1000,,,,,,,,,,,263,263,,263,263,263,263,263,263,263,263,263',
'263,263,,1002,263,1002,1002,1002,1002,1002,1000,998,,998,998,998,998',
'998,,1002,,,,,263,,,998,,,,,,,,,,,,,,1002,,,,,,,,998,748,748,1002,1002',
'748,,,,,,998,998,,748,748,,748,748,748,748,748,748,748,,,748,748,,,',
'748,748,748,748,,,1002,,,748,,,,,998,,,748,748,,748,748,748,748,748',
'748,748,748,748,748,748,,996,748,996,996,996,996,996,,,,,,,,,,996,,',
',,748,,,,,,,,,,,,,,,,,996,524,524,,,524,,,,996,996,996,996,,524,524',
',524,524,524,524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,',
',,,996,,,524,524,,524,524,524,524,524,524,524,524,524,524,524,,,524',
',,,,525,525,,,525,,,,,,,,,525,525,524,525,525,525,525,525,525,525,,',
'525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525,525',
'525,525,525,525,525,525,525,,,525,,,,,213,213,,,213,,,,,,,,,213,213',
'525,213,213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213',
',,,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,',
',,214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,1012,1012,,,1012,,,,,,,,,1012,1012',
'214,1012,1012,1012,1012,1012,1012,1012,,,1012,1012,,,,1012,1012,1012',
'1012,,,,,,1012,,,,,,,,1012,1012,,1012,1012,1012,1012,1012,1012,1012',
'1012,1012,1012,1012,,,1012,,,,,534,534,,,534,,,,,,,,,534,534,1012,534',
'534,534,534,534,534,534,,,534,534,,,,534,534,534,534,,,,,,534,,,,,,',
',534,534,,534,534,534,534,534,534,534,534,534,534,534,,,534,,,,,749',
'749,,,749,,,,,,,,,749,749,534,749,749,749,749,749,749,749,,,749,749',
',,,749,749,749,749,,,,,,749,,,,,,,,749,749,,749,749,749,749,749,749',
'749,749,749,749,749,,,749,,,,,,,,,,,,,,,,,,,,749' ]
        racc_action_check = arr = ::Array.new(26514, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    65,  3040,  1231,   nil,   317,   nil,   nil, 20413,  1474,
   nil, 23743, 23876,  1109,   nil,  1072,  1127,  1069,   439,  1062,
   517,   nil,   -70,  5153,  2335,  1134,   nil,   243,   nil,   158,
 24778, 24970,  5293,  5433,  5573,   nil,  2899,  5713,  5853,   nil,
  1028,   407,   355,  1101,   185,  5993,  6133,  6273,  1027,   856,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23351,
   nil,  6413,  6553,  6693,   -19,   nil,  6833,  6973,   nil,   nil,
  7113,  7253,  1065,   nil, 24142,   nil,   nil,   nil,   nil,   nil,
   -63,   nil,   nil,   nil,   nil,   nil,   nil,   999,   978,   977,
   976, 24541,   nil,   nil,   nil,   nil,   nil,   nil,   264,   nil,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7533,   nil,   nil,   nil,   nil,  7673,
  7813,  7953,  8093,  8233,   993,   nil,   240,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   974,   nil,  1912,
  8373,  8513,  8653, 26107, 26175,   nil,  8793,  8933,  9073,  9213,
  9353,  9493,   nil,   nil,  1102,   342,   202,  1047,   111,   951,
  1006,   nil,  9633,  4591,  1002,  9773,  9913, 10053, 10193, 10333,
 10473, 10613, 10753, 10893, 11033, 11173, 11313, 11453, 11593, 11733,
 11873, 12013, 12153, 12293, 12433, 12573, 12713, 12853, 12993, 13133,
 13273,   nil,   nil, 25761,   nil,   nil,   993, 13413,   nil,   989,
   nil,   nil,   nil, 13553,   nil,   nil, 13693,   nil,  1348,   nil,
   927,   919,   nil, 13833,   950, 13973,   nil, 14113,   nil, 14253,
 14393,   nil,   nil,   -82,   nil,  1489, 14533,   894,  4309,   899,
   925,   883, 14673,  3604,  1210,  1243,  1251,   911,   -40,   nil,
   875,   836,   -10,   nil,   nil,   nil,   871,   127,   822, 14953,
   nil,   426,   872,   787,   nil,   871,   nil, 15093,  3322,   566,
   nil,   846,   nil,   414,  -104,   838,   819,   nil,   291,   830,
   nil,   nil, 25475,   505,    23,    -9, 15373, 15513,   297,   891,
   775,   -19,    34,   656,   843,    28,   873,   nil,   nil, 15793,
   nil, 15933,   578,   558,   502,   501,   499,   488,   171,   474,
   466,   nil,   356,   nil,   nil,   nil,   nil,   nil,   304,   nil,
   394,   nil,   260,   nil,   773,   370,   nil,   761,   389,   nil,
   756,   -42,   nil,   752,   195,   nil,   334,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2335,
 24009,   nil,   nil,   nil,   nil,   761,   nil,   nil,   742, 16353,
   711,   nil,   nil,   925,   704,   nil,   nil,   694,   682,   402,
   395, 24653,   nil,   nil,   nil,   653,   396,   720,   nil,   nil,
 23611, 23481,   nil,  2194,   nil,   665,   nil,   nil,   784,   nil,
   nil,   nil,   nil,   156,   nil, 25175, 25243, 16633,   259, 16773,
 16913, 17053,  3322,  3463,   347,   811,   731,   730,   724,   714,
  5153,  5293,  3205,  3604,  3745,  3886,  3181,  4027,  4168,  4309,
  4450,  4591,  4732,  3150,   668,  4873,  5013,  1207,   112, 24903,
   nil,   nil,   nil,   nil,   nil,   nil,   -45,   -52,   651,   644,
   nil,   nil, 17333,   nil,   nil, 17473,   nil, 17613,   nil,   257,
   nil,   nil,   nil,   nil, 17753,  1615,   639,   570,   nil,   nil,
   559, 17893,   554, 18033, 25971, 26039,  1066,   586,   nil, 18173,
   536,   nil, 18313, 18453, 26311, 25038,  2899, 18593,   652,   574,
   455,   nil,   nil, 19013,   nil,   nil, 19153,   nil,   nil,   nil,
     3, 23445,   nil,   442,   438,   nil,   436,   403,   391,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   363,   650,   nil,
   nil, 19853,   nil,   nil,   nil,   445,   nil,   nil,   nil,   437,
   nil,   nil,   426,  4732,   446,   nil,  4027,    60,    64,   431,
   422,   nil, 20273, 25621, 25553,    35,   nil,   328,   172,   177,
   nil,  1138,   nil,    16, 20553,   nil, 25100,   nil, 20693,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   164,   nil,   nil,   294,   nil,   nil,   nil,   226,   nil,   nil,
   200,   nil,   206,   nil, 24275,   nil,   167, 20833, 20973,   427,
   192, 21113, 21253, 21393, 21533,   182,   nil,   nil,   nil, 21673,
 21813,   154,   nil, 21953, 22093,   nil,   -83,   166,   521,   132,
    96,  1066,    68,   nil,   nil, 23575,   nil,   nil,    87,   169,
   -54,   nil,   nil,   nil,   nil,   -31,   nil,     4, 22373,   nil,
   nil, 22513,  1333,   -47, 22653,   -95,   nil,  1172,     9,    27,
  1207,   140,   925,  1204,  1160, 22933,  2053,  1200,   148,  1229,
 23213,   nil,   nil,   333,   nil,  2617,  1489,  1108,   344,   nil,
   nil,   418, 23315,   nil,   584,   nil, 25690,   nil,  5013,   nil,
   521,   nil,  1106,   332,  1123,   nil,   nil,   nil,   nil,   200,
   nil,  1239,   nil,   nil,   nil,   nil,  1254,   nil, 23073,  1144,
    -5,     8,    22,   154, 22793,   nil,   928,   nil, 25870, 26379,
 22233,   nil,   nil,   nil,   196,   608,  2758,  3886, 25707,   571,
 24408,   143,   767,  4168,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   231, 20133,  1630, 19993,   nil,   331,   nil,  3040,   nil,
  1771,   nil,   nil,  1912,   nil,  2617,   nil,  2476, 19713, 19573,
 19433, 19293,   -77, 18873,   456,   482,   nil,   484,   488,   492,
   nil,   522,   516,   515,   512, 18733,   nil,   nil,  4873,   nil,
   nil,   nil,   784,  1066,   nil,   nil,   nil,   558,   217,   nil,
   nil,   690,   nil,  1207,   571,   621,   nil,   nil,   nil,   603,
   708,   593,   613,   nil,   nil,   nil,   614,   616,   nil,   620,
   622,   nil,   624,   nil,   nil,   629,   617,   640,  3539,   nil,
   766,   nil, 17193,   769,  1348,  2053,   nil,   -10,     5,    24,
   272,   969,   nil,   686,  2194, 16493,   nil,   637,   835,   838,
   736,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   753,
   740,   nil,  2758, 16213, 16073,  1489,   352,   nil,   nil, 25107,
   nil,   nil, 25683,   nil, 25499,   nil,   nil,   796,  1193, 15653,
   715,   857,   908,  2476,   809,   914,   nil,  3181,   nil,   nil,
    35, 15233,   nil,   nil,   nil,   nil,   nil, 24617,   nil, 24742,
   nil, 24867,   nil, 24898,   nil,   nil,   nil,   nil,   259,   657,
   820,   nil,   -11,   nil,   943,   944, 14813,  3463,   nil,   nil,
   955,   560,   nil,   nil,   nil,   nil, 25305,   nil,   838,   nil,
   nil,   842,   852,   856,   859,   nil,   878,   nil,   272,   nil,
   nil,   nil,  1110, 25345,   nil,   nil,   907,   nil,   nil,   nil,
  3745,   997,   698,   529,   998,   230,   nil,   929,   935,   944,
   945,   949,  3398,   951,   624,  4450,   nil,   nil,   nil,   360,
   925,   nil,   nil,  1630,  1771,   nil, 25932,   nil, 25831,   nil,
 25747,   nil, 25823,   nil,   nil,   nil,  1334,  1022,  1032,   nil,
  1119,  7393, 26243, 25413,  1207, 25482,   nil,   nil,   nil,   nil,
  3206,  1037,   644,   nil,   nil,   nil,  1169,  1170,  1180,  1063,
  1065,  1068,  1070,   nil,   nil,  1074,    51,    36,    -1,   961,
  1090,  1091,   nil,   nil,   nil,   nil, 25128,   nil,   nil,   nil,
   nil,    50,   nil,  1104,   nil ]

racc_action_default = [
    -1,  -625,  -624,  -625,    -2,  -611,    -4,    -5,  -625,    -8,
    -9,  -625,  -625,  -625,   -29,  -625,  -625,  -625,  -280,  -625,
   -40,   -43,  -613,  -625,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -624,   -73,   -81,   -83,
  -625,  -514,  -515,  -625,  -625,  -625,  -625,  -625,  -613,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -613,  -624,  -624,  -300,  -403,  -625,  -625,  -305,  -308,
  -611,  -625,  -316,  -323,  -625,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -624,  -453,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1055,    -3,  -612,  -620,  -621,  -622,    -7,  -625,
  -625,  -625,  -625,  -625,  -625,   -17,  -625,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -624,
  -625,  -625,  -624,  -625,  -625,  -610,  -625,  -625,  -625,  -625,
  -625,  -613,  -614,   -47,  -625,  -514,  -515,  -625,  -280,  -625,
  -625,  -230,  -625,  -624,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -409,  -412,  -625,  -608,  -609,   -58,  -625,  -299,  -625,
  -426,  -429,   -64,  -624,  -423,   -65,  -613,   -66,  -239,  -252,
  -624,  -624,  -256,  -625,  -262,  -625,  -624,  -490,  -591,  -625,
  -625,   -67,   -68,  -611,   -13,   -14,  -625,   -71,  -624,  -613,
  -625,   -74,   -77,  -624,   -89,   -90,  -625,  -625,   -97,  -292,
  -295,  -613,  -416,  -331,  -332,  -335,  -424,  -625,   -79,  -625,
   -85,  -289,  -497,  -625,  -215,  -216,  -231,  -625,  -624,  -285,
  -284,  -625,  -240,  -617,  -617,  -625,  -625,  -589,  -617,  -625,
  -301,  -302,  -546,   -49,  -625,  -625,  -625,  -625,  -611,  -625,
  -612,  -514,  -515,  -625,  -625,  -280,  -625,  -356,  -357,  -625,
  -319,  -625,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,
  -187,  -326,  -625,  -514,  -515,  -586,  -587,  -451,  -625,  -474,
  -625,  -476,  -625,  -478,  -625,  -625,  -458,  -625,  -625,  -464,
  -625,  -625,  -470,  -625,  -625,  -472,  -625,  -489,  -491,  -492,
  -493,  -494,    -6,  -623,   -23,   -24,   -25,   -26,   -27,  -624,
  -625,   -19,   -20,   -21,  -122,  -625,   -30,   -39,  -267,  -625,
  -625,  -266,   -31,  -197,  -613,  -247,  -248,  -624,  -624,  -601,
  -602,  -257,  -421,  -603,  -604,  -602,  -601,  -257,  -420,  -422,
  -603,  -604,   -37,  -205,   -38,  -625,   -41,   -42,  -195,  -262,
   -44,   -45,   -46,  -613,  -298,  -625,  -625,  -624,  -289,  -625,
  -625,  -625,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -232,  -233,  -234,  -235,  -613,  -624,  -257,
  -601,  -602,   -54,   -59,  -258,  -417,  -624,  -624,  -613,  -613,
  -294,  -253,  -625,  -261,  -254,  -625,  -259,  -625,  -263,  -625,
  -596,  -594,  -597,   -12,  -612,   -16,  -613,   -70,  -287,   -86,
   -75,  -625,  -613,  -624,  -625,  -625,   -96,  -625,  -497,  -625,
   -82,   -87,  -625,  -625,  -625,  -625,  -236,  -625,  -437,  -625,
  -613,  -615,  -241,  -619,  -618,  -243,  -619,  -290,  -291,  -590,
  -625,  -546,  -406,  -585,  -585,  -529,  -531,  -531,  -531,  -545,
  -547,  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -625,  -556,
  -558,  -560,  -565,  -567,  -568,  -570,  -575,  -577,  -578,  -580,
  -581,  -582,  -625,  -624,  -347,  -348,  -624,  -625,  -625,  -625,
  -625,  -432,  -624,  -625,  -625,  -289,  -313,  -107,  -108,  -625,
  -110,  -625,  -280,  -625,  -625,  -324,  -546,  -328,  -625,  -452,
  -475,  -480,  -481,  -483,  -454,  -477,  -455,  -479,  -456,  -457,
  -625,  -460,  -462,  -625,  -463,  -466,  -467,  -625,  -468,  -469,
  -625,  -495,  -625,   -18,  -625,   -28,  -270,  -625,  -625,  -425,
  -625,  -249,  -251,  -625,  -625,   -60,  -245,  -246,  -418,  -625,
  -625,   -62,  -419,  -625,  -625,  -297,  -601,  -602,  -601,  -602,
  -613,  -195,  -625,  -392,  -393,  -613,  -395,  -410,   -53,  -413,
  -624,  -427,  -430,  -244,  -293,  -624,  -260,  -264,  -625,  -592,
  -593,  -625,   -15,   -72,  -625,   -78,   -84,  -613,  -601,  -602,
  -624,   -93,   -95,  -625,   -80,  -625,  -204,  -214,  -613,  -624,
  -624,  -283,  -286,  -617,  -404,  -624,  -624,  -613,  -625,  -527,
  -528,  -625,  -625,  -538,  -625,  -541,  -625,  -543,  -625,  -358,
  -625,  -360,  -362,  -369,  -613,  -559,  -569,  -579,  -583,  -624,
  -349,  -624,  -306,  -350,  -351,  -309,  -625,  -312,  -625,  -613,
  -601,  -602,  -605,  -288,  -625,  -107,  -108,  -109,  -625,  -625,
  -624,  -317,  -520,  -521,  -625,  -320,  -624,  -624,  -546,  -625,
  -625,  -613,  -625,  -624,  -459,  -461,  -465,  -471,  -473,   -10,
  -123,  -268,  -625,  -198,  -625,  -616,  -624,   -33,  -200,   -34,
  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -625,  -625,
  -625,  -625,  -425,  -625,  -585,  -585,  -374,  -624,  -624,  -624,
  -391,  -625,  -613,  -397,  -554,  -562,  -563,  -573,  -624,  -415,
  -414,   -55,  -624,  -624,  -255,  -265,  -595,   -76,   -91,   -88,
  -296,  -624,  -354,  -624,  -438,  -624,  -439,  -440,  -242,  -625,
  -625,  -613,  -585,  -566,  -584,  -530,  -531,  -531,  -557,  -531,
  -531,  -576,  -531,  -554,  -571,  -613,  -625,  -367,  -625,  -555,
  -625,  -352,  -625,  -625,  -624,  -624,  -311,  -625,  -425,  -625,
  -107,  -108,  -111,  -613,  -624,  -625,  -523,  -625,  -625,  -625,
  -613,  -525,  -329,  -588,  -482,  -485,  -486,  -487,  -488,  -625,
  -269,   -32,  -199,  -250,  -625,  -237,  -625,  -372,  -373,  -382,
  -376,  -384,  -625,  -387,  -625,  -389,  -394,  -625,  -625,  -625,
  -561,  -625,  -625,  -624,  -625,  -625,   -11,  -624,  -444,  -355,
  -625,  -625,  -442,  -407,  -408,  -405,  -526,  -625,  -534,  -625,
  -536,  -625,  -539,  -625,  -542,  -544,  -359,  -361,  -365,  -625,
  -370,  -303,  -625,  -304,  -625,  -625,  -625,  -624,  -314,  -425,
  -625,  -625,  -321,  -325,  -327,  -524,  -546,  -484,  -585,  -564,
  -375,  -624,  -624,  -624,  -624,  -574,  -624,  -396,  -613,  -399,
  -401,  -402,  -572,  -625,  -289,  -411,  -625,  -428,  -431,  -443,
  -624,   -98,   -99,  -625,  -625,  -106,  -441,  -531,  -531,  -531,
  -531,  -363,  -625,  -368,  -625,  -624,  -307,  -310,  -264,  -624,
  -624,  -318,  -522,  -624,  -624,  -371,  -625,  -379,  -625,  -381,
  -625,  -385,  -625,  -388,  -390,  -398,  -625,  -288,  -605,   -56,
  -437,  -624,  -625,  -625,  -105,  -625,  -532,  -535,  -537,  -540,
  -625,  -366,  -624,  -433,  -434,  -435,  -625,  -625,  -625,  -624,
  -624,  -624,  -624,  -400,  -436,  -613,  -601,  -602,  -605,  -104,
  -531,  -364,  -353,  -315,  -322,  -330,  -625,  -377,  -380,  -383,
  -386,  -425,  -533,  -624,  -378 ]

clist = [
'6,220,213,371,262,424,340,279,279,279,133,133,539,130,130,590,504,280',
'280,280,398,431,437,9,699,447,421,327,679,9,330,117,223,444,125,208',
'583,586,559,263,135,135,4,676,301,114,676,333,315,315,757,850,798,299',
'344,345,552,318,348,724,332,337,709,710,838,113,498,16,747,679,821,489',
'961,16,841,927,130,493,322,378,118,379,315,381,383,386,389,392,395,381',
'542,545,801,130,955,549,117,297,266,272,275,16,853,639,530,380,667,404',
'405,406,407,396,802,959,671,672,274,732,735,906,958,277,291,292,620',
'550,603,623,605,704,349,342,124,930,831,9,488,808,281,281,281,496,812',
'497,408,813,1023,738,615,825,617,910,377,621,382,385,621,388,391,799',
'394,874,762,504,615,679,763,397,334,338,719,865,836,2,833,949,608,634',
'1,16,961,335,676,676,669,375,402,279,16,567,454,336,903,341,670,420',
'356,751,955,372,328,540,420,346,854,347,837,855,839,455,425,845,744',
'927,983,990,441,862,359,416,422,1033,864,604,867,442,446,993,29,897',
'361,756,606,760,29,946,410,800,417,358,207,838,279,,,500,,559,279,29',
'660,279,280,,,736,,,29,29,29,280,29,431,437,707,,1021,517,,,425,,,16',
'838,951,841,503,503,,,509,,379,,,29,811,,527,524,29,29,,,29,,16,432',
',,559,887,888,1041,685,,534,,,,,315,694,516,687,515,329,117,522,520',
'719,343,343,847,531,343,,,315,,690,514,587,588,,,593,792,29,916,690',
',1042,29,29,29,29,29,,528,,513,838,495,494,,,297,1024,16,,16,297,499',
'818,,16,,315,,315,281,117,,343,343,343,343,,,281,952,607,739,953,,765',
'938,994,765,,16,,,,,567,,,690,274,640,,,679,6,589,133,814,977,130,,',
',,,858,,,,655,,676,503,503,,,646,9,,279,633,,29,29,29,29,135,868,869',
'29,29,29,29,29,29,719,632,719,,,567,559,425,781,995,441,29,828,447,786',
',,,662,673,674,817,,,870,,16,450,451,452,453,,,,,,,683,663,646,,,1029',
'686,,29,663,663,1034,,279,29,645,,29,,,,651,,,702,,814,804,,,,826,647',
',,,425,29,652,29,,,441,531,29,981,719,315,,,682,531,441,,,315,432,939',
'863,,,,,940,937,,,,,29,,,690,668,567,,567,,,,,,279,,,,,29,29,,647,,',
',16,,,,,719,,719,,,,425,,,,,,441,,,,19,,970,343,343,567,19,,675,,432',
'810,,733,733,,,,,,432,,719,,985,,,,,752,,,,133,19,29,130,,,640,17,,559',
',803,,17,809,16,703,,16,777,779,,1025,,770,782,784,,224,446,135,,,640',
'820,663,357,224,224,224,503,17,306,306,1027,1028,432,,,,29,,420,803',
',646,872,,531,,849,,315,,822,827,224,,,819,,224,224,315,,224,353,,,19',
',1051,,,,640,,,19,,857,,279,,822,,822,873,,859,,,,804,,,804,29,,,,,',
',776,425,29,441,,17,,,,,224,224,224,224,17,130,29,567,,,,,,16,16,,,503',
',647,,,652,866,803,,881,795,871,,,,,,,,567,698,890,890,890,,,915,,,',
'1035,,,19,,29,,,29,,926,445,315,,29,908,690,16,16,912,,,,832,16,,29',
'19,,,29,432,,,,945,932,,640,804,713,715,717,17,224,224,224,,,941,224',
'224,224,224,224,224,,755,,,,761,,,,29,29,17,,16,,29,29,16,16,29,,,,',
',733,,,16,300,,,,942,19,,19,,,,,19,,,,224,,,,,315,224,,,224,,,,,16,16',
'805,315,,,,19,,,16,,29,29,,17,,17,1005,,797,306,17,,,,,,,,890,890,890',
'890,,890,,,306,1012,,,,,,,441,17,992,16,,29,,16,,,,29,,796,,,,29,29',
'224,224,279,822,840,29,842,,,,,,,601,,601,29,343,16,,,948,,19,795,425',
',795,,795,640,441,,,,,822,834,,,834,,,890,890,890,890,,,,29,16,,,29',
'29,,,,,,,,17,,29,16,890,,,,16,,,16,16,,,415,,,,42,,,,,,42,,,,,,29,,29',
'29,,,,,300,,,,29,29,,,,224,,,432,,42,305,305,,,,,,,343,,,19,,,795,,795',
',795,,795,343,,918,920,,922,924,29,925,,,29,,352,,,374,,,,805,,,805',
',,805,,805,300,17,,,,300,,,306,,224,,29,,795,954,306,956,,891,893,895',
',,224,,,42,,,19,,,19,,,42,,,,978,,979,,980,29,,,834,,,796,,,796,,796',
',,,29,,,,,29,,,29,29,17,,,17,,,18,,,224,,,18,,,,29,,,,,224,,,,224,,',
',,445,805,,805,,805,,805,,,18,308,308,,1016,1017,1018,1019,,1030,,1031',
'42,1032,,,,,,,224,224,,339,,,224,224,1040,,224,,,,,355,42,,,,,805,19',
'19,,,,,796,,796,,796,,796,,,,,1053,,306,,997,999,1001,1003,1052,1004',
',,,306,,,,,,18,,,,17,17,,,,18,,,,,,19,19,,,,796,42,19,42,,,,305,42,',
',,,,,,,,,,,,,224,305,,,,,224,,,,42,,17,17,,,,,,17,1047,1048,1049,1050',
'19,,,,19,19,224,,,,,,,,,19,,374,,374,1054,,,,,418,,,18,,729,,449,731',
',,,900,,,17,,,,17,17,19,19,,,,,18,,,17,19,,,,,,,,,,,42,,,,,41,,,,,,41',
',,,,,224,,17,17,,,,,,,,19,17,224,506,19,508,,510,976,511,512,41,304',
'304,,,,,,,18,,18,,,,308,18,,,,,,,19,,962,,,,17,,,308,17,,351,,973,373',
',,18,,,,,829,830,,,,,,,,,19,,,,,,,17,,,42,,,,,19,602,305,602,,19,,41',
'19,19,305,,,,,,41,,,,,,,,,17,,,,,,,,879,,,,,,,17,,,,,17,,,17,17,,18',
',,,,,636,,,,,,,42,,224,42,,,,,,,,,,,902,,,,904,905,,,,,,,,,,909,,,,',
',,,,41,,,,,,,,,,,,,,,,,,,,,,934,935,41,,,,,,,,,,,,,,677,,,339,,680,',
',,,,,,,,,18,,,,,,,308,,305,,,,,,308,,966,,,305,969,,,,677,,,339,,42',
'42,,41,,41,,,,304,41,,,,,,,,,,,989,,725,,,304,,,,,,,,,41,,,,18,,,18',
',,,,,,,,42,42,,1010,,,,42,,,,,,,,373,,373,1022,,,,,1026,,,,,,,,,,,,',
',,771,,,,677,339,,,,,,374,,,42,,,,42,42,,,,,,,,41,,42,,,,,,,,,,,,815',
',,816,,,,,,,308,,,,,,,,,42,42,308,824,,,,,,,42,,18,18,,,,,,,,844,,,',
',,,,,,,,,,,,,,,,449,,,,374,,,,42,,,,42,,,,972,,,,,,18,18,,,,,878,18',
',41,,,880,,,,304,,,,42,,,,304,,,,,,,,,,,,,,,,,,,,,,,,,602,,,18,42,,',
'18,18,,,,231,,,,,,18,42,,278,278,278,42,,,42,42,41,,,41,,324,325,326',
',,,,,,,,,,,,18,18,278,278,,,,,,,18,,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,',
',,,,602,,,,18,,,,18,,,,975,,,,,,,,,,,,,,,,,,,,,988,,,304,,18,,,,,,,',
',304,,,,,,,,,,41,41,,,,,,,,,,,,,18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,',
',,,,,,,,278,423,278,41,41,,443,448,,,41,,,,,,,,,,,,231,,,462,463,464',
'465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481',
'482,483,484,485,486,487,,373,,,41,,278,,41,41,,,278,,,278,,,,41,,,278',
',278,,278,,278,278,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,,,,41,,,,,,536,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,373,,,,41,,,,41,,,,971,,,,,,,,,,,,,,,,,,,,',
',,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,41,,,,,,,,,,,,,,,41,,,,,41',
',,41,41,,,,,,278,,443,661,423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,278,,,278,,278,,,,,,,,,,,,,,,,278,,,,,,,,,696,697,,,,,,,,,,278,,,278',
',,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,278,773,,,278,278,778,780,,,,,783,785,,',
'661,787,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,278,,,,,',
',,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,',
',,,,,,,278,,882,,,,,,,,,,,,,,778,780,785,783,,885,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,278,882,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,278' ]
        racc_goto_table = arr = ::Array.new(3031, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,27,60,153,25,89,36,36,36,64,64,10,61,61,95,76,71,71,71,60,40,40',
'9,13,20,30,34,198,9,51,98,22,30,17,17,92,92,183,39,65,65,2,77,53,8,77',
'71,68,68,99,93,142,50,19,19,152,54,19,132,6,6,137,137,188,5,25,23,58',
'198,14,40,148,23,193,130,61,42,67,169,7,6,68,6,6,6,6,6,6,6,72,72,145',
'61,194,72,98,49,41,41,41,23,14,26,55,170,43,19,19,19,19,170,140,147',
'43,43,74,94,94,15,146,48,48,48,173,149,59,173,59,150,5,151,11,133,145',
'9,154,155,73,73,73,158,159,160,9,161,162,163,174,164,174,165,168,174',
'171,172,174,175,176,143,177,178,179,76,174,198,180,181,73,73,131,182',
'186,3,190,191,197,66,1,23,148,70,77,77,75,87,7,36,23,187,51,88,46,91',
'45,71,96,97,194,100,101,102,71,103,104,105,143,106,143,27,6,132,107',
'130,133,108,61,58,109,22,22,147,110,111,112,22,22,113,44,145,114,115',
'116,117,44,118,33,134,31,21,18,188,36,,,51,,183,36,44,25,36,71,,,95',
',,44,44,44,71,44,40,40,152,,133,51,,,6,,,23,188,142,193,6,6,,,169,,6',
',,44,43,,34,27,44,44,,,44,,23,74,,,183,137,137,133,55,,27,,,,,68,55',
'50,25,9,32,98,50,54,131,32,32,131,53,32,,,68,,40,8,19,19,,,27,26,44',
'137,40,,93,44,44,44,44,44,,67,,5,188,74,48,,,49,14,23,,23,49,48,26,',
'23,,68,,68,73,98,,32,32,32,32,,,73,143,39,25,143,,174,94,99,174,,23',
',,,,187,,,40,74,34,,,198,6,5,64,76,143,61,,,,,,26,,,,51,,77,6,6,,,6',
'9,,36,17,,44,44,44,44,65,10,10,44,44,44,44,44,44,131,2,131,,,187,183',
'6,42,137,61,44,72,20,42,,,,34,51,51,55,,,152,,23,32,32,32,32,,,,,,,51',
'6,6,,,143,51,,44,6,6,13,,36,44,41,,44,,,,41,,,51,,76,187,,,,30,74,,',
',6,44,74,44,,,61,53,44,131,131,68,,,9,53,61,,,68,74,26,25,,,,,10,92',
',,,,44,,,40,41,187,,187,,,,,,36,,,,,44,44,,74,,,,23,,,,,131,,131,,,',
'6,,,,,,61,,,,29,,92,32,32,187,29,,73,,74,89,,98,98,,,,,,74,,131,,92',
',,,,98,,,,64,29,44,61,,,34,24,,183,,34,,24,153,23,73,,23,22,22,,95,',
'17,22,22,,24,22,65,,,34,51,6,29,24,24,24,6,24,24,24,10,10,74,,,,44,',
'71,34,,6,60,,53,,51,,68,,6,6,24,,,53,,24,24,68,,24,24,,,29,,26,,,,34',
',,29,,71,,36,,6,,6,51,,19,,,,187,,,187,44,,,,,,,73,6,44,61,,24,,,,,24',
'24,24,24,24,61,44,187,,,,,,23,23,,,6,,74,,,74,98,34,,22,136,98,,,,,',
',,187,32,6,6,6,,,51,,,,25,,,29,,44,,,44,,51,29,68,,44,6,40,23,23,6,',
',,136,23,,44,29,,,44,74,,,,51,19,,34,187,185,185,185,24,24,24,24,,,19',
'24,24,24,24,24,24,,32,,,,32,,,,44,44,24,,23,,44,44,23,23,44,,,,,,98',
',,23,12,,,,98,29,,29,,,,,29,,,,24,,,,,68,24,,,24,,,,,23,23,189,68,,',
',29,,,23,,44,44,,24,,24,34,,141,24,24,,,,,,,,6,6,6,6,,6,,,24,27,,,,',
',,61,24,98,23,,44,,23,,,,44,,138,,,,44,44,24,24,36,6,141,44,141,,,,',
',,24,,24,44,32,23,,,136,,29,136,6,,136,,136,34,61,,,,,6,138,,,138,,',
'6,6,6,6,,,,44,23,,,44,44,,,,,,,,24,,44,23,6,,,,23,,,23,23,,,12,,,,57',
',,,,,57,,,,,,44,,44,44,,,,,12,,,,44,44,,,,24,,,74,,57,57,57,,,,,,,32',
',,29,,,136,,136,,136,,136,32,,185,185,,185,185,44,185,,,44,,57,,,57',
',,,189,,,189,,,189,,189,12,24,,,,12,,,24,,24,,44,,136,141,24,141,,139',
'139,139,,,24,,,57,,,29,,,29,,,57,,,,141,,141,,141,44,,,138,,,138,,,138',
',138,,,,44,,,,,44,,,44,44,24,,,24,,,28,,,24,,,28,,,,44,,,,,24,,,,24',
',,,,29,189,,189,,189,,189,,,28,28,28,,185,185,185,185,,141,,141,57,141',
',,,,,,24,24,,69,,,24,24,141,,24,,,,,28,57,,,,,189,29,29,,,,,138,,138',
',138,,138,,,,,141,,24,,139,139,139,139,185,139,,,,24,,,,,,28,,,,24,24',
',,,28,,,,,,29,29,,,,138,57,29,57,,,,57,57,,,,,,,,,,,,,,,24,57,,,,,24',
',,,57,,24,24,,,,,,24,139,139,139,139,29,,,,29,29,24,,,,,,,,,29,,57,',
'57,139,,,,,69,,,28,,12,,69,12,,,,24,,,24,,,,24,24,29,29,,,,,28,,,24',
'29,,,,,,,,,,,57,,,,,56,,,,,,56,,,,,,24,,24,24,,,,,,,,29,24,24,69,29',
'69,,69,29,69,69,56,56,56,,,,,,,28,,28,,,,28,28,,,,,,,29,,24,,,,24,,',
'28,24,,56,,24,56,,,28,,,,,12,12,,,,,,,,,29,,,,,,,24,,,57,,,,,29,28,57',
'28,,29,,56,29,29,57,,,,,,56,,,,,,,,,24,,,,,,,,12,,,,,,,24,,,,,24,,,24',
'24,,28,,,,,,69,,,,,,,57,,24,57,,,,,,,,,,,12,,,,12,12,,,,,,,,,,12,,,',
',,,,,56,,,,,,,,,,,,,,,,,,,,,,12,12,56,,,,,,,,,,,,,,69,,,69,,69,,,,,',
',,,,,28,,,,,,,28,,57,,,,,,28,,12,,,57,12,,,,69,,,69,,57,57,,56,,56,',
',,56,56,,,,,,,,,,,12,,69,,,56,,,,,,,,,56,,,,28,,,28,,,,,,,,,57,57,,12',
',,,57,,,,,,,,56,,56,12,,,,,12,,,,,,,,,,,,,,,69,,,,69,69,,,,,,57,,,57',
',,,57,57,,,,,,,,56,,57,,,,,,,,,,,,69,,,69,,,,,,,28,,,,,,,,,57,57,28',
'69,,,,,,,57,,28,28,,,,,,,,69,,,,,,,,,,,,,,,,,,,,69,,,,57,,,,57,,,,57',
',,,57,,,,,,28,28,,,,,28,28,,56,,,69,,,,56,,,,57,,,,56,,,,,,,,,,,,,,',
',,,,,,,,,,28,,,28,57,,,28,28,,,,35,,,,,,28,57,,35,35,35,57,,,57,57,56',
',,56,,35,35,35,,,,,,,,,,,,,28,28,35,35,,,,,,,28,,,,,,,,,,,,,,,69,,,',
',,,,,,,,,,,,,,,,28,,,,28,,,,28,,,,28,,,,,,,,,,,,,,,,,,,,,69,,,56,,28',
',,,,,,,,56,,,,,,,,,,56,56,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,,28',
'28,,,,,,,,,,35,35,35,56,56,,35,35,,,56,,,,,,,,,,,,35,,,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,56,',
',56,,35,,56,56,,,35,,,35,,,,56,,,35,,35,,35,,35,35,,,,,,,,,,,,,,,,,',
',,,56,56,,,,,,,,,56,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,56,,,',
'56,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,',
',,,56,,,,,,,,,,,,,,,56,,,,,56,,,56,56,,,,,,35,,35,35,35,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35',
'35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,',
'35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,',
',,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3031, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   178,    40,   173,   nil,    60,    -2,    72,    40,    21,
  -316,   122,   853,  -514,  -629,  -702,   nil,    23,   228,   -12,
  -192,   168,     9,    65,   638,  -207,  -321,   -15,  1225,   598,
  -184,    28,   257,   111,   -21,  2019,   -25,   nil,   nil,    12,
  -192,    69,  -189,  -382,   226,  -298,  -619,   nil,    89,    61,
    17,   -31,   nil,     7,    19,  -215,  1476,  1064,  -531,  -233,
   -71,     2,   nil,   nil,    -1,    29,  -237,    34,    11,  1221,
   119,   -15,  -243,   106,    86,  -305,  -265,  -459,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,   128,   -58,
   nil,   128,  -308,  -678,  -470,  -334,   125,  -406,    26,  -556,
   125,   140,  -128,   135,  -528,   136,  -528,  -384,  -723,   146,
  -529,  -137,  -531,  -715,   157,  -374,  -139,  -374,  -637,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -771,  -398,  -509,  -715,  -428,   nil,   119,  -491,   313,   373,
  -553,   274,  -613,  -506,   nil,  -573,  -778,  -785,  -826,  -217,
  -421,    66,  -286,   -21,  -125,  -530,   nil,   nil,  -129,  -529,
  -128,  -527,  -843,  -444,  -551,  -674,   nil,   nil,    72,    -4,
    20,    68,    68,  -261,  -232,    69,    69,    70,  -601,  -450,
  -447,    76,  -582,  -304,   nil,   288,  -540,  -153,  -648,   256,
  -534,  -711,   nil,  -640,  -798,   nil,   nil,  -200,  -477 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   350,   295,
   nil,   nil,   538,   nil,   851,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   749,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   312,   nil,   nil,    28,   426,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   600,   nil,
   132,   434,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   427,   nil,   428,   439,   648,   501,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   721,   566,   nil,   722,   950,   794,   554,   nil,   555,   nil,
   nil,   556,   nil,   558,   664,   nil,   nil,   nil,   564,   nil,
   nil,   nil,   759,   nil,   nil,   nil,   438,   269,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   835,   553,   nil,   557,   843,   569,   571,
   572,   806,   575,   576,   807,   579,   582,   nil,   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  4, 213, :_reduce_286,
  3, 213, :_reduce_287,
  3, 213, :_reduce_288,
  2, 213, :_reduce_289,
  3, 213, :_reduce_290,
  3, 213, :_reduce_291,
  1, 213, :_reduce_292,
  4, 213, :_reduce_293,
  3, 213, :_reduce_294,
  1, 213, :_reduce_295,
  5, 213, :_reduce_296,
  4, 213, :_reduce_297,
  3, 213, :_reduce_298,
  2, 213, :_reduce_299,
  1, 213, :_reduce_none,
  2, 213, :_reduce_301,
  2, 213, :_reduce_302,
  6, 213, :_reduce_303,
  6, 213, :_reduce_304,
  0, 248, :_reduce_305,
  0, 249, :_reduce_306,
  7, 213, :_reduce_307,
  0, 250, :_reduce_308,
  0, 251, :_reduce_309,
  7, 213, :_reduce_310,
  5, 213, :_reduce_311,
  4, 213, :_reduce_312,
  0, 252, :_reduce_313,
  0, 253, :_reduce_314,
  9, 213, :_reduce_315,
  0, 254, :_reduce_316,
  0, 255, :_reduce_317,
  7, 213, :_reduce_318,
  0, 256, :_reduce_319,
  0, 257, :_reduce_320,
  0, 258, :_reduce_321,
  9, 213, :_reduce_322,
  0, 259, :_reduce_323,
  0, 260, :_reduce_324,
  6, 213, :_reduce_325,
  0, 261, :_reduce_326,
  6, 213, :_reduce_327,
  0, 262, :_reduce_328,
  0, 263, :_reduce_329,
  9, 213, :_reduce_330,
  1, 213, :_reduce_331,
  1, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 169, :_reduce_335,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_353,
  1, 159, :_reduce_none,
  2, 159, :_reduce_355,
  1, 241, :_reduce_none,
  1, 241, :_reduce_357,
  1, 275, :_reduce_none,
  3, 275, :_reduce_359,
  1, 278, :_reduce_360,
  3, 278, :_reduce_361,
  1, 277, :_reduce_362,
  4, 277, :_reduce_363,
  6, 277, :_reduce_364,
  3, 277, :_reduce_365,
  5, 277, :_reduce_366,
  2, 277, :_reduce_367,
  4, 277, :_reduce_368,
  1, 277, :_reduce_369,
  3, 277, :_reduce_370,
  4, 279, :_reduce_371,
  2, 279, :_reduce_372,
  2, 279, :_reduce_373,
  1, 279, :_reduce_374,
  2, 284, :_reduce_375,
  1, 284, :_reduce_none,
  6, 285, :_reduce_377,
  8, 285, :_reduce_378,
  4, 285, :_reduce_379,
  6, 285, :_reduce_380,
  4, 285, :_reduce_381,
  2, 285, :_reduce_382,
  6, 285, :_reduce_383,
  2, 285, :_reduce_384,
  4, 285, :_reduce_385,
  6, 285, :_reduce_386,
  2, 285, :_reduce_387,
  4, 285, :_reduce_388,
  2, 285, :_reduce_389,
  4, 285, :_reduce_390,
  1, 285, :_reduce_391,
  1, 188, :_reduce_392,
  1, 188, :_reduce_none,
  3, 289, :_reduce_394,
  1, 289, :_reduce_395,
  4, 289, :_reduce_396,
  1, 290, :_reduce_none,
  4, 290, :_reduce_398,
  1, 291, :_reduce_399,
  3, 291, :_reduce_400,
  1, 292, :_reduce_401,
  1, 292, :_reduce_none,
  0, 296, :_reduce_403,
  3, 236, :_reduce_404,
  4, 294, :_reduce_405,
  1, 294, :_reduce_406,
  3, 295, :_reduce_407,
  3, 295, :_reduce_408,
  0, 299, :_reduce_409,
  0, 300, :_reduce_410,
  6, 298, :_reduce_411,
  2, 183, :_reduce_412,
  4, 183, :_reduce_413,
  5, 183, :_reduce_414,
  5, 183, :_reduce_415,
  0, 302, :_reduce_416,
  3, 235, :_reduce_417,
  4, 235, :_reduce_418,
  4, 235, :_reduce_419,
  3, 235, :_reduce_420,
  3, 235, :_reduce_421,
  3, 235, :_reduce_422,
  2, 235, :_reduce_423,
  1, 235, :_reduce_424,
  4, 235, :_reduce_425,
  0, 303, :_reduce_426,
  0, 304, :_reduce_427,
  6, 234, :_reduce_428,
  0, 305, :_reduce_429,
  0, 306, :_reduce_430,
  6, 234, :_reduce_431,
  0, 308, :_reduce_432,
  6, 240, :_reduce_433,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  6, 158, :_reduce_436,
  0, 158, :_reduce_437,
  1, 309, :_reduce_438,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 310, :_reduce_441,
  1, 310, :_reduce_none,
  2, 160, :_reduce_443,
  1, 160, :_reduce_none,
  1, 224, :_reduce_445,
  1, 224, :_reduce_446,
  1, 224, :_reduce_none,
  1, 225, :_reduce_448,
  1, 312, :_reduce_449,
  1, 312, :_reduce_none,
  2, 312, :_reduce_451,
  3, 313, :_reduce_452,
  1, 313, :_reduce_453,
  3, 226, :_reduce_454,
  3, 227, :_reduce_455,
  3, 228, :_reduce_456,
  3, 228, :_reduce_457,
  1, 317, :_reduce_458,
  3, 317, :_reduce_459,
  1, 318, :_reduce_none,
  2, 318, :_reduce_461,
  3, 230, :_reduce_462,
  3, 230, :_reduce_463,
  1, 320, :_reduce_464,
  3, 320, :_reduce_465,
  3, 229, :_reduce_466,
  3, 229, :_reduce_467,
  3, 231, :_reduce_468,
  3, 231, :_reduce_469,
  1, 321, :_reduce_470,
  3, 321, :_reduce_471,
  1, 322, :_reduce_472,
  3, 322, :_reduce_473,
  1, 314, :_reduce_474,
  2, 314, :_reduce_475,
  1, 315, :_reduce_476,
  2, 315, :_reduce_477,
  1, 316, :_reduce_478,
  2, 316, :_reduce_479,
  1, 319, :_reduce_480,
  0, 324, :_reduce_481,
  3, 319, :_reduce_482,
  0, 325, :_reduce_483,
  4, 319, :_reduce_484,
  1, 323, :_reduce_485,
  1, 323, :_reduce_486,
  1, 323, :_reduce_487,
  1, 323, :_reduce_none,
  2, 209, :_reduce_489,
  1, 209, :_reduce_490,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  3, 210, :_reduce_495,
  1, 311, :_reduce_none,
  2, 311, :_reduce_497,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_507,
  1, 202, :_reduce_508,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 232, :_reduce_514,
  1, 232, :_reduce_515,
  1, 168, :_reduce_516,
  1, 168, :_reduce_517,
  1, 173, :_reduce_518,
  1, 173, :_reduce_519,
  1, 242, :_reduce_520,
  0, 327, :_reduce_521,
  4, 242, :_reduce_522,
  2, 242, :_reduce_523,
  3, 244, :_reduce_524,
  2, 244, :_reduce_525,
  4, 328, :_reduce_526,
  2, 328, :_reduce_527,
  2, 328, :_reduce_528,
  1, 328, :_reduce_none,
  2, 330, :_reduce_530,
  0, 330, :_reduce_531,
  6, 297, :_reduce_532,
  8, 297, :_reduce_533,
  4, 297, :_reduce_534,
  6, 297, :_reduce_535,
  4, 297, :_reduce_536,
  6, 297, :_reduce_537,
  2, 297, :_reduce_538,
  4, 297, :_reduce_539,
  6, 297, :_reduce_540,
  2, 297, :_reduce_541,
  4, 297, :_reduce_542,
  2, 297, :_reduce_543,
  4, 297, :_reduce_544,
  1, 297, :_reduce_545,
  0, 297, :_reduce_546,
  1, 293, :_reduce_547,
  1, 293, :_reduce_548,
  1, 293, :_reduce_549,
  1, 293, :_reduce_550,
  1, 276, :_reduce_none,
  1, 276, :_reduce_552,
  1, 332, :_reduce_none,
  1, 333, :_reduce_none,
  3, 333, :_reduce_555,
  1, 286, :_reduce_556,
  3, 286, :_reduce_557,
  1, 334, :_reduce_none,
  2, 335, :_reduce_559,
  1, 335, :_reduce_560,
  2, 336, :_reduce_561,
  1, 336, :_reduce_562,
  1, 280, :_reduce_none,
  3, 280, :_reduce_564,
  1, 329, :_reduce_none,
  3, 329, :_reduce_566,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 281, :_reduce_569,
  1, 281, :_reduce_570,
  3, 338, :_reduce_571,
  3, 339, :_reduce_572,
  1, 287, :_reduce_573,
  3, 287, :_reduce_574,
  1, 331, :_reduce_575,
  3, 331, :_reduce_576,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 288, :_reduce_579,
  1, 288, :_reduce_580,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 283, :_reduce_583,
  2, 282, :_reduce_584,
  0, 282, :_reduce_585,
  1, 245, :_reduce_none,
  0, 342, :_reduce_587,
  4, 245, :_reduce_588,
  1, 233, :_reduce_589,
  2, 233, :_reduce_590,
  1, 218, :_reduce_none,
  3, 218, :_reduce_592,
  3, 343, :_reduce_593,
  2, 343, :_reduce_594,
  4, 343, :_reduce_595,
  2, 343, :_reduce_596,
  2, 343, :_reduce_597,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_620,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_623,
  0, 151, :_reduce_624 ]

racc_reduce_n = 625

racc_shift_n = 1055

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_596(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

def _reduce_620(val, _values, result)
 yyerrok 
    result
end

# reduce 621 omitted

# reduce 622 omitted

def _reduce_623(val, _values, result)
 yyerrok 
    result
end

def _reduce_624(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
