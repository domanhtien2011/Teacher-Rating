#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby23Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-288,272,272,-105,586,707,272,-288,-288,-288,755,222,667,-288,-288,667',
'-288,94,95,-105,-84,83,696,-100,219,220,667,628,586,84,667,-502,631',
'853,824,-70,-288,-288,-502,-288,-288,-288,-288,-288,586,790,666,223',
'116,666,735,3,-91,115,-93,-516,586,116,-517,586,666,508,115,-98,666',
'-100,-99,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-98,-101,-288,-288,-288,-99,650,271,271,627,-288,-106,271',
'-288,630,96,97,824,-288,592,-288,-103,-288,-288,-288,-288,-288,-288',
'-288,706,-288,-98,-288,223,-99,754,-105,116,-91,-601,-93,-105,115,-96',
'-502,-288,-288,-91,-95,-101,-288,-502,-502,-502,116,-104,-502,-502,-502',
'115,-502,116,-288,-104,937,506,115,262,-502,116,-502,-502,-502,-91,115',
'-93,-91,116,-93,-94,-502,-502,115,-502,-502,-502,-502,-502,-102,116',
'794,-91,116,-93,115,-92,-98,115,-100,-99,-103,-98,-512,-100,-99,-89',
'-92,-106,223,-512,-90,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,-106,-103,-502,-502,-502,-106,-502,-502,-602,735',
'-502,735,-104,-502,-502,493,-502,493,-502,460,-502,-94,-502,-502,-502',
'-502,-502,-502,-502,885,-502,116,-502,219,220,533,115,-92,-101,776,612',
'-601,-102,-101,-104,-502,-502,-502,-502,-104,-502,-511,-502,219,220',
'-263,-94,-505,-511,-94,265,770,-502,-502,-505,-505,-505,266,571,-505',
'-505,-505,-92,-505,-94,-92,-106,-102,-602,574,-94,-505,-102,-505,-505',
'-505,-100,-97,272,769,-92,746,-105,-505,-505,747,-505,-505,-505,-505',
'-505,614,613,610,545,582,581,547,-601,116,612,116,582,581,115,-103,115',
'-95,94,95,-103,768,682,223,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-505,-505,-505,-264,789,-505,-505,-505,223,-505,-505,575,-93',
'-505,738,-508,-505,-505,-416,-505,592,-505,-508,-505,-598,-505,-505',
'-505,-505,-505,-505,-505,-507,-505,731,-505,614,613,610,-507,271,566',
'884,563,562,561,571,564,-505,-505,-505,-505,729,-505,-605,-505,612,574',
'728,612,-288,-101,96,97,727,-505,-505,-288,-288,-288,719,571,-288,-288',
'-288,412,-288,-502,-513,569,414,413,574,717,-502,-513,-288,-288,-288',
'-598,582,581,223,-502,715,1007,-288,-288,265,-288,-288,-288,-288,-288',
'713,266,566,-605,563,562,561,-598,564,612,-605,582,581,614,613,-601',
'614,613,632,-605,575,-599,767,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-605,-502,-288,-288,-288,215,792,-288',
'575,712,-288,612,964,-288,-288,709,-288,223,-288,702,-288,751,-288,-288',
'-288,-288,-288,-288,-288,887,-288,-605,-288,614,613,625,566,-505,563',
'562,561,712,564,849,-505,-288,-288,-288,-288,-599,-288,-605,-288,-505',
'-509,219,220,890,-605,-605,-605,-509,-288,-104,-605,-605,545,-605,215',
'547,216,-599,614,613,243,749,-605,545,-510,-514,547,765,-515,893,751',
'-510,-514,-605,-605,-515,-605,-605,-605,-605,-605,-514,-288,-505,-515',
'895,-280,897,-505,-288,-505,612,240,-280,-602,612,242,241,-288,223,983',
'899,-280,900,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-289,216,-605,-605,-605,612,651,-289,617,116,-605,701',
'-514,-605,115,-515,-289,-517,-605,696,-605,538,-605,-605,-605,-605,-605',
'-605,-605,-288,-605,-605,-605,-280,614,613,615,116,614,613,620,223,115',
'696,-605,-605,-605,685,-93,116,-605,-605,-605,-605,115,908,-605,-605',
'-605,-90,-605,215,-605,-102,-84,-289,614,613,214,-605,-605,-605,-605',
'116,-99,215,545,212,115,544,-605,-605,457,-605,-605,-605,-605,-605,-262',
'215,912,458,914,-335,215,915,536,219,220,223,-335,964,876,877,644,458',
'878,110,111,-335,751,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,712,216,-605,-605,-605,918,791,-605,219,220,-605',
'219,220,-605,-605,216,-605,920,-605,533,-605,-92,-605,-605,-605,-605',
'-605,-605,-605,216,-605,-605,-605,-335,216,645,-101,566,922,563,562',
'561,571,564,215,-605,-605,-605,-605,775,-605,595,-605,574,853,824,924',
'-281,924,-516,593,-96,-605,-102,-281,-281,-281,223,223,-281,-281,-281',
'930,-281,215,569,-105,-94,223,932,223,526,934,-281,-281,-281,582,581',
'215,243,524,-91,-103,-281,-281,1014,-281,-281,-281,-281,-281,-89,243',
'243,1012,243,-100,-288,654,216,274,643,223,642,-288,223,-98,638,944',
'-602,575,945,223,-288,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,217,216,-281,-281,-281,-289,948,-281,-265,-262,-281',
'636,-289,-281,-281,216,-281,629,-281,626,-281,-289,-281,-281,-281,-281',
'-281,-281,-281,623,-281,619,-281,566,-288,563,562,561,571,564,597,596',
'-97,958,404,-281,-281,-281,-281,574,-281,-295,-281,592,965,966,508,-106',
'-295,-295,-295,968,-281,-295,-295,-295,969,-295,549,548,-289,569,542',
'243,243,534,985,-295,-295,530,579,578,582,581,987,988,274,-295,-295',
'223,-295,-295,-295,-295,-295,566,992,563,562,561,566,564,563,562,561',
'240,564,277,527,242,241,238,239,712,997,999,575,1001,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,1003,721,-295',
'-295,-295,1003,721,-295,520,277,-295,519,1010,-295,-295,929,-295,223',
'-295,-69,-295,508,-295,-295,-295,-295,-295,-295,-295,506,-295,1015,-295',
'503,1016,566,924,563,562,561,924,564,243,924,-625,-295,-295,1021,-295',
'274,-295,-625,-625,-625,985,493,-625,-625,-625,243,-625,566,-295,563',
'562,561,222,564,243,-625,-625,-625,462,721,240,257,258,461,242,241,-625',
'-625,724,-625,-625,-625,-625,-625,459,415,410,240,394,246,391,242,241',
'238,239,721,240,244,388,245,242,241,238,239,724,-602,-601,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,701,385',
'-625,-625,-625,361,223,-625,322,274,-625,321,262,-625,-625,985,-625',
'1044,-625,1045,-625,1046,-625,-625,-625,-625,-625,-625,-625,1047,-625',
'-625,-625,1003,566,1003,563,562,561,1003,564,223,218,211,-424,-625,-625',
'210,-625,924,-625,-424,-424,-424,985,209,-424,-424,-424,243,-424,566',
'-625,563,562,561,112,564,1003,-424,-424,-424,721,223,847,257,258,824',
'223,824,-424,-424,857,-424,-424,-424,-424,-424,243,223,696,240,274,246',
'274,242,241,238,239,721,223,244,566,245,563,562,561,,564,,,-424,-424',
'-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,,,-424,-424',
'-424,,,-424,,274,-424,,,-424,-424,721,-424,,-424,,-424,,-424,-424,-424',
'-424,-424,-424,-424,,-424,-424,-424,,,566,,563,562,561,,564,,,-607,-424',
'-424,,-424,,-424,-607,-607,-607,,,-607,-607,-607,243,-607,961,-424,563',
'562,561,,564,,-607,-607,-607,-607,721,,257,258,,,,-607,-607,,-607,-607',
'-607,-607,-607,,,,240,,246,,242,241,238,239,,,244,961,245,563,562,561',
',564,,,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,,,-607,-607,-607,,,-607,,,-607,,,-607,-607,,-607,,-607,,-607,,-607',
'-607,-607,-607,-607,-607,-607,,-607,-607,-607,566,,563,562,561,571,564',
'119,120,121,122,123,-607,-607,-607,-607,574,-607,-606,-607,119,120,121',
'122,123,-606,-606,-606,,-607,-606,-606,-606,,-606,243,,,569,,,,,-606',
'-606,-606,-606,579,578,582,581,257,258,,-606,-606,,-606,-606,-606,-606',
'-606,119,120,121,122,123,240,,246,,242,241,238,239,,,244,,245,,,,575',
',-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606',
',,-606,-606,-606,,,-606,,,-606,,,-606,-606,,-606,,-606,,-606,,-606,-606',
'-606,-606,-606,-606,-606,,-606,-606,-606,119,120,121,122,123,,,,,,,',
'-606,-606,-606,-606,,-606,,-606,,297,72,73,74,12,60,,,-606,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,655',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,-239,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,639,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,655,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247',
'252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83',
'85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,299,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63',
',38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87',
'89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,8,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236',
'237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239',
'250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88',
'90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254',
'249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90',
',,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254',
'249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,-626,-626,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-626,-626,-626,-626',
'249,251,,,-626,-626,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,,255,256,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,,,255,256,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-626',
'-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,,,36,,,61,62,,,63',
',38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,,,299,',
',61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,',
'43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,-626,-626',
',,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,243',
'61,62,,,63,,38,240,,246,47,242,241,238,239,257,258,,23,,,,,91,83,85',
'86,87,89,,,240,84,92,,242,241,238,239,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233',
',,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',303,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,320,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,223',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,228,,,234,,,61,62,,,63,,286,,,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,',
',,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,',
'91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,318,,,,,,,,,,,,,,,,,,,,355,,,36,,,61,62,,,63,,38,,,,,,,,,',
',,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,404,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,420,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,420,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,223',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,223,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,',
',,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,',
'235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,522,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,538,,61,62,,,63,,,,,,47',
',,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,975,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,902,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,598,59,100,99,599,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,600,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,598,59,100,99,599,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,600,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,',
'291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,404,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,',
',,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,902,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233',
',,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,773',
',,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,679,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287,85',
'86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,',
'310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,',
'310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,286,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,420,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
'401,400,128,,402,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,370,369,371,368,172,191,190,,,,,,171,178,169,170',
'365,366,367,363,129,100,99,364,,102,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,377,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
',,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,-625,,,,,,92,-625,-625,-625,,,-625',
'-625,-625,158,-625,566,,563,562,561,571,564,,-625,-625,,,,,,,574,,,-625',
'-625,,-625,-625,-625,-625,-625,,,566,,563,562,561,571,564,,,569,,,,',
',,574,,,,582,581,,,,,,,,,,,-625,,,,,,569,-625,,,,,274,-625,,579,578',
'582,581,,,,575,,657,434,,,658,,,,,,-625,-625,,161,162,,157,139,140,141',
'148,145,147,,-625,142,143,575,,-625,163,164,149,150,,,,,,274,,,,,,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,659,441',
',,660,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,566,165,563,562,561,571,564,,,,,,,,,,574,,,,,158,,,,,,',
',,566,,563,562,561,571,564,,569,689,434,,,690,,,574,579,578,582,581',
',161,162,,157,139,140,141,148,145,147,,,142,143,,,569,163,164,149,150',
',,,,,274,582,581,,,575,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,692,441,,,693,,575,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,430,434,,,431,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,437,441,,,436,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,566,165,563,562,561,571,564,,,657',
'434,,,658,,,574,,,,,158,161,162,,157,139,140,141,148,145,147,,,142,143',
',,569,163,164,149,150,,,,,,274,582,581,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,566,165,563,562,561,571,564,,,659,441,',
'575,660,,,574,,,,,158,161,162,,157,139,140,141,148,145,147,,,142,143',
',,569,163,164,149,150,,,,,,274,582,581,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,566,165,563,562,561,571,564,,,,,,575,,',
',574,,,,566,158,563,562,561,571,564,566,,563,562,561,571,564,,,574,',
'569,,,,,574,,,,579,578,582,581,,,,,,,566,569,563,562,561,571,564,,569',
',579,578,582,581,,,574,579,578,582,581,,,,,,575,,,,,,,,,,,,569,,,491',
'434,,,492,575,579,578,582,581,,,575,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,223,,,,,274,,,575,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,861,441,,,862,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,491,434,,,492,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,566,165,563,562,561,571,564,,,741,434',
',,742,,,574,,,,,158,161,162,,157,139,140,141,148,145,147,,,142,143,',
',569,163,164,149,150,,,,,,274,582,581,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,743,441,,,744,,575,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,1009,441,,,1008,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,1037,434,,,1038,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,566,165',
'563,562,561,571,564,566,,563,562,561,571,564,,,574,,,,,158,,574,566',
',563,562,561,571,564,,,,,,,,569,759,574,,,,,569,759,579,578,582,581',
',,,579,578,582,581,,,,566,569,563,562,561,571,564,,,,,,582,581,,566',
'574,563,562,561,571,564,575,,,,,,,575,,574,,,,,,,569,566,,563,562,561',
'571,564,575,,,582,581,,,569,,574,,,,,,,,,582,581,,,,,,,,,,,,569,,,,',
',575,,,579,578,582,581,,,,1039,441,,,1040,575,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,575,163,164,149,150,,,,,,274,,,,,,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,566,165,563,562',
'561,571,564,,,,,,,,,,574,,,,,158,,,,,,,,,,,,,,,,,569,552,,,,,,,,579',
'578,582,581,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,575' ]
        racc_action_table = arr = ::Array.new(26605, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'436,670,64,1015,345,551,313,436,436,436,604,22,489,436,436,497,436,318',
'318,596,684,80,686,859,454,454,498,392,858,80,671,363,395,730,730,684',
'436,436,363,436,436,436,436,436,911,658,489,22,349,497,860,1,819,349',
'692,226,346,294,227,933,498,678,294,972,671,1052,973,436,436,436,436',
'436,436,436,436,436,436,436,436,436,436,352,741,436,436,436,353,436',
'670,64,392,436,976,313,436,395,318,318,990,436,990,436,658,436,436,436',
'436,436,436,436,551,436,226,436,454,227,604,1015,345,819,692,692,1015',
'345,596,98,436,436,859,436,1037,436,98,98,98,604,1040,98,98,98,604,98',
'858,436,436,858,676,858,669,98,860,98,98,98,819,860,692,819,911,692',
'690,98,98,911,98,98,98,98,98,1039,346,663,819,933,692,346,689,972,933',
'1052,973,742,972,365,1052,973,352,741,356,661,365,353,98,98,98,98,98',
'98,98,98,98,98,98,98,98,98,976,1038,98,98,98,976,98,98,1040,589,98,588',
'744,98,98,652,98,646,98,229,98,690,98,98,98,98,98,98,98,793,98,760,98',
'762,762,459,760,689,1037,641,510,1039,743,1037,1040,98,98,98,98,1040',
'98,366,98,699,699,637,690,101,366,690,373,633,98,98,101,101,101,373',
'887,101,101,101,689,101,690,689,229,1039,744,887,742,101,1039,101,101',
'101,793,356,29,631,689,600,459,101,101,600,101,101,101,101,101,510,510',
'510,335,712,712,335,743,589,379,588,887,887,589,1038,588,744,44,44,1038',
'628,510,762,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'772,657,101,101,101,699,101,101,887,743,101,591,370,101,101,29,101,590',
'101,370,101,598,101,101,101,101,101,101,101,369,101,585,101,379,379',
'379,369,29,1047,777,1047,1047,1047,1047,1047,101,101,101,101,583,101',
'861,101,624,1047,580,397,660,657,44,44,576,101,101,660,660,660,568,709',
'660,660,660,126,660,598,367,1047,126,126,709,559,598,367,660,660,660',
'598,1047,1047,959,598,558,959,660,660,27,660,660,660,660,660,557,27',
'724,861,724,724,724,598,724,389,861,709,709,624,624,861,397,397,397',
'861,1047,599,624,660,660,660,660,660,660,660,660,660,660,660,660,660',
'660,861,598,660,660,660,963,660,660,709,555,660,621,963,660,660,554',
'660,541,660,540,660,963,660,660,660,660,660,660,660,795,660,861,660',
'389,389,389,929,599,929,929,929,796,929,724,599,660,660,660,660,599',
'660,437,660,599,371,344,344,798,437,437,437,371,660,660,437,437,339',
'437,602,339,963,599,621,621,465,602,437,704,368,305,704,621,306,799',
'602,368,305,437,437,306,437,437,437,437,437,305,862,364,306,800,309',
'802,599,862,364,381,465,309,862,386,465,465,862,803,929,804,309,805',
'437,437,437,437,437,437,437,437,437,437,437,437,437,437,527,602,437',
'437,437,383,437,527,383,755,437,539,305,437,755,306,527,42,437,531,437',
'528,437,437,437,437,437,437,437,862,437,437,437,309,381,381,381,942',
'386,386,386,523,942,818,659,437,437,521,437,868,437,659,659,659,868',
'822,659,659,659,42,659,17,437,437,518,527,383,383,17,659,659,659,659',
'5,42,225,334,17,5,334,659,659,225,659,659,659,659,659,825,324,826,225',
'830,49,901,831,324,20,20,832,49,901,763,763,430,324,763,763,763,49,901',
'659,659,659,659,659,659,659,659,659,659,659,659,659,659,833,17,659,659',
'659,837,659,659,330,330,659,756,756,659,659,225,659,838,659,322,659',
'430,659,659,659,659,659,659,659,324,659,659,659,49,901,431,430,895,840',
'895,895,895,895,895,354,659,659,659,659,640,659,354,659,895,1023,1023',
'841,59,843,41,354,322,659,659,59,59,59,846,517,59,59,59,848,59,307,895',
'322,431,500,851,499,307,854,59,59,59,895,895,974,470,307,640,431,59',
'59,974,59,59,59,59,59,41,469,468,974,467,640,693,446,354,438,429,864',
'428,693,425,41,421,869,693,895,870,871,693,59,59,59,59,59,59,59,59,59',
'59,59,59,59,59,18,307,59,59,59,747,880,59,881,419,59,416,747,59,59,974',
'59,394,59,391,59,747,59,59,59,59,59,59,59,388,59,385,59,893,693,893',
'893,893,893,893,357,355,18,898,351,59,59,59,59,893,59,31,59,350,902',
'903,340,18,31,31,31,905,59,31,31,31,906,31,337,336,747,893,332,485,326',
'323,931,31,31,319,893,893,893,893,935,936,317,31,31,312,31,31,31,31',
'31,1021,941,1021,1021,1021,847,1021,847,847,847,485,847,311,308,485',
'485,485,485,949,952,953,893,954,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,955,1021,31,31,31,957,847,31,302,31,31,301,967,31,31,847,31,300',
'31,298,31,285,31,31,31,31,31,31,31,282,31,975,31,281,978,569,979,569',
'569,569,980,569,466,981,432,31,31,982,31,270,31,432,432,432,984,267',
'432,432,432,477,432,721,31,721,721,721,235,721,484,432,432,432,231,569',
'466,477,477,230,466,466,432,432,569,432,432,432,432,432,228,207,124',
'477,90,477,89,477,477,477,477,721,484,477,88,477,484,484,484,484,721',
'1008,1009,432,432,432,432,432,432,432,432,432,432,432,432,432,432,1011',
'87,432,432,432,72,48,432,43,432,432,40,25,432,432,1022,432,1027,432',
'1028,432,1029,432,432,432,432,432,432,432,1030,432,432,432,1031,849',
'1032,849,849,849,1033,849,1036,19,16,30,432,432,15,432,1041,432,30,30',
'30,1042,13,30,30,30,478,30,930,432,930,930,930,3,930,1054,30,30,30,849',
'708,723,478,478,700,725,732,30,30,737,30,30,30,30,30,698,740,695,478',
'694,478,691,478,478,478,478,930,688,478,985,478,985,985,985,,985,,,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30',
'985,30,,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,983,,983,983,983,,983',
',,442,30,30,,30,,30,442,442,442,,,442,442,442,475,442,899,30,899,899',
'899,,899,,442,442,442,442,983,,475,475,,,,442,442,,442,442,442,442,442',
',,,475,,475,,475,475,475,475,,,475,1007,475,1007,1007,1007,,1007,,,442',
'442,442,442,442,442,442,442,442,442,442,442,442,442,,,442,442,442,,',
'442,,,442,,,442,442,,442,,442,,442,,442,442,442,442,442,442,442,,442',
'442,442,890,,890,890,890,890,890,683,683,683,683,683,442,442,442,442',
'890,442,441,442,9,9,9,9,9,441,441,441,,442,441,441,441,,441,476,,,890',
',,,,441,441,441,441,890,890,890,890,476,476,,441,441,,441,441,441,441',
'441,296,296,296,296,296,476,,476,,476,476,476,476,,,476,,476,,,,890',
',441,441,441,441,441,441,441,441,441,441,441,441,441,441,,,441,441,441',
',,441,,,441,,,441,441,,441,,441,,441,,441,441,441,441,441,441,441,,441',
'441,441,516,516,516,516,516,,,,,,,,441,441,441,441,,441,,441,,991,991',
'991,991,991,991,,,441,991,991,,,,991,,991,991,991,991,991,991,991,,',
',,,991,991,991,991,991,991,991,,,991,,,,,449,991,991,,991,991,991,991',
'991,991,991,991,991,,991,991,991,,991,991,,991,991,991,449,449,449,449',
'449,449,449,449,449,449,449,,449,449,,,449,449,,991,,,991,,,991,991',
',,991,,991,449,,449,991,449,449,449,449,449,449,449,991,449,,,,991,991',
'991,991,991,991,,,,991,991,,449,,449,,,991,,,991,991,991,,,991,991,994',
'994,994,994,994,994,,,,994,994,,,,994,,994,994,994,994,994,994,994,',
',,,,994,994,994,994,994,994,994,,,994,,,,,424,994,994,,994,994,994,994',
'994,994,994,994,994,,994,994,994,,994,994,,994,994,994,424,424,424,424',
'424,424,424,424,424,424,424,,424,424,,,424,424,,994,,,994,,,994,994',
',,994,,994,424,,424,994,424,424,424,424,424,424,424,994,424,,,,994,994',
'994,994,994,994,,,,994,994,,424,,,,,994,,,994,994,994,,,994,994,706',
'706,706,706,706,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,',
',,,,706,706,706,706,706,706,706,,,706,,,,,662,706,706,,706,706,706,706',
'706,706,706,706,706,,706,706,706,,706,706,,706,706,706,662,662,662,662',
'662,662,662,662,662,662,662,,662,662,,,662,662,,706,,,706,,,706,706',
',,706,,706,662,,662,706,662,662,662,662,662,662,662,706,662,,,,706,706',
'706,706,706,706,,,,706,706,,662,,,,,706,,,706,706,706,,,706,706,995',
'995,995,995,995,995,,,,995,995,,,,995,,995,995,995,995,995,995,995,',
',,,,995,995,995,995,995,995,995,,,995,,,,,,995,995,,995,995,995,995',
'995,995,995,995,995,,995,995,995,,995,995,,995,995,995,279,279,279,279',
'279,279,279,279,279,279,279,,279,279,,,279,279,,995,,,995,,,995,995',
',,995,,995,279,,279,995,279,279,279,279,279,279,279,995,279,,,,995,995',
'995,995,995,995,,,,995,995,,279,,,,,995,,,995,995,995,,,995,995,209',
'209,209,209,209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,',
',,,,209,209,209,209,209,209,209,,,209,,,,,,209,209,,209,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,537,537,537,537',
'537,537,537,537,537,537,537,,537,537,,,537,537,,209,,,209,,,209,209',
',,209,,209,537,,537,209,537,537,537,537,537,537,537,209,537,,,,209,209',
'209,209,209,209,,,,209,209,,537,,,,,209,,,209,209,209,,,209,209,757',
'757,757,757,757,757,,,,757,757,,,,757,,757,757,757,757,757,757,757,',
',,,,757,757,757,757,757,757,757,,,757,,,,,,757,757,,757,757,757,757',
'757,757,757,757,757,,757,757,757,,757,757,,757,757,757,883,883,883,883',
'883,883,883,883,883,883,883,,883,883,,,883,883,,757,,,757,,,757,757',
',,757,,757,883,,883,757,883,883,883,883,883,883,883,757,883,,,,757,757',
'757,757,757,757,,,,757,757,,883,,,,,757,,,757,757,757,,,757,757,36,36',
'36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36',
'36,36,,,36,,,,,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,',
'36,36,36,444,444,444,444,444,444,444,444,444,444,444,,444,444,,,444',
'444,,36,,,36,,,36,36,,,36,,36,444,,444,36,444,444,444,444,444,444,444',
'36,444,,,,36,36,36,36,36,36,,,,36,36,,444,,,,,36,,,36,36,36,,,36,36',
'2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2',
'2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,488,488,488,488,488,488,488',
'488,488,488,488,,488,488,,,488,488,,2,,,2,,,2,2,,,2,,2,488,,488,2,488',
'488,488,488,488,488,488,2,488,,,,2,2,2,2,2,2,,,,2,2,488,488,,,,,2,,',
'2,2,2,,,2,2,865,865,865,865,865,865,,,,865,865,,,,865,,865,865,865,865',
'865,865,865,,,,,,865,865,865,865,865,865,865,,,865,,,,,,865,865,,865',
'865,865,865,865,865,865,865,865,,865,865,865,,865,865,,865,865,865,774',
'774,774,774,774,774,774,774,774,774,774,,774,774,,,774,774,,865,,,865',
',,865,865,,,865,,865,774,,774,865,774,774,774,774,774,774,774,865,774',
',,,865,865,865,865,865,865,,,,865,865,,774,,,,,865,,,865,865,865,,,865',
'865,410,410,410,410,410,410,,,,410,410,,,,410,,410,410,410,410,410,410',
'410,,,,,,410,410,410,410,410,410,410,,,410,,,,,,410,410,410,410,410',
'410,410,410,410,410,410,410,,410,410,410,,410,410,,410,410,410,697,697',
'697,697,697,697,697,697,697,697,697,,697,697,,,697,697,,410,,,410,,',
'410,410,,,410,,410,697,,697,410,697,697,697,697,697,697,697,410,697',
',,,410,410,410,410,410,410,,,,410,410,,697,,,,,410,,,410,410,410,,,410',
'410,904,904,904,904,904,904,,,,904,904,,,,904,,904,904,904,904,904,904',
'904,,,,,,904,904,904,904,904,904,904,,,904,,,,,,904,904,,904,904,904',
'904,904,904,904,904,904,,904,904,904,,904,904,,904,904,904,788,788,788',
'788,788,788,788,788,788,788,788,,788,788,,,788,788,,904,,,904,,,904',
'904,,,904,,904,788,,788,904,788,788,788,788,788,788,788,904,788,,,,904',
'904,904,904,904,904,,,,904,904,,788,,,,,904,,,904,904,904,,,904,904',
'758,758,758,758,758,758,,,,758,758,,,,758,,758,758,758,758,758,758,758',
',,,,,758,758,758,758,758,758,758,,,758,,,,,,758,758,,758,758,758,758',
'758,758,758,758,758,,758,758,758,,758,758,,758,758,758,786,786,786,786',
'786,786,786,786,786,786,786,,786,786,,,786,786,,758,,,758,,,758,758',
',,758,,758,786,,786,758,786,786,786,786,786,786,786,758,786,,,,758,758',
'758,758,758,758,,,,758,758,,786,,,,,758,,,758,758,758,,,758,758,764',
'764,764,764,764,764,,,,764,764,,,,764,,764,764,764,764,764,764,764,',
',,,,764,764,764,764,764,764,764,,,764,,,,,,764,764,,764,764,764,764',
'764,764,764,764,764,,764,764,764,,764,764,,764,764,764,24,24,24,24,24',
'24,24,24,24,24,24,,24,24,,,24,24,,764,,,764,,,764,764,,,764,,764,24',
',24,764,24,24,24,24,24,24,24,764,24,,,,764,764,764,764,764,764,,,,764',
'764,,24,,,,,764,,,764,764,764,,,764,764,587,587,587,587,587,587,,,,587',
'587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587',
'587,,,587,,,,,,587,587,,587,587,587,587,587,587,587,587,587,,587,587',
'587,,587,587,,587,587,587,886,886,886,886,886,886,886,886,886,886,886',
',886,886,,,886,886,,587,,,587,,,587,587,,,587,,587,886,,886,587,886',
'886,886,886,886,886,886,587,886,,,,587,587,587,587,587,587,,,,587,587',
',886,,,,,587,,,587,587,587,,,587,587,908,908,908,908,908,908,,,,908',
'908,,,,908,,908,908,908,908,908,908,908,,,,,,908,908,908,908,908,908',
'908,,,908,,,,,,908,908,,908,908,908,908,908,908,908,908,908,,908,908',
'908,,908,908,,908,908,908,784,784,784,784,784,784,784,784,784,784,784',
',784,784,,,784,784,,908,,,908,,,908,908,,,908,,908,784,,784,908,784',
'784,784,784,784,784,784,908,784,,,,908,908,908,908,908,908,,,,908,908',
',784,,,,,908,,,908,908,908,,,908,908,329,329,329,329,329,329,,,,329',
'329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329,329,329,329',
'329,,,329,,,,,,329,329,,329,329,329,329,329,329,329,329,329,,329,329',
'329,,329,329,,329,329,329,781,781,781,781,781,781,781,781,781,781,781',
',781,781,,,781,781,,329,,,329,,,329,329,,,329,,329,781,,781,329,781',
'781,781,781,781,781,781,329,781,,,,329,329,329,329,329,329,,,,329,329',
',781,,,,,329,,,329,329,329,,,329,329,584,584,584,584,584,584,,,,584',
'584,,,,584,,584,584,584,584,584,584,584,,,,,,584,584,584,584,584,584',
'584,,,584,,,,,,584,584,,584,584,584,584,584,584,584,584,584,,584,584',
'584,,584,584,,584,584,584,779,779,779,779,779,779,779,779,779,779,779',
',779,779,,,779,779,,584,,,584,,,584,584,,,584,,584,779,,779,584,779',
'779,779,779,779,779,779,584,779,,,,584,584,584,584,584,584,,,,584,584',
',779,,,,,584,,,584,584,584,,,584,584,813,813,813,813,813,813,,,,813',
'813,,,,813,,813,813,813,813,813,813,813,,,,,,813,813,813,813,813,813',
'813,,,813,,,,,,813,813,,813,813,813,813,813,813,813,813,813,,813,813',
'813,,813,813,,813,813,813,479,479,479,479,479,479,479,,,479,479,,,,',
',479,479,,813,,,813,,,813,813,,,813,,813,479,,479,813,479,479,479,479',
'479,479,479,813,479,,,,813,813,813,813,813,813,,,,813,813,,,,,,,813',
',,813,813,813,,,813,813,809,809,809,809,809,809,,,,809,809,,,,809,,809',
'809,809,809,809,809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,',
'809,809,,809,809,809,809,809,809,809,809,809,,809,809,809,,809,809,',
'809,809,809,480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,809',
',,809,,,809,809,,,809,,809,480,,480,809,480,480,480,480,480,480,480',
'809,480,,,,809,809,809,809,809,809,,,,809,809,,,,,,,809,,,809,809,809',
',,809,809,938,938,938,938,938,938,,,,938,938,,,,938,,938,938,938,938',
'938,938,938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,938,938,,938',
'938,938,938,938,938,938,938,938,,938,938,938,,938,938,,938,938,938,464',
'464,464,464,464,464,464,464,464,464,464,,464,464,,,464,464,,938,,,938',
',,938,938,,,938,,938,464,,464,938,464,464,464,464,464,464,464,938,464',
',,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,,938,938,938,,,938',
'938,814,814,814,814,814,814,,,,814,814,,,,814,,814,814,814,814,814,814',
'814,,,,,,814,814,814,814,814,814,814,,,814,,,,,,814,814,,814,814,814',
'814,814,814,814,814,814,,814,814,814,,814,814,,814,814,814,481,481,481',
'481,481,481,481,,,481,481,,,,,,481,481,,814,,,814,,,814,814,,,814,,814',
'481,,481,814,481,481,481,481,481,481,481,814,481,,,,814,814,814,814',
'814,814,,,,814,814,,,,,,,814,,,814,814,814,,,814,814,824,824,824,824',
'824,824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824',
'824,824,824,824,824,,,824,,,,,,824,824,,824,824,824,824,824,824,824',
'824,824,,824,824,824,,824,824,,824,824,824,487,487,487,487,487,487,487',
'487,,487,487,,,,,,487,487,,824,,,824,,,824,824,,,824,,824,487,,487,824',
'487,487,487,487,487,487,487,824,487,,,,824,824,824,824,824,824,,,,824',
'824,,,,,,,824,,,824,824,824,,,824,824,855,855,855,855,855,855,,,,855',
'855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855',
'855,,,855,,,,,,855,855,,855,855,855,855,855,855,855,855,855,,855,855',
'855,,855,855,,855,855,855,486,486,486,486,486,486,486,,,486,486,,,,',
',486,486,,855,,,855,,,855,855,,,855,,855,486,,486,855,486,486,486,486',
'486,486,486,855,486,,,,855,855,855,855,855,855,,,,855,855,,,,,,,855',
',,855,855,855,,,855,855,707,707,707,707,707,707,,,,707,707,,,,707,,707',
'707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,',
'707,707,,707,707,707,707,707,707,707,707,707,,707,707,707,,707,707,',
'707,707,707,482,482,482,482,482,482,482,,,482,482,,,,,,482,482,,707',
',,707,,,707,707,,,707,,707,482,,482,707,482,482,482,482,482,482,482',
'707,482,,,,707,707,707,707,707,707,,,,707,707,,,,,,,707,,,707,707,707',
',,707,707,304,304,304,304,304,304,,,,304,304,,,,304,,304,304,304,304',
'304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,304,304,,304',
'304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304,483',
'483,483,483,483,483,483,,,483,483,,,,,,483,483,,304,,,304,,,304,304',
',,304,,304,483,,483,304,483,483,483,483,483,483,483,304,483,,,,304,304',
'304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304,971,971',
'971,971,971,971,,,,971,971,,,,971,,971,971,971,971,971,971,971,,,,,',
'971,971,971,971,971,971,971,,,971,,,,,,971,971,,971,971,971,971,971',
'971,971,971,971,,971,971,971,,971,971,,971,971,971,474,474,474,474,474',
'474,474,,,474,474,,,,,,474,474,,971,,,971,,,971,971,,,971,,971,474,',
'474,971,474,474,474,474,474,474,474,971,474,,,,971,971,971,971,971,971',
',,,971,971,,,,,,,971,,,971,971,971,,,971,971,299,299,299,299,299,299',
',,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299,299',
'299,299,299,,,299,,,,,,299,299,,299,299,299,299,299,299,299,299,299',
',299,299,299,,299,299,,299,299,299,463,463,463,463,463,463,463,463,463',
'463,463,,463,463,,,463,463,,299,,,299,,,299,299,,,299,,299,463,,463',
'299,463,463,463,463,463,463,463,299,463,,,,299,299,299,299,299,299,',
',,299,299,,,,,,,299,,,299,299,299,,,299,299,856,856,856,856,856,856',
',,,856,856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856,856,856',
'856,856,856,,,856,,,,,,856,856,,856,856,856,856,856,856,856,856,856',
',856,856,856,,856,856,,856,856,856,471,,,,,,,,,,,,,,,,471,471,,856,',
',856,,473,856,856,,,856,,856,471,,471,856,471,471,471,471,473,473,,856',
',,,,856,856,856,856,856,856,,,473,856,856,,473,473,473,473,,856,,,856',
'856,856,,,856,856,986,986,986,986,986,986,,,,986,986,,,,986,,986,986',
'986,986,986,986,986,,,,,,986,986,986,986,986,986,986,,,986,,,,,,986',
'986,,986,986,986,986,986,986,986,986,986,,986,986,986,,986,986,,986',
'986,986,472,,,,,,,,,,,,,,,,472,472,,986,,,986,,,986,986,,,986,,986,472',
',472,986,472,472,472,472,,,,986,,,,,986,986,986,986,986,986,,,,986,986',
',,,,,,986,,,986,986,986,,,986,986,234,234,234,234,234,234,,,,234,234',
',,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234',
',,234,,,,,,234,234,,234,234,234,234,234,234,234,234,234,,234,234,234',
',234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,',
'234,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234',
',,234,234,234,,,234,234,719,719,719,,719,,,,719,719,,,,719,,719,719',
'719,719,719,719,719,,,,,,719,719,719,719,719,719,719,,,719,,,,,,,719',
',,719,719,719,719,719,719,719,719,,719,719,719,,719,719,,719,719,719',
',,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,,719,,,,,,719,,,,,,,,719,,,',
',719,719,719,719,719,719,,,,719,719,,,,,,,719,,,719,719,719,,,719,719',
'23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23',
'23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23',
'23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23',
'23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,',
'32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,',
',,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,',
',,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32',
'32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33',
',,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,',
',,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33',
'33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34',
',,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34',
'34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45,45,45',
',45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,',
',45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,',
',,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,',
',,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,',
'46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47,47',
'47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47',
'47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,',
'47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47',
',,47,47,47,,,47,47,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61',
'61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,',
'61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,',
'61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62',
'62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,',
',,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,63',
'63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63',
'63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63',
'63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66,',
',,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,',
',,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,',
',,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66',
'66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,',
',,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70',
'70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70',
'70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70',
',,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70',
'70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,',
',,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,1012,1012',
'1012,,1012,,,,1012,1012,,,,1012,,1012,1012,1012,1012,1012,1012,1012',
',,,,,1012,1012,1012,1012,1012,1012,1012,,,1012,,,,,,,1012,,,1012,1012',
'1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,,1012,1012,,1012,1012',
'1012,,,,,,,,,,,,,,,,,,,,1012,,,1012,,,1012,1012,,,1012,,1012,,1012,',
'1012,,,,,,,,1012,,,,,1012,1012,1012,1012,1012,1012,,,,1012,1012,,,,',
',,1012,,1012,1012,1012,1012,,,1012,1012,114,114,114,114,114,,,,114,114',
',,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114',
'114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114',
',114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114',
'114,,,114,114,114,,,114,114,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,',
',119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119',
'119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119',
',,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119',
'119,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120,120,120',
',,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120',
'120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120',
',,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120',
',,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121,,121,,,,121',
'121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121',
'121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,',
'121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,',
',121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122,122,,,,,',
',,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122',
'122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122,122,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,217,217',
'217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,218,,,,218,,,',
',,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,221,221,,,221,221',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,222,,,,,,222,,,222,222,222,,,222,222,233,233,233,,233,,,',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,',
',,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
'237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,',
',237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237',
'237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,',
'237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239',
'239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239',
'239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,',
',,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239',
'239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240',
'240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240',
',,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240',
'240,,,,,,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,',
',241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,',
',241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241',
',241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241',
'241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,',
',,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243',
'243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243',
',,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,',
',,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244',
'244,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246',
'246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,',
'246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,',
',246,246,246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248',
'248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248',
',,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248',
'248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,',
',249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,',
',249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249',
',249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,',
',,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250',
'250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252',
'252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,268,268,268,268',
',268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,',
'268,,268,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,',
',,268,,268,268,268,268,,,268,268,274,274,274,,274,,,,274,274,,,,274',
',274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274',
',,,,,,274,,,274,274,274,274,274,274,274,274,274,274,274,274,,274,274',
',274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274',
',274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,274',
'274,274,274,,,274,274,277,277,277,,277,,,,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277',
'277,277,277,277,277,277,277,277,277,277,277,,277,277,,277,277,277,,',
',,,,,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,277,,277,,277,,,,,,,,277',
',,,,277,277,277,277,277,277,,,,277,277,277,,,,,,277,,277,277,277,277',
',,277,277,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284',
'284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284',
'284,284,284,284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,',
',,284,,,284,,,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284',
'284,284,,,,284,284,,,,,,,284,,,284,284,284,,,284,284,286,286,286,,286',
',,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286',
'286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286',
'286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286',
',,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286',
',,286,286,286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288',
',,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,',
',288,288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288',
'290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,',
',290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290',
'290,290,,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,',
'290,,,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290',
',,,290,290,,,,,,,290,,,290,290,290,,,290,290,291,291,291,,291,,,,291',
'291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291,291,291,291',
'291,,,291,,,,,,,291,,,291,291,291,291,291,291,291,291,,291,291,291,',
'291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,',
',,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291,,,,,,,291,',
',291,291,291,,,291,291,297,297,297,297,297,,,,297,297,,,,297,,297,297',
'297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,297',
'297,,297,297,297,297,297,297,297,297,297,,297,297,297,,297,297,,297',
'297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,297,,,,297,,,',
',,,,297,,,,,297,297,297,297,297,297,,,,297,297,,,,,,,297,,,297,297,297',
',,297,297,303,303,303,,303,,,,303,303,,,,303,,303,303,303,303,303,303',
'303,,,,,,303,303,303,303,303,303,303,,,303,,,,,,,303,,,303,303,303,303',
'303,303,303,303,,303,303,303,,303,303,,,,303,,,,,,,,,,,,,,,,,,,,303',
',,303,,,303,303,,,303,,,,,,,,,,,,,,,,,,,303,303,303,303,303,303,,,,303',
'303,,,,303,,,303,,,303,303,303,,,303,303,937,937,937,,937,,,,937,937',
',,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937,937',
',,937,,,,,,,937,,,937,937,937,937,937,937,937,937,,937,937,937,,937',
'937,,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937,937,,,937,,937,',
',,937,,,,,,,,937,,,,,937,937,937,937,937,937,,,,937,937,,,,,,,937,,',
'937,937,937,,,937,937,320,320,320,,320,,,,320,320,,,,320,,320,320,320',
'320,320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320',
'320,320,320,320,320,320,320,,320,320,320,,320,320,,,,320,,,,,,,,,,,',
',,,,,,,,320,,,320,,,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320',
'320,320,,,,320,320,,,,,,,320,,,320,320,320,,,320,320,328,328,328,,328',
',,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328',
'328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328',
'328,,328,328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328',
',,328,,,,,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,',
',,,328,,,328,328,328,,,328,328,912,912,912,,912,,,,912,912,,,,912,,912',
'912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912,,,912,,,,,',
',912,,,912,912,912,912,912,912,912,912,,912,912,912,,912,912,,,,912',
',,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,,,,,,,,,,,,,,,,,,912,912',
'912,912,912,912,,,,912,912,,,,,,,912,,,912,912,912,,,912,912,347,347',
'347,,347,,,,347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347',
'347,347,347,347,347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347',
',347,347,347,,347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347',
'347,,,347,,,,,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347',
',,,,,,347,,,347,347,347,,,347,347,348,348,348,,348,,,,348,348,,,,348',
',348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348,348,,,348',
',,,,,,348,,,348,348,348,348,348,348,348,348,,348,348,348,,348,348,,348',
'348,348,,,,,,,,,,,,,,,,,,,,348,,,348,,,348,348,,,348,,,,,,348,,,,,,',
',348,,,,,348,348,348,348,348,348,,,,348,348,,,,,,,348,,,348,348,348',
',,348,348,900,900,900,,900,,,,900,900,,,,900,,900,900,900,900,900,900',
'900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,,900,,,900,900,900,900',
'900,900,900,900,,900,900,900,,900,900,,,,900,,,,,,,,,,,,,,,,,,,,900',
',,900,,,900,900,,,900,,,,,,,,,,,,,,,,,,,900,900,900,900,900,900,,,,900',
'900,,,,,,,900,,,900,900,900,,,900,900,360,360,360,,360,,,,360,360,,',
',360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,',
',360,,,,,,,360,,,360,360,360,360,360,360,360,360,,360,360,360,,360,360',
',,,360,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,,,,,,,,,,,',
',,360,360,360,360,360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360,360',
'362,362,362,,362,,,,362,362,,,,362,,362,362,362,362,362,362,362,,,,',
',362,362,362,362,362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362',
'362,362,,362,362,362,,362,362,,,,362,,,,,,,,,,,,,,,,,,,,362,,,362,,',
'362,362,,,362,,,,,,,,,,,,,,,,,,,362,362,362,362,362,362,,,,362,362,',
',,,,,362,,,362,362,362,,,362,362,885,885,885,,885,,,,885,885,,,,885',
',885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885',
',,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885,,885,885,,885',
'885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,885,,,,,,',
',885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885,,,885,885,885',
',,885,885,884,884,884,,884,,,,884,884,,,,884,,884,884,884,884,884,884',
'884,,,,,,884,884,884,884,884,884,884,,,884,,,,,,,884,,,884,884,884,884',
'884,884,884,884,884,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,',
',,,,,884,,,884,,,884,884,,,884,,,,884,,884,,,,,,,,884,,,,,884,884,884',
'884,884,884,,,,884,884,,,,,,,884,,884,884,884,884,,,884,884,420,420',
'420,,420,,,,420,420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420',
'420,420,420,420,420,,,420,,,,,,,420,,,420,420,420,420,420,420,420,420',
',420,420,420,,420,420,,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420',
'420,,,420,,,,,,420,,,,,,,,420,,,,,420,420,420,420,420,420,,,,420,420',
',,,,,,420,,,420,420,420,,,420,420,866,866,866,,866,,,,866,866,,,,866',
',866,866,866,866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866',
',,,,,,866,,,866,866,866,866,866,866,866,866,,866,866,866,,866,866,,866',
'866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866,,,,,,',
',866,,,,,866,866,866,866,866,866,,,,866,866,,,,,,,866,,,866,866,866',
',,866,866,458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458',
'458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458',
'458,458,458,458,458,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,',
',,,,,458,,,458,,,458,458,,,458,,458,,458,,458,,,,,,,,458,,,,,458,458',
'458,458,458,458,,,,458,458,,,,,,,458,,458,458,458,458,,,458,458,460',
'460,460,,460,,,,460,460,,,,460,,460,460,460,460,460,460,460,,,,,,460',
'460,460,460,460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460,460',
'460,,460,460,460,,460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460',
',,460,460,,,460,,,,,,460,,,,,,,,460,,,,,460,460,460,460,460,460,,,,460',
'460,,,,,,,460,,,460,460,460,,,460,460,461,461,461,,461,,,,461,461,,',
',461,,461,461,461,461,461,461,461,,,,,,461,461,461,461,461,461,461,',
',461,,,,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461,,461,461',
',461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,',
',,,,,,461,,,,,461,461,461,461,461,461,,,,461,461,,,,,,,461,,,461,461',
'461,,,461,461,462,462,462,,462,,,,462,462,,,,462,,462,462,462,462,462',
'462,462,,,,,,462,462,462,462,462,462,462,,,462,,,,,,,462,,,462,462,462',
'462,462,462,462,462,,462,462,462,,462,462,,462,462,462,,,,,,,,,,,,,',
',,,,,,462,,,462,,,462,462,,,462,,,,,,462,,,,,,,,462,,,,,462,462,462',
'462,462,462,,,,462,462,,,,,,,462,,,462,462,462,,,462,462,853,853,853',
',853,,,,853,853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853',
'853,853,853,853,,,853,,,,,,,853,,,853,853,853,853,853,853,853,853,,853',
'853,853,,853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853',
',,853,,,,,,853,,,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,,,',
',,,853,,,853,853,853,,,853,853,503,503,503,,503,,,,503,503,,,,503,,503',
'503,503,503,503,503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,',
',503,,,503,503,503,503,503,503,503,503,503,503,503,503,,503,503,,503',
'503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,503,,503',
',,,,,,,503,,,,,503,503,503,503,503,503,,,,503,503,,,,,,,503,,503,503',
'503,503,,,503,503,506,506,506,,506,,,,506,506,,,,506,,506,506,506,506',
'506,506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,,506,,,506,506',
'506,506,506,506,506,506,506,506,506,506,,506,506,,506,506,506,,,,,,',
',,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,506,,506,,,,,,,,506,,,,,506',
'506,506,506,506,506,,,,506,506,,,,,,,506,,506,506,506,506,,,506,506',
'508,508,508,,508,,,,508,508,,,,508,,508,508,508,508,508,508,508,,,,',
',508,508,508,508,508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508',
'508,508,,508,508,508,,508,508,,508,508,508,,,,,,,,,,,,,,,,,,,,508,,',
'508,,,508,508,,,508,,,,,,508,,,,,,,,508,,,,,508,508,508,508,508,508',
',,,508,508,,,,,,,508,,,508,508,508,,,508,508,515,515,515,515,515,,,',
'515,515,,,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515',
'515,515,,,515,,,,,,515,515,,515,515,515,515,515,515,515,515,515,,515',
'515,515,,515,515,,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515',
',,515,,515,,,,515,,,,,,,,515,,,,,515,515,515,515,515,515,,,,515,515',
',,,,,515,515,,,515,515,515,,,515,515,522,522,522,,522,,,,522,522,,,',
'522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522,522,522,,',
'522,,,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522,,522,522',
',,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,,,,,,,,,,,,,,,',
',,522,522,522,522,522,522,,,,522,522,,,,,,,522,,,522,522,522,,,522,522',
'524,524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524,,,,',
',524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524',
'524,524,524,524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524',
',,524,,,524,524,,,524,,524,,524,,524,,,,,,,,524,,,,,524,524,524,524',
'524,524,,,,524,524,,,,,,,524,,524,524,524,524,,,524,524,530,530,530',
',530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530,530',
'530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530',
'530,530,,530,530,,,,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530',
',,,,,,,,,,,,,,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,,,530',
'530,530,,,530,530,533,533,533,,533,,,,533,533,,,,533,,533,533,533,533',
'533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533',
'533,533,533,533,533,533,,533,533,533,,533,533,,533,533,533,,,,,,,,,',
',,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,533,,,,,533,533',
'533,533,533,533,,,,533,533,,,,,,,533,,,533,533,533,,,533,533,534,534',
'534,,534,,,,534,534,,,,534,,534,534,534,534,534,534,534,,,,,,534,534',
'534,534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534,534,534,534',
',534,534,534,,534,534,,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534',
'534,,,534,,,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,,534,534',
',,,,,,534,,,534,534,534,,,534,534,538,538,538,,538,,,,538,538,,,,538',
',538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538',
',,,,,,538,,,538,538,538,538,538,538,538,538,,538,538,538,,538,538,,538',
'538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,,,,,538,,,,,,',
',538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,,538,538,538',
',,538,538,806,806,806,,806,,,,806,806,,,,806,,806,806,806,806,806,806',
'806,,,,,,806,806,806,806,806,806,806,,,806,,,,,,,806,,,806,806,806,806',
'806,806,806,806,,806,806,806,,806,806,,,,806,,,,,,,,,,,,,,,,,,,,806',
',,806,,,806,806,,,806,,,,,,,,,,,,,,,,,,,806,806,806,806,806,806,,,,806',
'806,,,,,,,806,,,806,806,806,,,806,806,794,794,794,,794,,,,794,794,,',
',794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794,794,',
',794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794,,794,794',
',794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,,,,,794,',
',,,,,,794,,,,,794,794,794,794,794,794,,,,794,794,,,,,,,794,,,794,794',
'794,,,794,794,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544',
'544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544',
'544,544,544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,',
',,,,,,,,,544,,,544,,,544,544,,,544,,544,,,,544,,,,,,,,544,,,,,544,544',
'544,544,544,544,,,,544,544,,,,,,,544,,544,544,544,544,,,544,544,547',
'547,547,,547,,,,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547',
'547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547',
'547,547,547,547,547,,547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547',
',,547,547,,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547',
'547,,,,,,,547,,547,547,547,547,,,547,547,792,792,792,,792,,,,792,792',
',,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792',
',,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792,792,792,,792',
'792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792',
',,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,,,,,,,792,,,792,792',
'792,,,792,792,791,791,791,,791,,,,791,791,,,,791,,791,791,791,791,791',
'791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791,,,791,791,791',
'791,791,791,791,791,,791,791,791,,791,791,,791,791,791,,,,,,,,,,,,,',
',,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791,791,791',
'791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791,790,790,790',
',790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790',
'790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790',
'790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790',
',,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,',
',,,790,,,790,790,790,,,790,790,789,789,789,,789,,,,789,789,,,,789,,789',
'789,789,789,789,789,789,,,,,,789,789,789,789,789,789,789,,,789,,,,,',
',789,,,789,789,789,789,789,789,789,789,,789,789,789,,789,789,,789,789',
'789,,,,,,,,,,,,,,,,,,,,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789',
',,,,789,789,789,789,789,789,,,,789,789,,,,,,,789,,,789,789,789,,,789',
'789,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572',
',,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572',
'572,572,572,,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572',
',,572,,,572,572,,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572',
',,,572,572,,,,,,,572,,,572,572,572,,,572,572,775,775,775,,775,,,,775',
'775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775,775',
'775,,,775,,,,,,,775,,,775,775,775,775,775,775,775,775,,775,775,775,',
'775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775,,,775,,',
',,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,,,,,,,775,',
',775,775,775,,,775,775,773,773,773,,773,,,,773,773,,,,773,,773,773,773',
'773,773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,,,773,,,773',
'773,773,773,773,773,773,773,,773,773,773,,773,773,,773,773,773,,,,,',
',,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,,,,,773,,,,,,,,773,,,,,773',
'773,773,773,773,773,,,,773,773,,,,,,,773,,,773,773,773,,,773,773,593',
'593,593,,593,,,,593,593,,,,593,,593,593,593,593,593,593,593,,,,,,593',
'593,593,593,593,593,593,,,593,,,,,,,593,,,593,593,593,593,593,593,593',
'593,593,593,593,593,,593,593,,593,593,593,,,,,,,,,,,,,,,,,,,,593,,,593',
',,593,593,,,593,,593,,593,,593,,,,,,,,593,,,,,593,593,593,593,593,593',
',,,593,593,,,,,,,593,,593,593,593,593,,,593,593,8,8,8,8,8,,,,8,8,,,',
'8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8',
',8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,',
',8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,605,605,605,,605,,,',
'605,605,,,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605,605',
'605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605,605,605',
',605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,',
',,,,605,,,,,,,,605,,,,,605,605,605,605,605,605,,,,605,605,,,,,,,605',
',,605,605,605,,,605,605,609,609,609,,609,,,,609,609,,,,609,,609,609',
'609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,,,609',
',,609,609,609,609,609,609,609,609,,609,609,609,,609,609,,609,609,609',
',,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,,,,,609,,,,,,,,609,,,',
',609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,609,609,,,609,609',
'638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,',
',638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638',
'638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,',
'638,,,638,638,,,638,,638,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638',
',,,638,638,,,,,,,638,,,638,638,638,,,638,638,639,639,639,,639,,,,639',
'639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639,639,639',
'639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639,,639,639,639,',
'639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,',
',,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639,,,,,,,639,',
',639,639,639,,,639,639,642,642,642,,642,,,,642,642,,,,642,,642,642,642',
'642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642',
'642,642,642,642,642,642,642,642,642,642,642,,642,642,,642,642,642,,',
',,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,642,,642,,642,,,,,,,,642',
',,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642,642,642,642,,',
'642,642,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643',
'643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643',
'643,643,643,643,643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,',
',,,,,643,,,643,,,643,643,,,643,,,,643,,643,,,,,,,,643,,,,,643,643,643',
'643,643,643,,,,643,643,,,,,,,643,,643,643,643,643,,,643,643,644,644',
'644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644',
'644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644',
',644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644',
'644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644',
',,,,,,644,,,644,644,644,,,644,644,645,645,645,,645,,,,645,645,,,,645',
',645,645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645',
',,,,,,645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,,645',
'645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,',
',645,,,,,645,645,645,645,645,645,,,,645,645,,,,,,,645,,,645,645,645',
',,645,645,650,650,650,,650,,,,650,650,,,,650,,650,650,650,650,650,650',
'650,,,,,,650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650,650',
'650,650,650,650,,650,650,650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,',
',,650,,,650,,,650,650,,,650,,,,,,650,,,,,,,,650,,,,,650,650,650,650',
'650,650,,,,650,650,,,,,,,650,,,650,650,650,,,650,650,651,651,651,,651',
',,,651,651,,,,651,,651,651,651,651,651,651,651,,,,,,651,651,651,651',
'651,651,651,,,651,,,,,,,651,,,651,651,651,651,651,651,651,651,,651,651',
'651,,651,651,,651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651,,,651,651,,,651',
',,,,,651,,,,,,,,651,,,,,651,651,651,651,651,651,,,,651,651,,,,,,,651',
',,651,651,651,,,651,651,654,654,654,,654,,,,654,654,,,,654,,654,654',
'654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654',
',,654,654,654,654,654,654,654,654,,654,654,654,,654,654,,654,654,654',
',,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,654,,,',
',654,654,654,654,654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654,654',
'655,655,655,,655,,,,655,655,,,,655,,655,655,655,655,655,655,655,,,,',
',655,655,655,655,655,655,655,,,655,,,,,,,655,,,655,655,655,655,655,655',
'655,655,,655,655,655,,655,655,,655,655,655,,,,,,,,,,,,,,,,,,,,655,,',
'655,,,655,655,,,655,,,,,,655,,,,,,,,655,,,,,655,655,655,655,655,655',
',,,655,655,,,,,,,655,,,655,655,655,,,655,655,751,751,751,,751,,,,751',
'751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751,751',
'751,,,751,,,,,,,751,,,751,751,751,751,751,751,751,751,751,751,751,751',
',751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751,,,751,',
'751,,751,,751,,,,,,,,751,,,,,751,751,751,751,751,751,,,,751,751,,,,',
',,751,,751,751,751,751,,,751,751,679,679,679,,679,,,,679,679,,,,679',
',679,679,679,679,679,679,679,,,,,,679,679,679,679,679,679,679,,,679',
',,,,,,679,,,679,679,679,679,679,679,679,679,,679,679,679,,679,679,,679',
'679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,,,,,679,,,,,,',
',679,,,,,679,679,679,679,679,679,,,,679,679,,,,,,,679,,,679,679,679',
',,679,679,682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682',
'682,,,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682',
'682,682,682,682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,',
',,682,,,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682',
'682,682,,,,682,682,,,,,,,682,,,682,682,682,,,682,682,685,685,685,,685',
',,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685',
'685,685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685',
'685,,685,685,,,,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,',
',,,,,,,,,,,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,685',
'685,,,685,685,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745',
'745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745',
'745,745,745,745,745,,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,',
',,,,,,745,,,745,,,745,745,,,745,,,,,,745,,,,,,,,745,,,,,745,745,745',
'745,745,745,,,,745,745,,,,,,,745,,,745,745,745,,,745,745,696,696,696',
',696,,,,696,696,,,,696,,696,696,696,696,696,696,696,,,,,,696,696,696',
'696,696,696,696,,,696,,,,,,,696,,,696,696,696,696,696,696,696,696,,696',
'696,696,,696,696,,,,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696',
',,,,,,,,,,,,,,,,,,696,696,696,696,696,696,,,,696,696,,,,,,,696,,,696',
'696,696,,,696,696,739,739,739,,739,,,,739,739,,,,739,,739,739,739,739',
'739,739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739',
'739,739,739,739,739,739,,739,739,739,,739,739,,739,739,739,,,,,,,,,',
',,,,,,,,,,739,,,739,,,739,739,,,739,,739,,,,739,,,,,,,,739,,,,,739,739',
'739,739,739,739,,,,739,739,,,,,,,739,,,739,739,739,,,739,739,701,701',
'701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701',
'701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701,701',
',701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701',
'701,,,701,,701,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701',
'701,,,,,,,701,,,701,701,701,,,701,701,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91,91',
'91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91',
'91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91',
'91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74',
'74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74',
'74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74',
',74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11',
'11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,',
',,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,',
',,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,',
',,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12',
'12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12',
',,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,',
',,12,,,,,,,,,12,761,761,761,761,761,761,761,761,761,761,761,761,761',
'761,761,761,761,761,761,761,761,761,761,761,,,,761,761,761,761,761,761',
'761,761,761,761,,,,,,761,761,761,761,761,761,761,761,761,,,761,,,,,',
',,,761,761,,761,761,761,761,761,761,761,,,761,761,,,,761,761,761,761',
',,,,,,,,,,,,,761,761,,761,761,761,761,761,761,761,761,761,761,761,,',
'761,,,,,,,,,,,,,,,,,,,,761,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,411,411,411,,,,411,411,411,411',
'411,411,411,411,411,411,,,,,,411,411,411,411,411,411,411,411,411,,,411',
',,,,,,,,411,411,,411,411,411,411,411,411,411,,,411,411,,,,411,411,411',
'411,,,,,,,,,,,,,,411,411,,411,411,411,411,411,411,411,411,411,411,411',
',,411,411,,,,,,,,,,411,,,,,,,,,411,635,635,635,635,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,635,635,635,635,635,635,,,,635,635',
'635,635,635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,635',
'635,,,635,,,,,,,,,635,635,,635,635,635,635,635,635,635,,,635,635,,,',
'635,635,635,635,,,,,,,,,,,,,,635,635,,635,635,635,635,635,635,635,635',
'635,635,635,,,635,635,,,,490,,,,,,635,490,490,490,,,490,490,490,635',
'490,1016,,1016,1016,1016,1016,1016,,490,490,,,,,,,1016,,,490,490,,490',
'490,490,490,490,,,759,,759,759,759,759,759,,,1016,,,,,,,759,,,,1016',
'1016,,,,,,,,,,,490,,,,,,759,490,,,,,490,490,,759,759,759,759,,,,1016',
',456,456,,,456,,,,,,490,490,,456,456,,456,456,456,456,456,456,456,,490',
'456,456,759,,490,456,456,456,456,,,,,,456,,,,,,,,456,456,,456,456,456',
'456,456,456,456,456,456,456,456,,,456,,,,,457,457,,,457,,,,,,,,,457',
'457,456,457,457,457,457,457,457,457,,,457,457,,,,457,457,457,457,,,',
',,457,,,,,,,,457,457,,457,457,457,457,457,457,457,457,457,457,457,,997',
'457,997,997,997,997,997,,,,,,,,,,997,,,,,457,,,,,,,,,999,,999,999,999',
'999,999,,997,525,525,,,525,,,999,997,997,997,997,,525,525,,525,525,525',
'525,525,525,525,,,525,525,,,999,525,525,525,525,,,,,,525,999,999,,,997',
',,525,525,,525,525,525,525,525,525,525,525,525,525,525,,,525,,,,,526',
'526,,,526,,999,,,,,,,526,526,525,526,526,526,526,526,526,526,,,526,526',
',,,526,526,526,526,,,,,,526,,,,,,,,526,526,,526,526,526,526,526,526',
'526,526,526,526,526,,,526,,,,,213,213,,,213,,,,,,,,,213,213,526,213',
'213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,,',
',213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,,,214',
'214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214,214',
',,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214,214',
'214,214,214,214,214,,1001,214,1001,1001,1001,1001,1001,,,535,535,,,535',
',,1001,,,,,214,535,535,,535,535,535,535,535,535,535,,,535,535,,,1001',
'535,535,535,535,,,,,,535,1001,1001,,,,,,535,535,,535,535,535,535,535',
'535,535,535,535,535,535,,1003,535,1003,1003,1003,1003,1003,,,536,536',
',1001,536,,,1003,,,,,535,536,536,,536,536,536,536,536,536,536,,,536',
'536,,,1003,536,536,536,536,,,,,,536,1003,1003,,,,,,536,536,,536,536',
'536,536,536,536,536,536,536,536,536,,715,536,715,715,715,715,715,,,',
',,1003,,,,715,,,,713,536,713,713,713,713,713,552,,552,552,552,552,552',
',,713,,715,,,,,552,,,,715,715,715,715,,,,,,,666,713,666,666,666,666',
'666,,552,,713,713,713,713,,,666,552,552,552,552,,,,,,715,,,,,,,,,,,',
'666,,,750,750,,,750,713,666,666,666,666,,,552,750,750,,750,750,750,750',
'750,750,750,,,750,750,,,,750,750,750,750,666,,,,,750,,,666,,,,,750,750',
',750,750,750,750,750,750,750,750,750,750,750,,,750,,,,,749,749,,,749',
',,,,,,,,749,749,750,749,749,749,749,749,749,749,,,749,749,,,,749,749',
'749,749,,,,,,749,,,,,,,,749,749,,749,749,749,749,749,749,749,749,749',
'749,749,,,749,,,,,264,264,,,264,,,,,,,,,264,264,749,264,264,264,264',
'264,264,264,,,264,264,,,,264,264,264,264,,,,,,,,,,,,,,264,264,,264,264',
'264,264,264,264,264,264,264,264,264,,717,264,717,717,717,717,717,,,594',
'594,,,594,,,717,,,,,264,594,594,,594,594,594,594,594,594,594,,,594,594',
',,717,594,594,594,594,,,,,,594,717,717,,,,,,594,594,,594,594,594,594',
'594,594,594,594,594,594,594,,,594,,,,,595,595,,,595,,717,,,,,,,595,595',
'594,595,595,595,595,595,595,595,,,595,595,,,,595,595,595,595,,,,,,595',
',,,,,,,595,595,,595,595,595,595,595,595,595,595,595,595,595,,,595,,',
',,964,964,,,964,,,,,,,,,964,964,595,964,964,964,964,964,964,964,,,964',
'964,,,,964,964,964,964,,,,,,964,,,,,,,,964,964,,964,964,964,964,964',
'964,964,964,964,964,964,,,964,,,,,1013,1013,,,1013,,,,,,,,,1013,1013',
'964,1013,1013,1013,1013,1013,1013,1013,,,1013,1013,,,,1013,1013,1013',
'1013,,,,,,1013,,,,,,,,1013,1013,,1013,1013,1013,1013,1013,1013,1013',
'1013,1013,1013,1013,,947,1013,947,947,947,947,947,607,,607,607,607,607',
'607,,,947,,,,,1013,,607,924,,924,924,924,924,924,,,,,,,,947,947,924',
',,,,607,607,947,947,947,947,,,,607,607,607,607,,,,922,924,922,922,922',
'922,922,,,,,,924,924,,920,922,920,920,920,920,920,947,,,,,,,607,,920',
',,,,,,922,918,,918,918,918,918,918,924,,,922,922,,,920,,918,,,,,,,,',
'920,920,,,,,,,,,,,,918,,,,,,922,,,918,918,918,918,,,,1014,1014,,,1014',
'920,,,,,,,,1014,1014,,1014,1014,1014,1014,1014,1014,1014,,,1014,1014',
',,918,1014,1014,1014,1014,,,,,,1014,,,,,,,,1014,1014,,1014,1014,1014',
'1014,1014,1014,1014,1014,1014,1014,1014,,343,1014,343,343,343,343,343',
',,,,,,,,,343,,,,,1014,,,,,,,,,,,,,,,,,343,343,,,,,,,,343,343,343,343',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,343' ]
        racc_action_check = arr = ::Array.new(26605, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    51,  2556,  1200,   nil,   561,   nil,   nil, 21198,  1398,
   nil, 24404, 24537,  1077,   nil,  1037,  1090,   597,   790,  1032,
   675,   nil,   -79,  5938,  3261,  1119,   nil,   361,   nil,   269,
  1178,   928,  6078,  6218,  6358,   nil,  2415,  6498,  6638,   nil,
  1016,   711,   544,  1087,   263,  6778,  6918,  7058,  1014,   629,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   796,
   nil,  7198,  7338,  7478,   -23,   nil,  7618,  7758,   nil,   nil,
  7898,  8038,  1056,   nil, 24271,   nil,   nil,   nil,   nil,   nil,
   -95,   nil,   nil,   nil,   nil,   nil,   nil,  1005,   981,   973,
   971, 24138,   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,
   nil,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  8318,   nil,   nil,   nil,   nil,  8458,
  8598,  8738,  8878,  9018,   987,   nil,   363,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   969,   nil,  2133,
  9158,  9298,  9438, 25411, 25479,   nil,   nil,  9578,  9718,  9858,
  9998, 10138, 10278,   nil,   nil,   611,   -32,   -29,  1042,   138,
   942,   994,   nil, 10418,  5658,   985, 10558, 10698, 10838, 10978,
 11118, 11258, 11398, 11538, 11678, 11818, 11958, 12098, 12238, 12378,
 12518, 12658, 12798, 12938, 13078, 13218, 13358, 13498, 13638, 13778,
 13918, 14058,   nil,   nil, 25917,   nil,   nil,   967, 14198,   nil,
   968,   nil,   nil,   nil, 14338,   nil,   nil, 14478,   nil,  1992,
   nil,   913,   909,   nil, 14618,   942, 14758,   nil, 14898,   nil,
 15038, 15178,   nil,   nil,   -69,   nil,  1440, 15318,   884,  5235,
   900,   929,   888, 15458,  4953,   483,   486,   735,   930,   504,
   nil,   894,   840,   -19,   nil,   nil,   nil,   873,   -44,   827,
 15738,   nil,   671,   885,   625,   nil,   884,   nil, 15878,  3684,
   711,   nil,   858,   nil,   564,   184,   851,   832,   nil,   422,
   845,   nil,   nil, 26470,   501,    -8,    44, 16158, 16298,   -78,
   914,   790,    57,    62,   705,   863,   164,   893,   nil,   nil,
 16578,   nil, 16718,   -47,   501,   105,   179,   341,   482,   295,
   278,   458,   nil,   188,   nil,   nil,   nil,   nil,   nil,   256,
   nil,   527,   nil,   559,   nil,   785,   531,   nil,   783,   394,
   nil,   773,   -33,   nil,   771,   -28,   nil,   340,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2838, 24803,   nil,   nil,   nil,   nil,   775,   nil,   nil,   757,
 17138,   727,   nil,   nil,  1710,   728,   nil,   nil,   723,   721,
   631,   687,  1053,   nil,   nil,   nil,     0,   533,   759,   nil,
   nil,  1435,  1303,   nil,  2415,   nil,   703,   nil,   nil,  1569,
   nil,   nil,   nil,   nil,   -12,   nil, 25106, 25174, 17418,   154,
 17558, 17698, 17838,  5235,  4248,   489,   984,   777,   775,   774,
   761,  5376,  5517,  5400,  5094,  1251,  1385,  1001,  1126,  3966,
  4107,  4389,  4812,  4953,  1010,   883,  4671,  4530,  2556,   -63,
 25055,   nil,   nil,   nil,   nil,   nil,   nil,   -60,   -49,   693,
   691,   nil,   nil, 18118,   nil,   nil, 18258,   nil, 18398,   nil,
   186,   nil,   nil,   nil,   nil, 18538,  1510,   681,   549,   nil,
   nil,   532, 18678,   529, 18818, 25275, 25343,   536,   545,   nil,
 18958,   504,   nil, 19098, 19238, 25550, 25621,  2133, 19378,   618,
   492,   373,   nil,   nil, 19798,   nil,   nil, 19938,   nil,   nil,
   nil,   -23, 25710,   nil,   368,   362,   nil,   316,   306,   295,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   267,   993,
   nil,   nil, 20638,   nil,   nil,   nil,   354,   nil,   nil,   nil,
   348,   nil,   nil,   342,  3825,   363,   nil,  3402,   191,   189,
   345,   346,   nil, 21058, 25988, 26056,    -5,   nil,   340,   441,
   246,   nil,   472,   nil,     9, 21338,   nil, 26261,   nil, 21478,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   433,   nil,   nil,   337,   nil,   nil,   nil,   197,   nil,
   nil,   165,   nil,   154,   nil, 24936,   nil,   132, 21618, 21758,
   701,   150, 21898, 22038, 22178, 22318,   126,   nil,   nil,   nil,
 22458, 22598,   124,   nil, 22738, 22878,   nil,   258,   -42,   658,
   401,    63,  1851,    43,   nil,   nil, 25740,   nil,   nil,   121,
   -24,   -45,   nil,   nil,   nil,   nil,    17,   nil,   -27, 23158,
   nil,   nil, 23298,  1385,  -109, 23438,  -107,   nil,  1108,   152,
   136,  1138,    30,   768,  1136,  1095, 23718,  2838,  1155,   223,
  1197, 23998,   nil,   nil,   433,   nil,  1851,  4812,  1081,   356,
   nil,   nil,   211, 25703,   nil, 25683,   nil, 25979,   nil,  5798,
   nil,  1019,   nil,  1079,   396,  1086,   nil,   nil,   nil,   nil,
    20,   nil,  1199,   nil,   nil,   nil,   nil,  1207,   nil, 23858,
  1097,    58,   157,   224,   194, 23578,   nil,   804,   nil, 25849,
 25781, 23018,   nil,   nil,   nil,   497,   714,  2274,  3120, 25050,
   111, 24670,   203,   663,  3261,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   215, 20918,  2697, 20778,   nil,   254,   nil,  3825,
   nil,  3684,   nil,   nil,  3543,   nil,  3120,   nil,  2979, 20498,
 20358, 20218, 20078,   148, 19658,   382,   394,   nil,   410,   436,
   452,   nil,   474,   469,   466,   455, 19518,   nil,   nil,  4107,
   nil,   nil,   nil,  3966,  4389,   nil,   nil,   nil,   528,    28,
   nil,   nil,   661,   nil,  4530,   573,   616,   nil,   nil,   nil,
   593,   700,   587,   610,   nil,   nil,   nil,   615,   627,   nil,
   648,   666,   nil,   668,   nil,   nil,   680,   926,   682,  1117,
   nil,   809,   nil, 17978,   812,  4671,  5376,   nil,    16,    -1,
    24,   370,   500,   nil,   725,  2697, 17278,   nil,   537,   848,
   851,   735,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   770,   756,   nil,  2274, 16998, 16858,  3402,   218,   nil,   nil,
  1366,   nil,   nil,   859,   nil,   725,   nil,   nil,   811,  1269,
 16438,   630,   876,   923,  2979,   825,   934,   nil,  3543,   nil,
   nil,    32, 16018,   nil,   nil,   nil,   nil,   nil, 26354,   nil,
 26330,   nil, 26315,   nil, 26278,   nil,   nil,   nil,   nil,   467,
  1144,   824,   nil,    47,   nil,   952,   953, 15598,  4248,   nil,
   nil,   964,   525,   nil,   nil,   nil,   nil, 26254,   nil,   861,
   nil,   nil,   862,   863,   865,   880,   nil,   885,   nil,   307,
   nil,   nil,   nil,   409, 26124,   nil,   nil,   908,   nil,   nil,
   nil,  5094,    51,    54,   749,   985,    80,   nil,   914,   916,
   920,   923,   927,  1243,   934,  1185,  5517,   nil,   nil,   nil,
    84,  1569,   nil,   nil,  1710,  1992,   nil, 25236,   nil, 25266,
   nil, 25541,   nil, 25612,   nil,   nil,   nil,  1310,  1028,  1029,
   nil,  1127,  8178, 26192, 26408,    -9, 25021,   nil,   nil,   nil,
   nil,   921,  1020,   780,   nil,   nil,   nil,  1142,  1144,  1146,
  1034,  1038,  1040,  1044,   nil,   nil,  1049,   118,   195,   157,
   124,  1054,  1059,   nil,   nil,   nil,   nil,   331,   nil,   nil,
   nil,   nil,    53,   nil,  1073,   nil ]

racc_action_default = [
    -1,  -626,  -625,  -626,    -2,  -612,    -4,    -5,  -626,    -8,
    -9,  -626,  -626,  -626,   -29,  -626,  -626,  -626,  -280,  -626,
   -40,   -43,  -614,  -626,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -625,   -73,   -81,   -83,
  -626,  -514,  -515,  -626,  -626,  -626,  -626,  -626,  -614,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -614,  -625,  -625,  -300,  -403,  -626,  -626,  -305,  -308,
  -612,  -626,  -316,  -323,  -626,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -625,  -453,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1056,    -3,  -613,  -621,  -622,  -623,    -7,  -626,
  -626,  -626,  -626,  -626,  -626,   -17,  -626,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -625,
  -626,  -626,  -625,  -626,  -626,  -610,  -611,  -626,  -626,  -626,
  -626,  -626,  -614,  -615,   -47,  -626,  -514,  -515,  -626,  -280,
  -626,  -626,  -230,  -626,  -625,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -409,  -412,  -626,  -608,  -609,   -58,  -626,  -299,
  -626,  -426,  -429,   -64,  -625,  -423,   -65,  -614,   -66,  -239,
  -252,  -625,  -625,  -256,  -626,  -262,  -626,  -625,  -490,  -591,
  -626,  -626,   -67,   -68,  -612,   -13,   -14,  -626,   -71,  -625,
  -614,  -626,   -74,   -77,  -625,   -89,   -90,  -626,  -626,   -97,
  -292,  -295,  -614,  -416,  -331,  -332,  -335,  -424,  -626,   -79,
  -626,   -85,  -289,  -497,  -626,  -215,  -216,  -231,  -626,  -625,
  -285,  -284,  -626,  -240,  -618,  -618,  -626,  -626,  -589,  -618,
  -626,  -301,  -302,  -546,   -49,  -626,  -626,  -626,  -626,  -612,
  -626,  -613,  -514,  -515,  -626,  -626,  -280,  -626,  -356,  -357,
  -626,  -319,  -626,  -112,  -113,  -154,  -155,  -156,  -172,  -177,
  -184,  -187,  -326,  -626,  -514,  -515,  -586,  -587,  -451,  -626,
  -474,  -626,  -476,  -626,  -478,  -626,  -626,  -458,  -626,  -626,
  -464,  -626,  -626,  -470,  -626,  -626,  -472,  -626,  -489,  -491,
  -492,  -493,  -494,    -6,  -624,   -23,   -24,   -25,   -26,   -27,
  -625,  -626,   -19,   -20,   -21,  -122,  -626,   -30,   -39,  -267,
  -626,  -626,  -266,   -31,  -197,  -614,  -247,  -248,  -625,  -625,
  -601,  -602,  -257,  -421,  -603,  -604,  -602,  -601,  -257,  -420,
  -422,  -603,  -604,   -37,  -205,   -38,  -626,   -41,   -42,  -195,
  -262,   -44,   -45,   -46,  -614,  -298,  -626,  -626,  -625,  -289,
  -626,  -626,  -626,  -206,  -207,  -208,  -209,  -210,  -211,  -212,
  -213,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,  -228,  -229,  -232,  -233,  -234,  -235,  -614,  -625,
  -257,  -601,  -602,   -54,   -59,  -258,  -417,  -625,  -625,  -614,
  -614,  -294,  -253,  -626,  -261,  -254,  -626,  -259,  -626,  -263,
  -626,  -596,  -594,  -597,   -12,  -613,   -16,  -614,   -70,  -287,
   -86,   -75,  -626,  -614,  -625,  -626,  -626,   -96,  -626,  -497,
  -626,   -82,   -87,  -626,  -626,  -626,  -626,  -236,  -626,  -437,
  -626,  -614,  -616,  -241,  -620,  -619,  -243,  -620,  -290,  -291,
  -590,  -626,  -546,  -406,  -585,  -585,  -529,  -531,  -531,  -531,
  -545,  -547,  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -626,
  -556,  -558,  -560,  -565,  -567,  -568,  -570,  -575,  -577,  -578,
  -580,  -581,  -582,  -626,  -625,  -347,  -348,  -625,  -626,  -626,
  -626,  -626,  -432,  -625,  -626,  -626,  -289,  -313,  -107,  -108,
  -626,  -110,  -626,  -280,  -626,  -626,  -324,  -546,  -328,  -626,
  -452,  -475,  -480,  -481,  -483,  -454,  -477,  -455,  -479,  -456,
  -457,  -626,  -460,  -462,  -626,  -463,  -466,  -467,  -626,  -468,
  -469,  -626,  -495,  -626,   -18,  -626,   -28,  -270,  -626,  -626,
  -425,  -626,  -249,  -251,  -626,  -626,   -60,  -245,  -246,  -418,
  -626,  -626,   -62,  -419,  -626,  -626,  -297,  -601,  -602,  -601,
  -602,  -614,  -195,  -626,  -392,  -393,  -614,  -395,  -410,   -53,
  -413,  -625,  -427,  -430,  -244,  -293,  -625,  -260,  -264,  -626,
  -592,  -593,  -626,   -15,   -72,  -626,   -78,   -84,  -614,  -601,
  -602,  -625,  -605,   -95,  -626,   -80,  -626,  -204,  -214,  -614,
  -625,  -625,  -283,  -286,  -618,  -404,  -625,  -625,  -614,  -626,
  -527,  -528,  -626,  -626,  -538,  -626,  -541,  -626,  -543,  -626,
  -358,  -626,  -360,  -362,  -369,  -614,  -559,  -569,  -579,  -583,
  -625,  -349,  -625,  -306,  -350,  -351,  -309,  -626,  -312,  -626,
  -614,  -601,  -602,  -605,  -288,  -626,  -107,  -108,  -109,  -626,
  -626,  -625,  -317,  -520,  -521,  -626,  -320,  -625,  -625,  -546,
  -626,  -626,  -614,  -626,  -625,  -459,  -461,  -465,  -471,  -473,
   -10,  -123,  -268,  -626,  -198,  -626,  -617,  -625,   -33,  -200,
   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -626,
  -626,  -626,  -626,  -425,  -626,  -585,  -585,  -374,  -625,  -625,
  -625,  -391,  -626,  -614,  -397,  -554,  -562,  -563,  -573,  -625,
  -415,  -414,   -55,  -625,  -625,  -255,  -265,  -595,   -76,  -425,
   -88,  -296,  -625,  -354,  -625,  -438,  -625,  -439,  -440,  -242,
  -626,  -626,  -614,  -585,  -566,  -584,  -530,  -531,  -531,  -557,
  -531,  -531,  -576,  -531,  -554,  -571,  -614,  -626,  -367,  -626,
  -555,  -626,  -352,  -626,  -626,  -625,  -625,  -311,  -626,  -425,
  -626,  -107,  -108,  -111,  -614,  -625,  -626,  -523,  -626,  -626,
  -626,  -614,  -525,  -329,  -588,  -482,  -485,  -486,  -487,  -488,
  -626,  -269,   -32,  -199,  -250,  -626,  -237,  -626,  -372,  -373,
  -382,  -376,  -384,  -626,  -387,  -626,  -389,  -394,  -626,  -626,
  -626,  -561,  -626,  -626,  -625,  -626,  -626,   -11,  -625,  -444,
  -355,  -626,  -626,  -442,  -407,  -408,  -405,  -526,  -626,  -534,
  -626,  -536,  -626,  -539,  -626,  -542,  -544,  -359,  -361,  -365,
  -626,  -370,  -303,  -626,  -304,  -626,  -626,  -626,  -625,  -314,
  -425,  -626,  -626,  -321,  -325,  -327,  -524,  -546,  -484,  -585,
  -564,  -375,  -625,  -625,  -625,  -625,  -574,  -625,  -396,  -614,
  -399,  -401,  -402,  -572,  -626,  -289,  -411,  -626,  -428,  -431,
  -443,  -625,  -514,  -515,  -626,  -626,  -280,  -441,  -531,  -531,
  -531,  -531,  -363,  -626,  -368,  -626,  -625,  -307,  -310,  -264,
  -625,  -625,  -318,  -522,  -625,  -625,  -371,  -626,  -379,  -626,
  -381,  -626,  -385,  -626,  -388,  -390,  -398,  -626,  -288,  -605,
   -56,  -437,  -625,  -626,  -626,  -289,  -626,  -532,  -535,  -537,
  -540,  -626,  -366,  -625,  -433,  -434,  -435,  -626,  -626,  -626,
  -625,  -625,  -625,  -625,  -400,  -436,  -614,  -601,  -602,  -605,
  -288,  -531,  -364,  -353,  -315,  -322,  -330,  -626,  -377,  -380,
  -383,  -386,  -425,  -533,  -625,  -378 ]

clist = [
'6,221,425,341,213,280,280,280,432,438,640,16,263,130,130,275,372,16',
'133,133,422,591,125,208,302,448,224,328,445,540,117,494,700,399,316',
'316,553,584,587,135,135,281,281,281,264,16,4,345,346,323,851,349,758',
'113,560,725,505,9,799,490,333,338,114,9,499,822,319,379,316,300,928',
'334,931,267,273,276,130,748,733,736,842,380,962,382,384,387,390,393',
'396,382,282,282,282,130,680,117,677,854,839,677,405,406,407,408,381',
'802,668,330,298,960,397,956,344,344,672,673,344,118,350,621,335,339',
'624,16,803,907,710,711,543,546,959,551,16,550,531,680,604,705,606,343',
'124,489,278,292,293,809,497,832,797,813,498,814,1024,984,739,800,826',
'911,378,383,386,568,389,392,395,344,344,344,344,9,875,616,763,618,764',
'398,622,866,409,622,837,2,834,950,609,280,635,616,1,336,962,835,670',
'376,835,337,904,342,433,671,357,752,838,505,840,373,1022,846,928,329',
'426,541,456,417,423,956,442,1034,16,421,443,447,347,403,855,348,863',
'421,29,856,745,680,991,360,29,677,677,865,605,868,994,280,898,16,1042',
'708,793,280,661,29,280,432,438,362,757,496,607,720,29,29,29,737,29,560',
'761,451,452,453,454,947,411,510,426,819,801,839,418,281,359,504,504',
'207,952,842,,380,281,29,812,,,528,29,29,525,,29,,,,316,,275,,,,16,532',
'16,839,,535,,16,688,,,316,560,117,691,,,529,,859,282,,588,589,691,521',
'517,,,282,686,523,16,,29,594,514,1043,695,29,29,29,29,29,939,515,516',
',,1025,,316,,316,,,,,,,,888,889,835,568,298,797,,117,797,298,797,495',
'953,,,954,740,,,,500,839,691,608,,995,344,344,,,590,,331,,,,,641,917',
',978,6,720,782,766,848,130,766,,787,648,133,16,,,634,653,,568,504,504',
',,647,280,,,,29,29,29,29,135,,433,,29,29,29,29,29,29,940,815,,871,,633',
',426,869,870,442,29,448,,,,9,,663,,,560,,680,,19,648,646,677,,797,19',
'797,652,797,805,797,1030,664,647,,,,,,29,664,664,280,829,818,29,,,29',
'1035,,,,19,532,433,827,,796,,,,532,,316,433,996,426,29,16,29,,316,442',
'797,29,568,,568,669,720,,720,442,,,864,,358,,691,,,301,,938,815,,,,29',
'833,,,,455,676,,,,941,280,,,,683,,,29,29,,,568,,433,,,,,699,,19,,,,',
'426,,16,,19,16,442,,,,,704,971,,,,,,811,,,,734,734,501,,982,720,,,1052',
',,,986,,,,753,,,,,,,29,130,518,,641,,133,,,804,771,778,780,,,756,,783',
'785,762,810,447,560,,,1026,,135,,,,641,,664,,720,532,720,504,,648,,',
'653,,19,316,820,29,,,804,,647,446,,,316,1028,1029,,,823,828,777,,,873',
',,19,,805,720,421,805,,,,16,16,,,641,,416,,,280,,860,,823,,823,,,,949',
'433,568,796,,,796,29,796,,,,301,,858,426,29,442,,,,,,,,,,,,130,29,568',
'16,16,,19,,19,,16,,504,19,,882,,867,,804,,,872,,,,,,344,656,,,,891,891',
'891,,,19,1036,316,,,,,691,,29,301,,29,,805,301,,16,29,909,,16,16,913',
'714,716,718,,,,29,,16,933,29,,674,675,,,798,,641,796,,796,942,796,,796',
',,,,684,,,,806,,687,,,16,16,,,,,29,29,,,16,,29,29,,703,29,,19,,,734',
',,,,841,,843,943,796,,,316,,344,,,,,,17,,,,316,,17,344,16,,,,16,,,,',
',,,,225,,,,340,,29,29,,225,225,225,1006,17,307,307,,,,,,16,,,891,891',
'891,891,,891,,,,,,1013,,,225,,442,993,,225,225,29,,225,354,,,29,,,16',
',,29,29,280,,19,823,,29,,,,,16,,,433,,16,29,,16,16,,,,,,426,,,,,641',
'442,17,,,,823,225,225,225,225,17,,891,891,891,891,,,,29,,821,42,29,29',
',,,42,,,,,,29,,891,,,,19,,,19,,,,850,,,,,955,,957,,42,306,306,,,419',
',29,806,29,29,806,,450,806,,806,,,29,29,979,,980,730,981,,732,874,,',
',,919,921,353,923,925,375,926,17,225,225,225,,,,,225,225,225,225,225',
'225,446,,,,29,,,,29,,,17,,,,,,,,,,,,,42,507,,509,,511,,512,513,42,,',
',,29,,,,,,916,225,1031,,1032,,1033,225,19,19,225,,,,927,,,,,,806,1041',
'806,,806,,806,29,,,17,,17,,,,307,17,,946,,,29,,,,,29,830,831,29,29,1054',
'307,,,,,,19,19,,17,,,,19,18,29,,806,,,18,,42,1017,1018,1019,1020,225',
'225,,,,,,,,,,,,602,,602,,892,894,896,42,18,309,309,,,880,,,,,19,,,,19',
'19,637,,,,,,,,,19,,,,,,,,,,356,,,1053,,,,17,,,,,,,,903,,,,905,906,19',
'19,,,,,42,,42,910,19,,306,42,,,,,,,,,18,,,,,,,306,,18,,,225,,,,42,,935',
'936,,678,,,340,,681,19,,,,19,,,,977,,,,,,,,,,,,375,,375,,,,,,,,,,,,19',
'678,,,340,,967,,17,,970,998,1000,1002,1004,307,1005,225,,,,,,307,,,',
',,726,,225,,19,18,,42,,,,990,,,,,,,,19,,,,,19,,,19,19,,18,,,,,,,,,,',
',,,1011,,,,17,,,17,,,,,,225,,1023,1048,1049,1050,1051,1027,,772,,,225',
'678,340,,225,,,,,,,,,,,1055,,,,,,,,,18,,18,,,,309,18,,,,,,,816,225,225',
'817,,42,,225,225,309,,225,306,,,,,,18,,306,,825,41,,,,,,41,,,,,,,,,',
',845,,307,,,,,,,603,,603,,307,,,,41,305,305,450,,,17,17,,,,,,,,,,42',
',,42,,,,,,,,,,,,,,,352,,881,374,,,,18,,,225,,,,,,225,,,,,,17,17,,,,',
',17,,,,,,,,,,,225,,,41,,,,,,,,,41,,,,,,,,,,,,,,,,,,,901,,,17,,,,17,17',
',,,306,,,,,,17,,,,,306,,,,,,,,,,42,42,,,,,,,18,340,,,,,225,309,17,17',
',,,,,309,,,17,225,,,,,,,41,,,,,,,,,,,,,,,,,42,42,,,,,,42,41,,963,989',
',,17,,,,17,,,,974,,,,18,,,18,,,,,,,,,,,,,,,,,,,17,375,,,42,,,,42,42',
',,,,,,,,,42,,,,41,,41,,,,305,41,,,17,,,,,,,,,,,,,305,,17,,42,42,,17',
',41,17,17,,,42,,,,,,,,,,,,,,225,,,,,309,,,,,,,374,,374,,309,,,,,375',
',,,42,18,18,,42,,,,973,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,41,,,,,,,,,,,,',
',,18,18,,,,,879,18,,,,,,,,42,,,,,,,,,,,,,,,42,,,,,42,,,42,42,,,,,,,',
',,603,,,18,,,,18,18,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,41,232,,,,,,305',
'18,18,279,279,279,,,305,,,18,,,,,325,326,327,,,,,,,,,,,,,,,279,279,',
',,,,,,,,,,603,,,,18,,,,18,,,,976,,,,41,,,41,,,,,,,,,,,,,,,,,,,18,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,,,,',
',,,,,,,,,,,,,,,,,305,,,,,,,,,,,305,,,,,,,279,424,279,41,41,,,444,449',
',,,,,,,,,,,,,,232,,,463,464,465,466,467,468,469,470,471,472,473,474',
'475,476,477,478,479,480,481,482,483,484,485,486,487,488,,,41,41,,,279',
',,41,,,279,,,279,,,,,,,279,,279,,279,,279,279,,,,,,,,,,,,,,,,,,,,,,374',
',,41,,,,41,41,,,,,,,537,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,',
',,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,374,,,,41,,,,41,,,,972,279',
',,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,279,,444,662,424,,,,,,,,,,,,',
',,,41,,,,,,,,,,,,,,,41,,,,,41,,,41,41,279,,,279,,279,,,,,,,,,,,,,,,',
'279,,,,,,,,,697,698,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,,,,,,,279,',
',,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279',
'774,,,279,279,779,781,,,,,784,786,,,662,788,,,,,,,,,,,,,,,,,,,,,,,,279',
',,279,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,',
'279,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,279,,883,,,,,,,,,,,,,,779,781',
'786,784,,886,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,883,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279' ]
        racc_goto_table = arr = ::Array.new(3073, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,25,89,27,36,36,36,40,40,26,23,153,61,61,74,60,23,64,64,30,95,17',
'17,53,20,22,34,30,10,98,42,13,60,68,68,152,92,92,65,65,71,71,71,39,23',
'2,19,19,67,93,19,99,5,183,132,76,9,142,40,6,6,8,9,25,14,54,169,68,50',
'130,71,133,41,41,41,61,58,94,94,193,6,148,6,6,6,6,6,6,6,73,73,73,61',
'198,98,77,14,188,77,19,19,19,19,170,145,43,32,49,147,170,194,32,32,43',
'43,32,7,5,173,73,73,173,23,140,15,137,137,72,72,146,149,23,72,55,198',
'59,150,59,151,11,154,48,48,48,155,158,145,138,159,160,161,162,133,163',
'143,164,165,168,171,172,187,175,176,177,32,32,32,32,9,178,174,179,174',
'180,181,174,182,9,174,186,3,190,191,197,36,66,174,1,70,148,138,75,87',
'138,88,46,91,74,45,96,97,143,76,143,100,133,132,130,101,6,102,27,22',
'22,194,61,147,23,71,22,22,103,7,104,105,58,71,44,106,107,198,108,109',
'44,77,77,110,111,112,113,36,145,23,133,152,26,36,25,44,36,40,40,114',
'115,74,116,131,44,44,44,95,44,183,117,32,32,32,32,118,33,169,6,26,134',
'188,31,71,21,6,6,18,142,193,,6,71,44,43,,,34,44,44,27,,44,,,,68,,74',
',,,23,53,23,188,,27,,23,25,,,68,183,98,40,,,67,,26,73,,19,19,40,54,50',
',,73,55,50,23,,44,27,5,93,55,44,44,44,44,44,94,8,9,,,14,,68,,68,,,,',
',,,137,137,138,187,49,138,,98,138,49,138,48,143,,,143,25,,,,48,188,40',
'39,,99,32,32,,,5,,51,,,,,34,137,,143,6,131,42,174,131,61,174,,42,74',
'64,23,,,17,74,,187,6,6,,,6,36,,,,44,44,44,44,65,,74,,44,44,44,44,44',
'44,26,76,,152,,2,,6,10,10,61,44,20,,,,9,,34,,,183,,198,,29,74,41,77',
',138,29,138,41,138,187,138,143,6,6,,,,,,44,6,6,36,72,55,44,,,44,13,',
',,29,53,74,30,,136,,,,53,,68,74,137,6,44,23,44,,68,61,138,44,187,,187',
'41,131,,131,61,,,25,,29,,40,,,12,,92,76,,,,44,136,,,,51,73,,,,10,36',
',,,9,,,44,44,,,187,,74,,,,,32,,29,,,,,6,,23,,29,23,61,,,,,73,92,,,,',
',89,,,,98,98,51,,131,131,,,26,,,,92,,,,98,,,,,,,44,61,51,,34,,64,,,34',
'17,22,22,,,32,,22,22,32,153,22,183,,,95,,65,,,,34,,6,,131,53,131,6,',
'74,,,74,,29,68,53,44,,,34,,6,29,,,68,10,10,,,6,6,73,,,60,,,29,,187,131',
'71,187,,,,23,23,,,34,,12,,,36,,19,,6,,6,,,,136,74,187,136,,,136,44,136',
',,,12,,71,6,44,61,,,,,,,,,,,,61,44,187,23,23,,29,,29,,23,,6,29,,22,',
'98,,34,,,98,,,,,,32,51,,,,6,6,6,,,29,25,68,,,,,40,,44,12,,44,,187,12',
',23,44,6,,23,23,6,185,185,185,,,,44,,23,19,44,,51,51,,,141,,34,136,',
'136,19,136,,136,,,,,51,,,,189,,51,,,23,23,,,,,44,44,,,23,,44,44,,51',
'44,,29,,,98,,,,,141,,141,98,136,,,68,,32,,,,,,24,,,,68,,24,32,23,,,',
'23,,,,,,,,,24,,,,69,,44,44,,24,24,24,34,24,24,24,,,,,,23,,,6,6,6,6,',
'6,,,,,,27,,,24,,61,98,,24,24,44,,24,24,,,44,,,23,,,44,44,36,,29,6,,44',
',,,,23,,,74,,23,44,,23,23,,,,,,6,,,,,34,61,24,,,,6,24,24,24,24,24,,6',
'6,6,6,,,,44,,51,57,44,44,,,,57,,,,,,44,,6,,,,29,,,29,,,,51,,,,,141,',
'141,,57,57,57,,,69,,44,189,44,44,189,,69,189,,189,,,44,44,141,,141,12',
'141,,12,51,,,,,185,185,57,185,185,57,185,24,24,24,24,,,,,24,24,24,24',
'24,24,29,,,,44,,,,44,,,24,,,,,,,,,,,,,57,69,,69,,69,,69,69,57,,,,,44',
',,,,,51,24,141,,141,,141,24,29,29,24,,,,51,,,,,,189,141,189,,189,,189',
'44,,,24,,24,,,,24,24,,51,,,44,,,,,44,12,12,44,44,141,24,,,,,,29,29,',
'24,,,,29,28,44,,189,,,28,,57,185,185,185,185,24,24,,,,,,,,,,,,24,,24',
',139,139,139,57,28,28,28,,,12,,,,,29,,,,29,29,69,,,,,,,,,29,,,,,,,,',
',28,,,185,,,,24,,,,,,,,12,,,,12,12,29,29,,,,,57,,57,12,29,,57,57,,,',
',,,,,28,,,,,,,57,,28,,,24,,,,57,,12,12,,69,,,69,,69,29,,,,29,,,,29,',
',,,,,,,,,,57,,57,,,,,,,,,,,,29,69,,,69,,12,,24,,12,139,139,139,139,24',
'139,24,,,,,,24,,,,,,69,,24,,29,28,,57,,,,12,,,,,,,,29,,,,,29,,,29,29',
',28,,,,,,,,,,,,,,12,,,,24,,,24,,,,,,24,,12,139,139,139,139,12,,69,,',
'24,69,69,,24,,,,,,,,,,,139,,,,,,,,,28,,28,,,,28,28,,,,,,,69,24,24,69',
',57,,24,24,28,,24,57,,,,,,28,,57,,69,56,,,,,,56,,,,,,,,,,,69,,24,,,',
',,,28,,28,,24,,,,56,56,56,69,,,24,24,,,,,,,,,,57,,,57,,,,,,,,,,,,,,',
'56,,69,56,,,,28,,,24,,,,,,24,,,,,,24,24,,,,,,24,,,,,,,,,,,24,,,56,,',
',,,,,,56,,,,,,,,,,,,,,,,,,,24,,,24,,,,24,24,,,,57,,,,,,24,,,,,57,,,',
',,,,,,57,57,,,,,,,28,69,,,,,24,28,24,24,,,,,,28,,,24,24,,,,,,,56,,,',
',,,,,,,,,,,,,57,57,,,,,,57,56,,24,69,,,24,,,,24,,,,24,,,,28,,,28,,,',
',,,,,,,,,,,,,,,24,57,,,57,,,,57,57,,,,,,,,,,57,,,,56,,56,,,,56,56,,',
'24,,,,,,,,,,,,,56,,24,,57,57,,24,,56,24,24,,,57,,,,,,,,,,,,,,24,,,,',
'28,,,,,,,56,,56,,28,,,,,57,,,,57,28,28,,57,,,,57,,,,,,,,,,,,,,,,,,,',
',,,,,,57,,,56,,,,,,,,,,,,,,,28,28,,,,,28,28,,,,,,,,57,,,,,,,,,,,,,,',
'57,,,,,57,,,57,57,,,,,,,,,,28,,,28,,,,28,28,,,,,,,,,,28,,,,,,,,,,,,',
',,,,,,,,,,56,35,,,,,,56,28,28,35,35,35,,,56,,,28,,,,,35,35,35,,,,,,',
',,,,,,,,35,35,,,,,,,,,,,,28,,,,28,,,,28,,,,28,,,,56,,,56,,,,,,,,,,,',
',,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28',
',,28,28,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,56,,,,,,,35,35,35,56,56,,',
'35,35,,,,,,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,,,56,56,,,35,,,56,,,35,,,35,,,,,,,35',
',35,,35,,35,35,,,,,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,35,,,56,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,56,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,,,,56,,,,56,,,,56,35,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,',
',,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,56,,,,,56,,,56,56',
'35,,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,',
',,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,',
',,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,,,,,,,',
',,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,',
',,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3073, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   188,    44,   181,   nil,    48,    -2,   109,    57,    55,
  -300,   130,   512,  -507,  -635,  -697,   nil,    11,   269,   -19,
  -193,   207,     3,     9,   903,  -210,  -415,   -13,  1235,   472,
  -190,    66,    46,   145,   -21,  2060,   -27,   nil,   nil,    17,
  -205,    44,  -236,  -383,   226,  -294,  -616,   nil,   110,    72,
    33,   338,   nil,   -13,    28,  -186,  1567,  1036,  -523,  -224,
   -58,     2,   nil,   nil,     7,    28,  -229,     5,    -3,   867,
   127,     9,  -206,    58,   -15,  -298,  -226,  -407,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   119,   132,   -61,
   nil,   132,  -308,  -680,  -510,  -329,   129,  -403,    25,  -555,
   131,   149,  -119,   154,  -509,   156,  -507,  -367,  -707,   161,
  -515,  -123,  -517,  -703,   180,  -352,  -116,  -344,  -604,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -777,  -312,  -514,  -777,  -392,   nil,  -153,  -428,  -518,   469,
  -542,   175,  -608,  -511,   nil,  -561,  -769,  -790,  -817,  -212,
  -414,    74,  -307,   -13,  -121,  -523,   nil,   nil,  -125,  -523,
  -122,  -522,  -838,  -438,  -545,  -669,   nil,   nil,    78,   -16,
    19,    73,    73,  -267,  -210,    74,    74,    74,  -593,  -441,
  -440,    84,  -577,  -289,   nil,   268,  -533,  -182,  -615,   193,
  -527,  -704,   nil,  -635,  -782,   nil,   nil,  -193,  -412 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   351,   296,
   nil,   nil,   539,   nil,   852,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   750,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   694,   nil,   nil,   nil,   313,   nil,   nil,    28,   427,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   601,   nil,
   132,   435,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   428,   nil,   429,   440,   649,   502,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   585,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   722,   567,   nil,   723,   951,   795,   555,   nil,   556,   nil,
   nil,   557,   nil,   559,   665,   nil,   nil,   nil,   565,   nil,
   nil,   nil,   760,   nil,   nil,   nil,   439,   270,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   611,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   836,   554,   nil,   558,   844,   570,   572,
   573,   807,   576,   577,   808,   580,   583,   nil,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  4, 214, :_reduce_286,
  3, 214, :_reduce_287,
  3, 214, :_reduce_288,
  2, 214, :_reduce_289,
  3, 214, :_reduce_290,
  3, 214, :_reduce_291,
  1, 214, :_reduce_292,
  4, 214, :_reduce_293,
  3, 214, :_reduce_294,
  1, 214, :_reduce_295,
  5, 214, :_reduce_296,
  4, 214, :_reduce_297,
  3, 214, :_reduce_298,
  2, 214, :_reduce_299,
  1, 214, :_reduce_none,
  2, 214, :_reduce_301,
  2, 214, :_reduce_302,
  6, 214, :_reduce_303,
  6, 214, :_reduce_304,
  0, 249, :_reduce_305,
  0, 250, :_reduce_306,
  7, 214, :_reduce_307,
  0, 251, :_reduce_308,
  0, 252, :_reduce_309,
  7, 214, :_reduce_310,
  5, 214, :_reduce_311,
  4, 214, :_reduce_312,
  0, 253, :_reduce_313,
  0, 254, :_reduce_314,
  9, 214, :_reduce_315,
  0, 255, :_reduce_316,
  0, 256, :_reduce_317,
  7, 214, :_reduce_318,
  0, 257, :_reduce_319,
  0, 258, :_reduce_320,
  0, 259, :_reduce_321,
  9, 214, :_reduce_322,
  0, 260, :_reduce_323,
  0, 261, :_reduce_324,
  6, 214, :_reduce_325,
  0, 262, :_reduce_326,
  6, 214, :_reduce_327,
  0, 263, :_reduce_328,
  0, 264, :_reduce_329,
  9, 214, :_reduce_330,
  1, 214, :_reduce_331,
  1, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 170, :_reduce_335,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_353,
  1, 160, :_reduce_none,
  2, 160, :_reduce_355,
  1, 242, :_reduce_none,
  1, 242, :_reduce_357,
  1, 276, :_reduce_none,
  3, 276, :_reduce_359,
  1, 279, :_reduce_360,
  3, 279, :_reduce_361,
  1, 278, :_reduce_362,
  4, 278, :_reduce_363,
  6, 278, :_reduce_364,
  3, 278, :_reduce_365,
  5, 278, :_reduce_366,
  2, 278, :_reduce_367,
  4, 278, :_reduce_368,
  1, 278, :_reduce_369,
  3, 278, :_reduce_370,
  4, 280, :_reduce_371,
  2, 280, :_reduce_372,
  2, 280, :_reduce_373,
  1, 280, :_reduce_374,
  2, 285, :_reduce_375,
  1, 285, :_reduce_none,
  6, 286, :_reduce_377,
  8, 286, :_reduce_378,
  4, 286, :_reduce_379,
  6, 286, :_reduce_380,
  4, 286, :_reduce_381,
  2, 286, :_reduce_382,
  6, 286, :_reduce_383,
  2, 286, :_reduce_384,
  4, 286, :_reduce_385,
  6, 286, :_reduce_386,
  2, 286, :_reduce_387,
  4, 286, :_reduce_388,
  2, 286, :_reduce_389,
  4, 286, :_reduce_390,
  1, 286, :_reduce_391,
  1, 189, :_reduce_392,
  1, 189, :_reduce_none,
  3, 290, :_reduce_394,
  1, 290, :_reduce_395,
  4, 290, :_reduce_396,
  1, 291, :_reduce_none,
  4, 291, :_reduce_398,
  1, 292, :_reduce_399,
  3, 292, :_reduce_400,
  1, 293, :_reduce_401,
  1, 293, :_reduce_none,
  0, 297, :_reduce_403,
  3, 237, :_reduce_404,
  4, 295, :_reduce_405,
  1, 295, :_reduce_406,
  3, 296, :_reduce_407,
  3, 296, :_reduce_408,
  0, 300, :_reduce_409,
  0, 301, :_reduce_410,
  6, 299, :_reduce_411,
  2, 184, :_reduce_412,
  4, 184, :_reduce_413,
  5, 184, :_reduce_414,
  5, 184, :_reduce_415,
  0, 303, :_reduce_416,
  3, 236, :_reduce_417,
  4, 236, :_reduce_418,
  4, 236, :_reduce_419,
  3, 236, :_reduce_420,
  3, 236, :_reduce_421,
  3, 236, :_reduce_422,
  2, 236, :_reduce_423,
  1, 236, :_reduce_424,
  4, 236, :_reduce_425,
  0, 304, :_reduce_426,
  0, 305, :_reduce_427,
  6, 235, :_reduce_428,
  0, 306, :_reduce_429,
  0, 307, :_reduce_430,
  6, 235, :_reduce_431,
  0, 309, :_reduce_432,
  6, 241, :_reduce_433,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  6, 159, :_reduce_436,
  0, 159, :_reduce_437,
  1, 310, :_reduce_438,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 311, :_reduce_441,
  1, 311, :_reduce_none,
  2, 161, :_reduce_443,
  1, 161, :_reduce_none,
  1, 225, :_reduce_445,
  1, 225, :_reduce_446,
  1, 225, :_reduce_none,
  1, 226, :_reduce_448,
  1, 313, :_reduce_449,
  1, 313, :_reduce_none,
  2, 313, :_reduce_451,
  3, 314, :_reduce_452,
  1, 314, :_reduce_453,
  3, 227, :_reduce_454,
  3, 228, :_reduce_455,
  3, 229, :_reduce_456,
  3, 229, :_reduce_457,
  1, 318, :_reduce_458,
  3, 318, :_reduce_459,
  1, 319, :_reduce_none,
  2, 319, :_reduce_461,
  3, 231, :_reduce_462,
  3, 231, :_reduce_463,
  1, 321, :_reduce_464,
  3, 321, :_reduce_465,
  3, 230, :_reduce_466,
  3, 230, :_reduce_467,
  3, 232, :_reduce_468,
  3, 232, :_reduce_469,
  1, 322, :_reduce_470,
  3, 322, :_reduce_471,
  1, 323, :_reduce_472,
  3, 323, :_reduce_473,
  1, 315, :_reduce_474,
  2, 315, :_reduce_475,
  1, 316, :_reduce_476,
  2, 316, :_reduce_477,
  1, 317, :_reduce_478,
  2, 317, :_reduce_479,
  1, 320, :_reduce_480,
  0, 325, :_reduce_481,
  3, 320, :_reduce_482,
  0, 326, :_reduce_483,
  4, 320, :_reduce_484,
  1, 324, :_reduce_485,
  1, 324, :_reduce_486,
  1, 324, :_reduce_487,
  1, 324, :_reduce_none,
  2, 210, :_reduce_489,
  1, 210, :_reduce_490,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  3, 211, :_reduce_495,
  1, 312, :_reduce_none,
  2, 312, :_reduce_497,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_507,
  1, 203, :_reduce_508,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 233, :_reduce_514,
  1, 233, :_reduce_515,
  1, 169, :_reduce_516,
  1, 169, :_reduce_517,
  1, 174, :_reduce_518,
  1, 174, :_reduce_519,
  1, 243, :_reduce_520,
  0, 328, :_reduce_521,
  4, 243, :_reduce_522,
  2, 243, :_reduce_523,
  3, 245, :_reduce_524,
  2, 245, :_reduce_525,
  4, 329, :_reduce_526,
  2, 329, :_reduce_527,
  2, 329, :_reduce_528,
  1, 329, :_reduce_none,
  2, 331, :_reduce_530,
  0, 331, :_reduce_531,
  6, 298, :_reduce_532,
  8, 298, :_reduce_533,
  4, 298, :_reduce_534,
  6, 298, :_reduce_535,
  4, 298, :_reduce_536,
  6, 298, :_reduce_537,
  2, 298, :_reduce_538,
  4, 298, :_reduce_539,
  6, 298, :_reduce_540,
  2, 298, :_reduce_541,
  4, 298, :_reduce_542,
  2, 298, :_reduce_543,
  4, 298, :_reduce_544,
  1, 298, :_reduce_545,
  0, 298, :_reduce_546,
  1, 294, :_reduce_547,
  1, 294, :_reduce_548,
  1, 294, :_reduce_549,
  1, 294, :_reduce_550,
  1, 277, :_reduce_none,
  1, 277, :_reduce_552,
  1, 333, :_reduce_none,
  1, 334, :_reduce_none,
  3, 334, :_reduce_555,
  1, 287, :_reduce_556,
  3, 287, :_reduce_557,
  1, 335, :_reduce_none,
  2, 336, :_reduce_559,
  1, 336, :_reduce_560,
  2, 337, :_reduce_561,
  1, 337, :_reduce_562,
  1, 281, :_reduce_none,
  3, 281, :_reduce_564,
  1, 330, :_reduce_none,
  3, 330, :_reduce_566,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 282, :_reduce_569,
  1, 282, :_reduce_570,
  3, 339, :_reduce_571,
  3, 340, :_reduce_572,
  1, 288, :_reduce_573,
  3, 288, :_reduce_574,
  1, 332, :_reduce_575,
  3, 332, :_reduce_576,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 289, :_reduce_579,
  1, 289, :_reduce_580,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 284, :_reduce_583,
  2, 283, :_reduce_584,
  0, 283, :_reduce_585,
  1, 246, :_reduce_none,
  0, 343, :_reduce_587,
  4, 246, :_reduce_588,
  1, 234, :_reduce_589,
  2, 234, :_reduce_590,
  1, 219, :_reduce_none,
  3, 219, :_reduce_592,
  3, 344, :_reduce_593,
  2, 344, :_reduce_594,
  4, 344, :_reduce_595,
  2, 344, :_reduce_596,
  2, 344, :_reduce_597,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_621,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_624,
  0, 152, :_reduce_625 ]

racc_reduce_n = 626

racc_shift_n = 1056

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_596(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

# reduce 622 omitted

# reduce 623 omitted

def _reduce_624(val, _values, result)
 yyerrok 
    result
end

def _reduce_625(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
